{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    img: \"img\",\n    ol: \"ol\",\n    li: \"li\",\n    strong: \"strong\",\n    a: \"a\",\n    hr: \"hr\",\n    code: \"code\",\n    ul: \"ul\",\n    h3: \"h3\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components), {Lede, Examples, Props, DoDont} = _components;\n  if (!DoDont) _missingMdxReference(\"DoDont\", true);\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"Combobox is an accessible autocomplete input that enables merchants to filter a list of options and select one or more values.\"\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"anatomy\",\n      children: \"Anatomy\"\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/images/components/selection-and-input/combobox/combobox-anatomy@2x.png\",\n      alt: \"A diagram of the Combobox component showing the smaller primitive components it is composed of.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A combobox is made up of the following:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"TextField\"\n        }), \": A text input that activates a popover displaying a list of options. As merchants type in the text field, the list of options is filtered by the input value. Options replace or add to the input value when selected.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Popover\"\n        }), \": An overlay containing a list of options.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Listbox\"\n        }), \": A list of options to filter and select or deselect.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Listbox.Option\"\n        }), \": The individual options to select or deselect. Check out the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/lists/listbox\",\n          children: \"listbox component documentation\"\n        }), \" to learn how to compose it with various content.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"Combobox\"\n      }), \" component should:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Be clearly labeled so the merchant knows what kind of options will be available\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Not be used within a popover\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Indicate a loading state to the merchant while option data is being populated\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Order items in an intentional way so it’s easy for the merchant to find a specific value\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"content-guidelines\",\n      children: \"Content guidelines\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The input field for \", _jsx(_components.code, {\n        children: \"Combobox\"\n      }), \" should follow the \", _jsx(_components.a, {\n        href: \"https://polaris.shopify.com/components/selection-and-input/text-field\",\n        children: \"content guidelines\"\n      }), \" for text fields.\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"sorting-and-filtering\",\n      children: \"Sorting and filtering\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"sorting\",\n      children: \"Sorting\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Item order should be intentional. Order them so it’s easy for the merchant to find a specific value. Some ways you can do this:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Sort options in alphabetical order\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Display options based on how frequently the merchant selects an option\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If multiple options can be selected, move selected items to the top of the list. If this doesn’t work for your context, you can override this behavior.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"filtering\",\n      children: \"Filtering\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"By default, menu items are filtered based on whether or not they match the value of the textfield.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Filters are \", _jsx(_components.strong, {\n          children: \"not\"\n        }), \" case-sensitive by default.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"You can apply custom filtering logic if the default behavior doesn’t make sense for your use case.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"patterns\",\n      children: \"Patterns\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"tags-autocomplete\",\n      children: \"Tags autocomplete\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The tag multi-select input enables merchants to efficiently add or remove tags from a resource, like a product or an order. It uses the inline autocomplete combobox pattern to present merchants with an editable list of tags to browse and select from.\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"related-components\",\n      children: \"Related components\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"For an input field without suggested options, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/selection-and-input/text-field\",\n          children: \"use the text field component\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"For a list of selectable options not linked to an input field, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/lists/listbox\",\n          children: \"use the list box component\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"accessibility\",\n      children: \"Accessibility\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"structure\",\n      children: \"Structure\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"Combobox\"\n      }), \" component is based on the \", _jsx(_components.a, {\n        href: \"https://www.w3.org/TR/wai-aria-practices-1.1/#combobox\",\n        children: \"ARIA 1.2 combobox pattern\"\n      }), \". It is a combination of a single-line \", _jsx(_components.code, {\n        children: \"TextField\"\n      }), \" and a \", _jsx(_components.code, {\n        children: \"Popover\"\n      }), \". The current implementation expects a \", _jsx(_components.a, {\n        href: \"https://polaris.shopify.com/components/lists/listbox\",\n        children: _jsx(_components.code, {\n          children: \"Listbox\"\n        })\n      }), \" component to be used.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"Combobox\"\n      }), \" popover displays below the text field or other control by default so it is easy for merchants to discover and use. However, you can change the position with the \", _jsx(_components.code, {\n        children: \"preferredPosition\"\n      }), \" prop.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Combobox\"\n      }), \" features can be challenging for merchants with visual, motor, and cognitive disabilities. Even when they’re built using best practices, these features can be difficult to use with some assistive technologies. Merchants should always be able to search, enter data, or perform other activities without relying on the combobox.\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Use combobox as progressive enhancement to make the interface easier to use for most merchants.\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Require that merchants make a selection from the combobox to complete a task.\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"keyboard-support\",\n      children: \"Keyboard support\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Give the combobox's text input keyboard focus with the \", _jsx(\"kbd\", {\n          children: \"tab\"\n        }), \" key (or \", _jsx(\"kbd\", {\n          children: \"shift\"\n        }), \" + \", _jsx(\"kbd\", {\n          children: \"tab\"\n        }), \" when tabbing backwards)\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Combobox","category":"Selection and input","keywords":["autocomplete","searchable","typeahead","combobox","combo box","listbox","list box"],"examples":[{"fileName":"combobox-default.tsx","title":"Default","description":"Use when merchants can select one option from a predefined or editable list."},{"fileName":"combobox-with-manual-selection.tsx","title":"With manual selection","description":"Use when merchants can select one option from a predefined or editable list."},{"fileName":"combobox-with-multi-select.tsx","title":"With multi-select","description":"Use when merchants can select one or more options from a predefined or editable list."},{"fileName":"combobox-with-multi-select-and-manual-selection.tsx","title":"With multi-select and manual selection","description":"Use when merchants can select one or more options from a predefined or editable list."},{"fileName":"combobox-with-multi-select-and-vertical-content.tsx","title":"With multi-select and vertical content","description":"Use to display selected options above the input value."},{"fileName":"combobox-with-loading.tsx","title":"With loading","description":"Use to indicate to merchants that the list data is being fetched."}],"previewImg":"/images/components/selection-and-input/combobox.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"combobox-default.tsx","title":"Default","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when merchants can select one option from a predefined or editable list.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Listbox, Combobox, Icon} from '@shopify/polaris';\nimport {SearchMinor} from '@shopify/polaris-icons';\nimport {useState, useCallback, useMemo} from 'react';\n\nfunction ComboboxExample() {\n  const deselectedOptions = useMemo(\n    () => [\n      {value: 'rustic', label: 'Rustic'},\n      {value: 'antique', label: 'Antique'},\n      {value: 'vinyl', label: 'Vinyl'},\n      {value: 'vintage', label: 'Vintage'},\n      {value: 'refurbished', label: 'Refurbished'},\n    ],\n    [],\n  );\n\n  const [selectedOption, setSelectedOption] = useState<string | undefined>();\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState(deselectedOptions);\n\n  const updateText = useCallback(\n    (value: string) => {\n      setInputValue(value);\n\n      if (value === '') {\n        setOptions(deselectedOptions);\n        return;\n      }\n\n      const filterRegex = new RegExp(value, 'i');\n      const resultOptions = deselectedOptions.filter((option) =>\n        option.label.match(filterRegex),\n      );\n      setOptions(resultOptions);\n    },\n    [deselectedOptions],\n  );\n\n  const updateSelection = useCallback(\n    (selected: string) => {\n      const matchedOption = options.find((option) => {\n        return option.value.match(selected);\n      });\n\n      setSelectedOption(selected);\n      setInputValue((matchedOption && matchedOption.label) || '');\n    },\n    [options],\n  );\n\n  const optionsMarkup =\n    options.length > 0\n      ? options.map((option) => {\n          const {label, value} = option;\n\n          return (\n            <Listbox.Option\n              key={`${value}`}\n              value={value}\n              selected={selectedOption === value}\n              accessibilityLabel={label}\n            >\n              {label}\n            </Listbox.Option>\n          );\n        })\n      : null;\n\n  return (\n    <div style={{height: '225px'}}>\n      <Combobox\n        activator={\n          <Combobox.TextField\n            prefix={<Icon source={SearchMinor} />}\n            onChange={updateText}\n            label=\"Search tags\"\n            labelHidden\n            value={inputValue}\n            placeholder=\"Search tags\"\n            autoComplete=\"off\"\n          />\n        }\n      >\n        {options.length > 0 ? (\n          <Listbox onSelect={updateSelection}>{optionsMarkup}</Listbox>\n        ) : null}\n      </Combobox>\n    </div>\n  );\n}\n\n"},{"fileName":"combobox-with-manual-selection.tsx","title":"With manual selection","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when merchants can select one option from a predefined or editable list.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  Tag,\n  Listbox,\n  Combobox,\n  Icon,\n  TextContainer,\n  LegacyStack,\n  AutoSelection,\n} from '@shopify/polaris';\nimport {SearchMinor} from '@shopify/polaris-icons';\nimport {useState, useCallback, useMemo} from 'react';\n\nfunction MultiComboboxExample() {\n  const deselectedOptions = useMemo(\n    () => [\n      {value: 'rustic', label: 'Rustic'},\n      {value: 'antique', label: 'Antique'},\n      {value: 'vinyl', label: 'Vinyl'},\n      {value: 'vintage', label: 'Vintage'},\n      {value: 'refurbished', label: 'Refurbished'},\n    ],\n    [],\n  );\n\n  const [selectedOptions, setSelectedOptions] = useState<string[]>([]);\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState(deselectedOptions);\n\n  const updateText = useCallback(\n    (value: string) => {\n      setInputValue(value);\n\n      if (value === '') {\n        setOptions(deselectedOptions);\n        return;\n      }\n\n      const filterRegex = new RegExp(value, 'i');\n      const resultOptions = deselectedOptions.filter((option) =>\n        option.label.match(filterRegex),\n      );\n      setOptions(resultOptions);\n    },\n    [deselectedOptions],\n  );\n\n  const updateSelection = useCallback(\n    (selected: string) => {\n      if (selectedOptions.includes(selected)) {\n        setSelectedOptions(\n          selectedOptions.filter((option) => option !== selected),\n        );\n      } else {\n        setSelectedOptions([...selectedOptions, selected]);\n      }\n\n      updateText('');\n    },\n    [selectedOptions, updateText],\n  );\n\n  const removeTag = useCallback(\n    (tag: string) => () => {\n      const options = [...selectedOptions];\n      options.splice(options.indexOf(tag), 1);\n      setSelectedOptions(options);\n    },\n    [selectedOptions],\n  );\n\n  const tagsMarkup = selectedOptions.map((option) => (\n    <Tag key={`option-${option}`} onRemove={removeTag(option)}>\n      {option}\n    </Tag>\n  ));\n\n  const optionsMarkup =\n    options.length > 0\n      ? options.map((option) => {\n          const {label, value} = option;\n\n          return (\n            <Listbox.Option\n              key={`${value}`}\n              value={value}\n              selected={selectedOptions.includes(value)}\n              accessibilityLabel={label}\n            >\n              {label}\n            </Listbox.Option>\n          );\n        })\n      : null;\n\n  return (\n    <div style={{height: '225px'}}>\n      <Combobox\n        allowMultiple\n        activator={\n          <Combobox.TextField\n            prefix={<Icon source={SearchMinor} />}\n            onChange={updateText}\n            label=\"Search tags\"\n            labelHidden\n            value={inputValue}\n            placeholder=\"Search tags\"\n            autoComplete=\"off\"\n          />\n        }\n      >\n        {optionsMarkup ? (\n          <Listbox\n            autoSelection={AutoSelection.None}\n            onSelect={updateSelection}\n          >\n            {optionsMarkup}\n          </Listbox>\n        ) : null}\n      </Combobox>\n      <TextContainer>\n        <LegacyStack>{tagsMarkup}</LegacyStack>\n      </TextContainer>\n    </div>\n  );\n}\n\n"},{"fileName":"combobox-with-multi-select.tsx","title":"With multi-select","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when merchants can select one or more options from a predefined or editable list.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  LegacyStack,\n  Tag,\n  Listbox,\n  Combobox,\n  Icon,\n  TextContainer,\n} from '@shopify/polaris';\n\nimport {SearchMinor} from '@shopify/polaris-icons';\n\nimport {useState, useCallback, useMemo} from 'react';\n\n\nfunction MultiAutoComboboxExample() {\n  const deselectedOptions = useMemo(\n    () => [\n      {value: 'rustic', label: 'Rustic'},\n      {value: 'antique', label: 'Antique'},\n      {value: 'vinyl', label: 'Vinyl'},\n      {value: 'vintage', label: 'Vintage'},\n      {value: 'refurbished', label: 'Refurbished'},\n    ],\n    [],\n  );\n\n  const [selectedOptions, setSelectedOptions] = useState<string[]>([]);\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState(deselectedOptions);\n\n  const updateText = useCallback(\n    (value: string) => {\n      setInputValue(value);\n\n      if (value === '') {\n        setOptions(deselectedOptions);\n        return;\n      }\n\n      const filterRegex = new RegExp(value, 'i');\n      const resultOptions = deselectedOptions.filter((option) =>\n        option.label.match(filterRegex),\n      );\n      setOptions(resultOptions);\n    },\n    [deselectedOptions],\n  );\n\n  const updateSelection = useCallback(\n    (selected: string) => {\n      if (selectedOptions.includes(selected)) {\n        setSelectedOptions(\n          selectedOptions.filter((option) => option !== selected),\n        );\n      } else {\n        setSelectedOptions([...selectedOptions, selected]);\n      }\n\n      updateText('');\n    },\n    [selectedOptions, updateText],\n  );\n\n  const removeTag = useCallback(\n    (tag: string) => () => {\n      const options = [...selectedOptions];\n      options.splice(options.indexOf(tag), 1);\n      setSelectedOptions(options);\n    },\n    [selectedOptions],\n  );\n\n  const tagsMarkup = selectedOptions.map((option) => (\n    <Tag key={`option-${option}`} onRemove={removeTag(option)}>\n      {option}\n    </Tag>\n  ));\n\n  const optionsMarkup =\n    options.length > 0\n      ? options.map((option) => {\n          const {label, value} = option;\n\n          return (\n            <Listbox.Option\n              key={`${value}`}\n              value={value}\n              selected={selectedOptions.includes(value)}\n              accessibilityLabel={label}\n            >\n              {label}\n            </Listbox.Option>\n          );\n        })\n      : null;\n\n  return (\n    <div style={{height: '225px'}}>\n      <Combobox\n        allowMultiple\n        activator={\n          <Combobox.TextField\n            prefix={<Icon source={SearchMinor} />}\n            onChange={updateText}\n            label=\"Search tags\"\n            labelHidden\n            value={inputValue}\n            placeholder=\"Search tags\"\n            autoComplete=\"off\"\n          />\n        }\n      >\n        {optionsMarkup ? (\n          <Listbox onSelect={updateSelection}>{optionsMarkup}</Listbox>\n        ) : null}\n      </Combobox>\n      <TextContainer>\n        <LegacyStack>{tagsMarkup}</LegacyStack>\n      </TextContainer>\n    </div>\n  );\n}\n\n"},{"fileName":"combobox-with-multi-select-and-manual-selection.tsx","title":"With multi-select and manual selection","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when merchants can select one or more options from a predefined or editable list.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  Tag,\n  Listbox,\n  Combobox,\n  Icon,\n  TextContainer,\n  LegacyStack,\n  AutoSelection,\n} from '@shopify/polaris';\nimport {SearchMinor} from '@shopify/polaris-icons';\nimport {useState, useCallback, useMemo} from 'react';\n\nfunction MultiManualComboboxExample() {\n  const deselectedOptions = useMemo(\n    () => [\n      {value: 'rustic', label: 'Rustic'},\n      {value: 'antique', label: 'Antique'},\n      {value: 'vinyl', label: 'Vinyl'},\n      {value: 'vintage', label: 'Vintage'},\n      {value: 'refurbished', label: 'Refurbished'},\n    ],\n    [],\n  );\n\n  const [selectedOptions, setSelectedOptions] = useState<string[]>([]);\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState(deselectedOptions);\n\n  const updateText = useCallback(\n    (value: string) => {\n      setInputValue(value);\n\n      if (value === '') {\n        setOptions(deselectedOptions);\n        return;\n      }\n\n      const filterRegex = new RegExp(value, 'i');\n      const resultOptions = deselectedOptions.filter((option) =>\n        option.label.match(filterRegex),\n      );\n      setOptions(resultOptions);\n    },\n    [deselectedOptions],\n  );\n\n  const updateSelection = useCallback(\n    (selected: string) => {\n      if (selectedOptions.includes(selected)) {\n        setSelectedOptions(\n          selectedOptions.filter((option) => option !== selected),\n        );\n      } else {\n        setSelectedOptions([...selectedOptions, selected]);\n      }\n\n      updateText('');\n    },\n    [selectedOptions, updateText],\n  );\n\n  const removeTag = useCallback(\n    (tag: string) => () => {\n      const options = [...selectedOptions];\n      options.splice(options.indexOf(tag), 1);\n      setSelectedOptions(options);\n    },\n    [selectedOptions],\n  );\n\n  const tagsMarkup = selectedOptions.map((option) => (\n    <Tag key={`option-${option}`} onRemove={removeTag(option)}>\n      {option}\n    </Tag>\n  ));\n\n  const optionsMarkup =\n    options.length > 0\n      ? options.map((option) => {\n          const {label, value} = option;\n\n          return (\n            <Listbox.Option\n              key={`${value}`}\n              value={value}\n              selected={selectedOptions.includes(value)}\n              accessibilityLabel={label}\n            >\n              {label}\n            </Listbox.Option>\n          );\n        })\n      : null;\n\n  return (\n    <div style={{height: '225px'}}>\n      <Combobox\n        allowMultiple\n        activator={\n          <Combobox.TextField\n            prefix={<Icon source={SearchMinor} />}\n            onChange={updateText}\n            label=\"Search tags\"\n            labelHidden\n            value={inputValue}\n            placeholder=\"Search tags\"\n            autoComplete=\"off\"\n          />\n        }\n      >\n        {optionsMarkup ? (\n          <Listbox\n            autoSelection={AutoSelection.None}\n            onSelect={updateSelection}\n          >\n            {optionsMarkup}\n          </Listbox>\n        ) : null}\n      </Combobox>\n      <TextContainer>\n        <LegacyStack>{tagsMarkup}</LegacyStack>\n      </TextContainer>\n    </div>\n  );\n}\n\n"},{"fileName":"combobox-with-multi-select-and-vertical-content.tsx","title":"With multi-select and vertical content","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to display selected options above the input value.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  LegacyStack,\n  Tag,\n  Listbox,\n  EmptySearchResult,\n  Combobox,\n  Text,\n  AutoSelection,\n} from '@shopify/polaris';\nimport {useState, useCallback, useMemo} from 'react';\n\nfunction MultiselectTagComboboxExample() {\n  const [selectedTags, setSelectedTags] = useState<string[]>(['Rustic']);\n  const [value, setValue] = useState('');\n  const [suggestion, setSuggestion] = useState('');\n\n  const handleActiveOptionChange = useCallback(\n    (activeOption: string) => {\n      const activeOptionIsAction = activeOption === value;\n\n      if (!activeOptionIsAction && !selectedTags.includes(activeOption)) {\n        setSuggestion(activeOption);\n      } else {\n        setSuggestion('');\n      }\n    },\n    [value, selectedTags],\n  );\n  const updateSelection = useCallback(\n    (selected: string) => {\n      const nextSelectedTags = new Set([...selectedTags]);\n\n      if (nextSelectedTags.has(selected)) {\n        nextSelectedTags.delete(selected);\n      } else {\n        nextSelectedTags.add(selected);\n      }\n      setSelectedTags([...nextSelectedTags]);\n      setValue('');\n      setSuggestion('');\n    },\n    [selectedTags],\n  );\n\n  const removeTag = useCallback(\n    (tag: string) => () => {\n      updateSelection(tag);\n    },\n    [updateSelection],\n  );\n\n  const getAllTags = useCallback(() => {\n    const savedTags = ['Rustic', 'Antique', 'Vinyl', 'Vintage', 'Refurbished'];\n    return [...new Set([...savedTags, ...selectedTags].sort())];\n  }, [selectedTags]);\n\n  const formatOptionText = useCallback(\n    (option: string) => {\n      const trimValue = value.trim().toLocaleLowerCase();\n      const matchIndex = option.toLocaleLowerCase().indexOf(trimValue);\n\n      if (!value || matchIndex === -1) return option;\n\n      const start = option.slice(0, matchIndex);\n      const highlight = option.slice(matchIndex, matchIndex + trimValue.length);\n      const end = option.slice(matchIndex + trimValue.length, option.length);\n\n      return (\n        <p>\n          {start}\n          <Text fontWeight=\"bold\" as=\"span\">\n            {highlight}\n          </Text>\n          {end}\n        </p>\n      );\n    },\n    [value],\n  );\n\n  const options = useMemo(() => {\n    let list;\n    const allTags = getAllTags();\n    const filterRegex = new RegExp(value, 'i');\n\n    if (value) {\n      list = allTags.filter((tag) => tag.match(filterRegex));\n    } else {\n      list = allTags;\n    }\n\n    return [...list];\n  }, [value, getAllTags]);\n\n  const verticalContentMarkup =\n    selectedTags.length > 0 ? (\n      <LegacyStack spacing=\"extraTight\" alignment=\"center\">\n        {selectedTags.map((tag) => (\n          <Tag key={`option-${tag}`} onRemove={removeTag(tag)}>\n            {tag}\n          </Tag>\n        ))}\n      </LegacyStack>\n    ) : null;\n\n  const optionMarkup =\n    options.length > 0\n      ? options.map((option) => {\n          return (\n            <Listbox.Option\n              key={option}\n              value={option}\n              selected={selectedTags.includes(option)}\n              accessibilityLabel={option}\n            >\n              <Listbox.TextOption selected={selectedTags.includes(option)}>\n                {formatOptionText(option)}\n              </Listbox.TextOption>\n            </Listbox.Option>\n          );\n        })\n      : null;\n\n  const noResults = value && !getAllTags().includes(value);\n\n  const actionMarkup = noResults ? (\n    <Listbox.Action value={value}>{`Add \"${value}\"`}</Listbox.Action>\n  ) : null;\n\n  const emptyStateMarkup = optionMarkup ? null : (\n    <EmptySearchResult\n      title=\"\"\n      description={`No tags found matching \"${value}\"`}\n    />\n  );\n\n  const listboxMarkup =\n    optionMarkup || actionMarkup || emptyStateMarkup ? (\n      <Listbox\n        autoSelection={AutoSelection.None}\n        onSelect={updateSelection}\n        onActiveOptionChange={handleActiveOptionChange}\n      >\n        {actionMarkup}\n        {optionMarkup}\n      </Listbox>\n    ) : null;\n\n  return (\n    <div style={{height: '225px'}}>\n      <Combobox\n        allowMultiple\n        activator={\n          <Combobox.TextField\n            autoComplete=\"off\"\n            label=\"Search tags\"\n            labelHidden\n            value={value}\n            suggestion={suggestion}\n            placeholder=\"Search tags\"\n            verticalContent={verticalContentMarkup}\n            onChange={setValue}\n          />\n        }\n      >\n        {listboxMarkup}\n      </Combobox>\n    </div>\n  );\n}\n\n"},{"fileName":"combobox-with-loading.tsx","title":"With loading","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to indicate to merchants that the list data is being fetched.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Listbox, Combobox, Icon} from '@shopify/polaris';\nimport {SearchMinor} from '@shopify/polaris-icons';\nimport {useState, useCallback, useMemo} from 'react';\n\nfunction LoadingAutocompleteExample() {\n  const deselectedOptions = useMemo(\n    () => [\n      {value: 'rustic', label: 'Rustic'},\n      {value: 'antique', label: 'Antique'},\n      {value: 'vinyl', label: 'Vinyl'},\n      {value: 'vintage', label: 'Vintage'},\n      {value: 'refurbished', label: 'Refurbished'},\n    ],\n    [],\n  );\n\n  const [selectedOption, setSelectedOption] = useState<string | undefined>();\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState(deselectedOptions);\n  const [loading, setLoading] = useState(false);\n\n  const updateText = useCallback(\n    (value: string) => {\n      setInputValue(value);\n\n      if (!loading) {\n        setLoading(true);\n      }\n\n      setTimeout(() => {\n        if (value === '') {\n          setOptions(deselectedOptions);\n          setLoading(false);\n          return;\n        }\n        const filterRegex = new RegExp(value, 'i');\n        const resultOptions = options.filter((option) =>\n          option.label.match(filterRegex),\n        );\n        setOptions(resultOptions);\n        setLoading(false);\n      }, 300);\n    },\n    [deselectedOptions, loading, options],\n  );\n\n  const updateSelection = useCallback(\n    (selected: string) => {\n      const matchedOption = options.find((option) => {\n        return option.value.match(selected);\n      });\n\n      setSelectedOption(selected);\n      setInputValue((matchedOption && matchedOption.label) || '');\n    },\n    [options],\n  );\n\n  const optionsMarkup =\n    options.length > 0\n      ? options.map((option) => {\n          const {label, value} = option;\n\n          return (\n            <Listbox.Option\n              key={`${value}`}\n              value={value}\n              selected={selectedOption === value}\n              accessibilityLabel={label}\n            >\n              {label}\n            </Listbox.Option>\n          );\n        })\n      : null;\n\n  const loadingMarkup = loading ? (\n    <Listbox.Loading accessibilityLabel=\"Loading\" />\n  ) : null;\n\n  const listboxMarkup =\n    optionsMarkup || loadingMarkup ? (\n      <Listbox onSelect={updateSelection}>\n        {optionsMarkup && !loading ? optionsMarkup : null}\n        {loadingMarkup}\n      </Listbox>\n    ) : null;\n\n  return (\n    <div style={{height: '225px'}}>\n      <Combobox\n        activator={\n          <Combobox.TextField\n            prefix={<Icon source={SearchMinor} />}\n            onChange={updateText}\n            label=\"Search tags\"\n            labelHidden\n            value={inputValue}\n            placeholder=\"Search tags\"\n            autoComplete=\"off\"\n          />\n        }\n      >\n        {listboxMarkup}\n      </Combobox>\n    </div>\n  );\n}\n\n"}],"seoDescription":"Combobox is an accessible autocomplete input that enables merchants to filter a list of options and select one or more values.","type":{"ComboboxProps":{"filePath":"polaris-react/src/components/Combobox/Combobox.tsx","name":"ComboboxProps","description":"","members":[{"filePath":"polaris-react/src/components/Combobox/Combobox.tsx","syntaxKind":"PropertySignature","name":"activator","value":"React.ReactElement<TextFieldProps>","description":"The text field component to activate the Popover"},{"filePath":"polaris-react/src/components/Combobox/Combobox.tsx","syntaxKind":"PropertySignature","name":"allowMultiple","value":"boolean","description":"Allows more than one option to be selected","isOptional":true},{"filePath":"polaris-react/src/components/Combobox/Combobox.tsx","syntaxKind":"PropertySignature","name":"children","value":"any","description":"The content to display inside the popover","isOptional":true},{"filePath":"polaris-react/src/components/Combobox/Combobox.tsx","syntaxKind":"PropertySignature","name":"preferredPosition","value":"PreferredPosition","description":"The preferred direction to open the popover","isOptional":true},{"filePath":"polaris-react/src/components/Combobox/Combobox.tsx","syntaxKind":"PropertySignature","name":"willLoadMoreOptions","value":"boolean","description":"Whether or not more options are available to lazy load when the bottom of the listbox reached. Use the hasMoreResults boolean provided by the GraphQL API of the paginated data.","isOptional":true},{"filePath":"polaris-react/src/components/Combobox/Combobox.tsx","syntaxKind":"PropertySignature","name":"height","value":"string","description":"Height to set on the Popover Pane.","isOptional":true},{"filePath":"polaris-react/src/components/Combobox/Combobox.tsx","syntaxKind":"MethodSignature","name":"onScrolledToBottom","value":"() => void","description":"Callback fired when the bottom of the lisbox is reached. Use to lazy load when listbox option data is paginated.","isOptional":true},{"filePath":"polaris-react/src/components/Combobox/Combobox.tsx","syntaxKind":"MethodSignature","name":"onClose","value":"() => void","description":"Callback fired when the popover closes","isOptional":true}],"value":"export interface ComboboxProps {\n  /** The text field component to activate the Popover */\n  activator: React.ReactElement<TextFieldProps>;\n  /** Allows more than one option to be selected */\n  allowMultiple?: boolean;\n  /** The content to display inside the popover */\n  children?: React.ReactElement<ListboxProps> | null;\n  /** The preferred direction to open the popover */\n  preferredPosition?: PopoverProps['preferredPosition'];\n  /** Whether or not more options are available to lazy load when the bottom of the listbox reached. Use the hasMoreResults boolean provided by the GraphQL API of the paginated data. */\n  willLoadMoreOptions?: boolean;\n  /** Height to set on the Popover Pane. */\n  height?: string;\n  /** Callback fired when the bottom of the lisbox is reached. Use to lazy load when listbox option data is paginated. */\n  onScrolledToBottom?(): void;\n  /** Callback fired when the popover closes */\n  onClose?(): void;\n}"},"TextFieldProps":{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"TypeAliasDeclaration","name":"TextFieldProps","value":"NonMutuallyExclusiveProps & MutuallyExclusiveInteractionProps & MutuallyExclusiveSelectionProps","description":""},"NonMutuallyExclusiveProps":{"filePath":"polaris-react/src/components/TextField/TextField.tsx","name":"NonMutuallyExclusiveProps","description":"","members":[{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"prefix","value":"React.ReactNode","description":"Text to display before value","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"suffix","value":"React.ReactNode","description":"Text to display after value","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"verticalContent","value":"React.ReactNode","description":"Content to vertically display above the input value","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"placeholder","value":"string","description":"Hint text to display","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"value","value":"string","description":"Initial value for the input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"helpText","value":"React.ReactNode","description":"Additional hint text to display","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"label","value":"React.ReactNode","description":"Label for the input"},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"labelAction","value":"Action","description":"Adds an action to the label","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"labelHidden","value":"boolean","description":"Visually hide the label","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"disabled","value":"boolean","description":"Disable the input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"clearButton","value":"boolean","description":"Show a clear text button in the input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"selectTextOnFocus","value":"boolean","description":"Indicates whether or not the entire value should be selected on focus.","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"suggestion","value":"string","description":"An inline autocomplete suggestion containing the input value. The characters that complete the input value are selected for ease of deletion on input change or keypress of Backspace/Delete. The selected substring is visually highlighted with subdued styling.","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"readOnly","value":"boolean","description":"Disable editing of the input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"autoFocus","value":"boolean","description":"Automatically focus the input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"focused","value":"boolean","description":"Force the focus state on the input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"multiline","value":"number | boolean","description":"Allow for multiple lines of input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"error","value":"any","description":"Error to display beneath the label","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"connectedRight","value":"React.ReactNode","description":"An element connected to the right of the input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"connectedLeft","value":"React.ReactNode","description":"An element connected to the left of the input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"type","value":"Type","description":"Determine type of input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"name","value":"string","description":"Name of the input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"id","value":"string","description":"ID for the input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"role","value":"string","description":"Defines a specific role attribute for the input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"step","value":"number","description":"Limit increment value for numeric and date-time inputs","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"largeStep","value":"number","description":"Increment value for numeric and date-time inputs when using Page Up or Page Down","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"autoComplete","value":"string","description":"Enable automatic completion by the browser. Set to \"off\" when you do not want the browser to fill in info"},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"max","value":"string | number","description":"Mimics the behavior of the native HTML attribute, limiting the maximum value","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"maxLength","value":"number","description":"Maximum character length for an input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"maxHeight","value":"string | number","description":"Maximum height of the input element. Only applies when `multiline` is `true`","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"min","value":"string | number","description":"Mimics the behavior of the native HTML attribute, limiting the minimum value","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"minLength","value":"number","description":"Minimum character length for an input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"pattern","value":"string","description":"A regular expression to check the value against","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"inputMode","value":"InputMode","description":"Choose the keyboard that should be used on mobile devices","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"spellCheck","value":"boolean","description":"Indicate whether value should have spelling checked","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"ariaOwns","value":"string","description":"Indicates the id of a component owned by the input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"ariaExpanded","value":"boolean","description":"Indicates whether or not a Popover is displayed","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"ariaControls","value":"string","description":"Indicates the id of a component controlled by the input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"ariaActiveDescendant","value":"string","description":"Indicates the id of a related component’s visually focused element to the input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"ariaAutocomplete","value":"string","description":"Indicates what kind of user input completion suggestions are provided","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"showCharacterCount","value":"boolean","description":"Indicates whether or not the character count should be displayed","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"align","value":"Alignment","description":"Determines the alignment of the text in the input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"requiredIndicator","value":"boolean","description":"Visual required indicator, adds an asterisk to label","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"monospaced","value":"boolean","description":"Indicates whether or not a monospaced font should be used","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"variant","value":"\"inherit\" | \"borderless\"","description":"Visual styling options for the TextField","isOptional":true,"defaultValue":"'inherit'"},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"MethodSignature","name":"onClearButtonClick","value":"(id: string) => void","description":"Callback fired when clear button is clicked","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"MethodSignature","name":"onChange","value":"(value: string, id: string) => void","description":"Callback fired when value is changed","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"MethodSignature","name":"onSpinnerChange","value":"(value: string, id: string) => void","description":"When provided, callback fired instead of onChange when value is changed via the number step control","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"onFocus","value":"(event?: React.FocusEvent) => void","description":"Callback fired when input is focused","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"MethodSignature","name":"onBlur","value":"(event?: React.FocusEvent) => void","description":"Callback fired when input is blurred","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"tone","value":"\"magic\"","description":"Indicates the tone of the text field","isOptional":true}],"value":"interface NonMutuallyExclusiveProps {\n  /** Text to display before value */\n  prefix?: React.ReactNode;\n  /** Text to display after value */\n  suffix?: React.ReactNode;\n  /** Content to vertically display above the input value */\n  verticalContent?: React.ReactNode;\n  /** Hint text to display */\n  placeholder?: string;\n  /** Initial value for the input */\n  value?: string;\n  /** Additional hint text to display */\n  helpText?: React.ReactNode;\n  /** Label for the input */\n  label: React.ReactNode;\n  /** Adds an action to the label */\n  labelAction?: LabelledProps['action'];\n  /** Visually hide the label */\n  labelHidden?: boolean;\n  /** Disable the input */\n  disabled?: boolean;\n  /** Show a clear text button in the input */\n  clearButton?: boolean;\n  /** Indicates whether or not the entire value should be selected on focus. */\n  selectTextOnFocus?: boolean;\n  /** An inline autocomplete suggestion containing the input value. The characters that complete the input value are selected for ease of deletion on input change or keypress of Backspace/Delete. The selected substring is visually highlighted with subdued styling. */\n  suggestion?: string;\n  /** Disable editing of the input */\n  readOnly?: boolean;\n  /** Automatically focus the input */\n  autoFocus?: boolean;\n  /** Force the focus state on the input */\n  focused?: boolean;\n  /** Allow for multiple lines of input */\n  multiline?: boolean | number;\n  /** Error to display beneath the label */\n  error?: Error | boolean;\n  /** An element connected to the right of the input */\n  connectedRight?: React.ReactNode;\n  /** An element connected to the left of the input */\n  connectedLeft?: React.ReactNode;\n  /** Determine type of input */\n  type?: Type;\n  /** Name of the input */\n  name?: string;\n  /** ID for the input */\n  id?: string;\n  /** Defines a specific role attribute for the input */\n  role?: string;\n  /** Limit increment value for numeric and date-time inputs */\n  step?: number;\n  /** Increment value for numeric and date-time inputs when using Page Up or Page Down */\n  largeStep?: number;\n  /** Enable automatic completion by the browser. Set to \"off\" when you do not want the browser to fill in info */\n  autoComplete: string;\n  /** Mimics the behavior of the native HTML attribute, limiting the maximum value */\n  max?: number | string;\n  /** Maximum character length for an input */\n  maxLength?: number;\n  /** Maximum height of the input element. Only applies when `multiline` is `true` */\n  maxHeight?: number | string;\n  /** Mimics the behavior of the native HTML attribute, limiting the minimum value */\n  min?: number | string;\n  /** Minimum character length for an input */\n  minLength?: number;\n  /** A regular expression to check the value against */\n  pattern?: string;\n  /** Choose the keyboard that should be used on mobile devices */\n  inputMode?: InputMode;\n  /** Indicate whether value should have spelling checked */\n  spellCheck?: boolean;\n  /** Indicates the id of a component owned by the input */\n  ariaOwns?: string;\n  /** Indicates whether or not a Popover is displayed */\n  ariaExpanded?: boolean;\n  /** Indicates the id of a component controlled by the input */\n  ariaControls?: string;\n  /** Indicates the id of a related component’s visually focused element to the input */\n  ariaActiveDescendant?: string;\n  /** Indicates what kind of user input completion suggestions are provided */\n  ariaAutocomplete?: string;\n  /** Indicates whether or not the character count should be displayed */\n  showCharacterCount?: boolean;\n  /** Determines the alignment of the text in the input */\n  align?: Alignment;\n  /** Visual required indicator, adds an asterisk to label */\n  requiredIndicator?: boolean;\n  /** Indicates whether or not a monospaced font should be used */\n  monospaced?: boolean;\n  /** Visual styling options for the TextField\n   * @default 'inherit'\n   */\n  variant?: 'inherit' | 'borderless';\n  /** Callback fired when clear button is clicked */\n  onClearButtonClick?(id: string): void;\n  /** Callback fired when value is changed */\n  onChange?(value: string, id: string): void;\n  /** When provided, callback fired instead of onChange when value is changed via the number step control  */\n  onSpinnerChange?(value: string, id: string): void;\n  /** Callback fired when input is focused */\n  onFocus?: (event?: React.FocusEvent) => void;\n  /** Callback fired when input is blurred */\n  onBlur?(event?: React.FocusEvent): void;\n  /** Indicates the tone of the text field */\n  tone?: 'magic';\n}"},"Action":{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Action","description":"","members":[{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"id","value":"string","description":"A unique identifier for the action","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"content","value":"string","description":"Content the action displays","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"accessibilityLabel","value":"string","description":"Visually hidden text for screen readers","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"url","value":"string","description":"A destination to link to, rendered in the action","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"external","value":"boolean","description":"Forces url to open in a new tab","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"target","value":"Target","description":"Where to display the url","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"MethodSignature","name":"onAction","value":"() => void","description":"Callback when an action takes place","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"MethodSignature","name":"onMouseEnter","value":"() => void","description":"Callback when mouse enter","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"MethodSignature","name":"onTouchStart","value":"() => void","description":"Callback when element is touched","isOptional":true}],"value":"export interface Action {\n  /** A unique identifier for the action */\n  id?: string;\n  /** Content the action displays */\n  content?: string;\n  /** Visually hidden text for screen readers */\n  accessibilityLabel?: string;\n  /** A destination to link to, rendered in the action */\n  url?: string;\n  /** Forces url to open in a new tab */\n  external?: boolean;\n  /** Where to display the url */\n  target?: Target;\n  /** Callback when an action takes place */\n  onAction?(): void;\n  /** Callback when mouse enter */\n  onMouseEnter?(): void;\n  /** Callback when element is touched */\n  onTouchStart?(): void;\n}"},"Target":{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"TypeAliasDeclaration","name":"Target","value":"'_blank' | '_self' | '_parent' | '_top'","description":""},"Type":{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"TypeAliasDeclaration","name":"Type","value":"'text' | 'email' | 'number' | 'integer' | 'password' | 'search' | 'tel' | 'url' | 'date' | 'datetime-local' | 'month' | 'time' | 'week' | 'currency'","description":""},"InputMode":{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"TypeAliasDeclaration","name":"InputMode","value":"'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'","description":""},"Alignment":{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"TypeAliasDeclaration","name":"Alignment","value":"'left' | 'center' | 'right'","description":""},"MutuallyExclusiveInteractionProps":{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"TypeAliasDeclaration","name":"MutuallyExclusiveInteractionProps","value":"Interactive | Readonly | Disabled","description":""},"Interactive":{"filePath":"polaris-react/src/components/TextField/TextField.tsx","name":"Interactive","description":"","members":[{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"MethodSignature","name":"onChange","value":"(value: string, id: string) => void","description":""}],"value":"interface Interactive {\n  onChange(value: string, id: string): void;\n}"},"Readonly":{"filePath":"polaris-react/src/components/TextField/TextField.tsx","name":"Readonly","description":"","members":[{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"readonly","value":"true","description":"","isOptional":true}],"value":"interface Readonly {\n  readonly?: true;\n}"},"Disabled":{"filePath":"polaris-react/src/components/TextField/TextField.tsx","name":"Disabled","description":"","members":[{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"disabled","value":"true","description":"","isOptional":true}],"value":"interface Disabled {\n  disabled?: true;\n}"},"MutuallyExclusiveSelectionProps":{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"TypeAliasDeclaration","name":"MutuallyExclusiveSelectionProps","value":"SelectSuggestion | SelectTextOnFocus","description":""},"SelectSuggestion":{"filePath":"polaris-react/src/components/TextField/TextField.tsx","name":"SelectSuggestion","description":"","members":[{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"suggestion","value":"string","description":"","isOptional":true}],"value":"interface SelectSuggestion {\n  suggestion?: string;\n}"},"SelectTextOnFocus":{"filePath":"polaris-react/src/components/TextField/TextField.tsx","name":"SelectTextOnFocus","description":"","members":[{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"selectTextOnFocus","value":"true","description":"","isOptional":true}],"value":"interface SelectTextOnFocus {\n  selectTextOnFocus?: true;\n}"},"PreferredPosition":{"filePath":"polaris-react/src/components/PositionedOverlay/utilities/math.ts","syntaxKind":"TypeAliasDeclaration","name":"PreferredPosition","value":"'above' | 'below' | 'mostSpace'","description":""}},"editPageLinkPath":"polaris.shopify.com/content/components/selection-and-input/combobox.mdx"},"__N_SSG":true}