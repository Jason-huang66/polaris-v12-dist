{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    hr: \"hr\",\n    h3: \"h3\",\n    h4: \"h4\",\n    a: \"a\"\n  }, _provideComponents(), props.components), {Lede, Examples, Props, DoDont} = _components;\n  if (!DoDont) _missingMdxReference(\"DoDont\", true);\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"A choice list lets you create a list of grouped radio buttons or checkboxes. Use this component if you need to group together a related list of interactive choices.\"\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Choice lists should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Include a title that tells merchants what to do or explains the available options\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Label options clearly based on what the option will do\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Avoid mutually exclusive options when allowing multiple selection\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"content-guidelines\",\n      children: \"Content guidelines\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"list-titles\",\n      children: \"List titles\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"List titles should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Help merchants understand how the items in the list are grouped together, or should explain what kind of choice merchants are making\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do\",\n        children: \"Do\"\n      }), _jsx(_components.p, {\n        children: \"Pick a shipping method\"\n      }), _jsx(_components.h4, {\n        id: \"dont\",\n        children: \"Don’t\"\n      }), _jsx(_components.p, {\n        children: \"Pick one\"\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"be-concise-and-scannable\",\n      children: \"Be concise and scannable\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Use simple, clear language that can be read at a glance\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Keep list titles to a single sentence\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"It the title introduces the list, it should end with a colon\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Should be written in sentence case\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-1\",\n        children: \"Do\"\n      }), _jsx(_components.p, {\n        children: \"Shipping options\"\n      }), _jsx(_components.h4, {\n        id: \"dont-1\",\n        children: \"Don’t\"\n      }), _jsx(_components.p, {\n        children: \"Shipping Options\"\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"not-use-colons\",\n      children: \"Not use colons\"\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-2\",\n        children: \"Do\"\n      }), _jsx(_components.p, {\n        children: \"If the customer abandons their checkout, send them an email reminder to complete their order:\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Option a\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Option b\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont-2\",\n        children: \"Don’t\"\n      }), _jsx(_components.p, {\n        children: \"If the customer abandons their checkout, send them an email reminder to complete their order\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Option a\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Option b\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"list-choices\",\n      children: \"List choices\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Every item in a choice list should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Start with a capital letter\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Not use commas or semicolons at the end of each line\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Be written in sentence case (the first word capitalized, the rest lowercase)\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-3\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Option 1\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Yellow\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Item three\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont-3\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"option 1\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Yellow;\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Item Three\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"helper-text-and-descriptions\",\n      children: \"Helper text and descriptions\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If your list contains helper text, only the description below the list item should contain punctuation.\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"related-components\",\n      children: \"Related components\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"To present a long list of radio buttons or when space is constrained, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/select\",\n          children: \"use the select component\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To build a group of radio buttons or checkboxes with a custom layout, use the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/radio-button\",\n          children: \"radio button component\"\n        }), \" or \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/checkbox\",\n          children: \"checkbox component\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To display a simple, non-interactive list of related content, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/lists/list\",\n          children: \"use the list component\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"accessibility\",\n      children: \"Accessibility\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The choice list component uses the accessibility features of the \", _jsx(_components.a, {\n        href: \"https://polaris.shopify.com/components/checkbox\",\n        children: \"checkbox\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"https://polaris.shopify.com/components/radio-button\",\n        children: \"radio button\"\n      }), \" components.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Choice list","category":"Selection and input","keywords":["ChoiceList","form","input","choices","select","group of radio buttons","radio button group","group of checkboxes","group of check boxes","list of choices","list of radio buttons","list of checkboxes","list of check boxes","multi-choice list","single-choice list"],"examples":[{"fileName":"choice-list-default.tsx","title":"Default","description":"Allows merchants to select one option from a list. Make sure all options are an either/or choice."},{"fileName":"choice-list-with-error.tsx","title":"With error","description":"Allows for accessible error handling by connecting the error message to the field with the error."},{"fileName":"choice-list-with-multi-choice.tsx","title":"With multi-choice","description":"Allows merchants to select multiple options from a list. Avoid options that are an either/or choice."},{"fileName":"choice-list-with-children-content.tsx","title":"With children content","description":"Use when you need merchants to view and/or interact with additional content under a choice. The content will always be rendered."},{"fileName":"choice-list-with-dynamic-children-content.tsx","title":"With dynamic children content","description":"Use when you need merchants to view and/or interact with additional content under a choice. The content is only rendered when the choice is selected. Works for both single-choice and multi-choice list."}],"previewImg":"/images/components/selection-and-input/choice-list.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"choice-list-default.tsx","title":"Default","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Allows merchants to select one option from a list. Make sure all options are an either/or choice.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {ChoiceList} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction SingleChoiceListExample() {\n  const [selected, setSelected] = useState<string[]>(['hidden']);\n\n  const handleChange = useCallback((value: string[]) => setSelected(value), []);\n\n  return (\n    <ChoiceList\n      title=\"Company name\"\n      choices={[\n        {label: 'Hidden', value: 'hidden'},\n        {label: 'Optional', value: 'optional'},\n        {label: 'Required', value: 'required'},\n      ]}\n      selected={selected}\n      onChange={handleChange}\n    />\n  );\n}\n\n"},{"fileName":"choice-list-with-error.tsx","title":"With error","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Allows for accessible error handling by connecting the error message to the field with the error.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {ChoiceList} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction ChoiceListWithErrorExample() {\n  const [selected, setSelected] = useState<string[]>(['hidden']);\n\n  const handleChange = useCallback((value: string[]) => setSelected(value), []);\n\n  return (\n    <ChoiceList\n      title=\"Company name\"\n      choices={[\n        {label: 'Hidden', value: 'hidden', describedByError: true},\n        {label: 'Optional', value: 'optional'},\n        {label: 'Required', value: 'required'},\n      ]}\n      selected={selected}\n      onChange={handleChange}\n      error=\"Company name cannot be hidden at this time\"\n    />\n  );\n}\n\n"},{"fileName":"choice-list-with-multi-choice.tsx","title":"With multi-choice","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Allows merchants to select multiple options from a list. Avoid options that are an either/or choice.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {ChoiceList} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction MultiChoiceListExample() {\n  const [selected, setSelected] = useState<string[]>(['hidden']);\n\n  const handleChange = useCallback((value: string[]) => setSelected(value), []);\n\n  return (\n    <ChoiceList\n      allowMultiple\n      title=\"While the customer is checking out\"\n      choices={[\n        {\n          label: 'Use the shipping address as the billing address by default',\n          value: 'shipping',\n          helpText:\n            'Reduces the number of fields required to check out. The billing address can still be edited.',\n        },\n        {\n          label: 'Require a confirmation step',\n          value: 'confirmation',\n          helpText:\n            'Customers must review their order details before purchasing.',\n        },\n      ]}\n      selected={selected}\n      onChange={handleChange}\n    />\n  );\n}\n\n"},{"fileName":"choice-list-with-children-content.tsx","title":"With children content","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when you need merchants to view and/or interact with additional content under a choice. The content will always be rendered.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {TextField, ChoiceList} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction SingleOrMultiChoiceListWithChildrenContextExample() {\n  const [selected, setSelected] = useState<string[]>(['none']);\n  const [textFieldValue, setTextFieldValue] = useState('');\n\n  const handleChoiceListChange = useCallback(\n    (value: string[]) => setSelected(value),\n    [],\n  );\n\n  const handleTextFieldChange = useCallback(\n    (value: string) => setTextFieldValue(value),\n    [],\n  );\n\n  const renderChildren = useCallback(\n    () => (\n      <TextField\n        label=\"Minimum Quantity\"\n        labelHidden\n        onChange={handleTextFieldChange}\n        value={textFieldValue}\n        autoComplete=\"off\"\n      />\n    ),\n    [handleTextFieldChange, textFieldValue],\n  );\n\n  return (\n    <ChoiceList\n      title=\"Discount minimum requirements\"\n      choices={[\n        {label: 'None', value: 'none'},\n        {label: 'Minimum purchase', value: 'minimum_purchase'},\n        {\n          label: 'Minimum quantity',\n          value: 'minimum_quantity',\n          renderChildren,\n        },\n      ]}\n      selected={selected}\n      onChange={handleChoiceListChange}\n    />\n  );\n}\n\n  SingleOrMultiChoiceListWithChildrenContextExample,\n);\n"},{"fileName":"choice-list-with-dynamic-children-content.tsx","title":"With dynamic children content","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when you need merchants to view and/or interact with additional content under a choice. The content is only rendered when the choice is selected. Works for both single-choice and multi-choice list.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {TextField, ChoiceList} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction SingleOrMultuChoiceListWithChildrenContextWhenSelectedExample() {\n  const [selected, setSelected] = useState<string[]>(['none']);\n  const [textFieldValue, setTextFieldValue] = useState('');\n\n  const handleChoiceListChange = useCallback(\n    (value: string[]) => setSelected(value),\n    [],\n  );\n\n  const handleTextFieldChange = useCallback(\n    (value: string) => setTextFieldValue(value),\n    [],\n  );\n\n  const renderChildren = useCallback(\n    (isSelected: boolean) =>\n      isSelected && (\n        <TextField\n          label=\"Minimum Quantity\"\n          labelHidden\n          onChange={handleTextFieldChange}\n          value={textFieldValue}\n          autoComplete=\"off\"\n        />\n      ),\n    [handleTextFieldChange, textFieldValue],\n  );\n\n  return (\n    <div style={{height: '150px'}}>\n      <ChoiceList\n        title=\"Discount minimum requirements\"\n        choices={[\n          {label: 'None', value: 'none'},\n          {label: 'Minimum purchase', value: 'minimum_purchase'},\n          {\n            label: 'Minimum quantity',\n            value: 'minimum_quantity',\n            renderChildren,\n          },\n        ]}\n        selected={selected}\n        onChange={handleChoiceListChange}\n      />\n    </div>\n  );\n}\n\n  SingleOrMultuChoiceListWithChildrenContextWhenSelectedExample,\n);\n"}],"seoDescription":"A choice list lets you create a list of grouped radio buttons or checkboxes. Use this component if you need to group together a related list of interactive choices.","type":{"ChoiceListProps":{"filePath":"polaris-react/src/components/ChoiceList/ChoiceList.tsx","name":"ChoiceListProps","description":"","members":[{"filePath":"polaris-react/src/components/ChoiceList/ChoiceList.tsx","syntaxKind":"PropertySignature","name":"title","value":"React.ReactNode","description":"Label for list of choices"},{"filePath":"polaris-react/src/components/ChoiceList/ChoiceList.tsx","syntaxKind":"PropertySignature","name":"choices","value":"Choice[]","description":"Collection of choices"},{"filePath":"polaris-react/src/components/ChoiceList/ChoiceList.tsx","syntaxKind":"PropertySignature","name":"selected","value":"string[]","description":"Collection of selected choices"},{"filePath":"polaris-react/src/components/ChoiceList/ChoiceList.tsx","syntaxKind":"PropertySignature","name":"name","value":"string","description":"Name for form input","isOptional":true},{"filePath":"polaris-react/src/components/ChoiceList/ChoiceList.tsx","syntaxKind":"PropertySignature","name":"allowMultiple","value":"boolean","description":"Allow merchants to select multiple options at once","isOptional":true},{"filePath":"polaris-react/src/components/ChoiceList/ChoiceList.tsx","syntaxKind":"PropertySignature","name":"titleHidden","value":"boolean","description":"Toggles display of the title","isOptional":true},{"filePath":"polaris-react/src/components/ChoiceList/ChoiceList.tsx","syntaxKind":"PropertySignature","name":"error","value":"any","description":"Display an error message","isOptional":true},{"filePath":"polaris-react/src/components/ChoiceList/ChoiceList.tsx","syntaxKind":"PropertySignature","name":"disabled","value":"boolean","description":"Disable all choices *","isOptional":true},{"filePath":"polaris-react/src/components/ChoiceList/ChoiceList.tsx","syntaxKind":"MethodSignature","name":"onChange","value":"(selected: string[], name: string) => void","description":"Callback when the selected choices change","isOptional":true},{"filePath":"polaris-react/src/components/ChoiceList/ChoiceList.tsx","syntaxKind":"PropertySignature","name":"tone","value":"\"magic\"","description":"Indicates the tone of the choice list","isOptional":true}],"value":"export interface ChoiceListProps {\n  /** Label for list of choices */\n  title: React.ReactNode;\n  /** Collection of choices */\n  choices: Choice[];\n  /** Collection of selected choices */\n  selected: string[];\n  /** Name for form input */\n  name?: string;\n  /** Allow merchants to select multiple options at once */\n  allowMultiple?: boolean;\n  /** Toggles display of the title */\n  titleHidden?: boolean;\n  /** Display an error message */\n  error?: Error;\n  /** Disable all choices **/\n  disabled?: boolean;\n  /** Callback when the selected choices change */\n  onChange?(selected: string[], name: string): void;\n  /** Indicates the tone of the choice list */\n  tone?: 'magic';\n}"},"Choice":{"filePath":"polaris-react/src/components/ChoiceList/ChoiceList.tsx","name":"Choice","description":"","members":[{"filePath":"polaris-react/src/components/ChoiceList/ChoiceList.tsx","syntaxKind":"PropertySignature","name":"value","value":"string","description":"Value of the choice"},{"filePath":"polaris-react/src/components/ChoiceList/ChoiceList.tsx","syntaxKind":"PropertySignature","name":"label","value":"React.ReactNode","description":"Label for the choice"},{"filePath":"polaris-react/src/components/ChoiceList/ChoiceList.tsx","syntaxKind":"PropertySignature","name":"id","value":"string","description":"A unique identifier for the choice","isOptional":true},{"filePath":"polaris-react/src/components/ChoiceList/ChoiceList.tsx","syntaxKind":"PropertySignature","name":"disabled","value":"boolean","description":"Disable choice","isOptional":true},{"filePath":"polaris-react/src/components/ChoiceList/ChoiceList.tsx","syntaxKind":"PropertySignature","name":"helpText","value":"React.ReactNode","description":"Additional text to aide in use","isOptional":true},{"filePath":"polaris-react/src/components/ChoiceList/ChoiceList.tsx","syntaxKind":"PropertySignature","name":"describedByError","value":"boolean","description":"Indicates that the choice is aria-describedBy the error message","isOptional":true},{"filePath":"polaris-react/src/components/ChoiceList/ChoiceList.tsx","syntaxKind":"MethodSignature","name":"renderChildren","value":"(isSelected: boolean) => any","description":"Method to render children with a choice","isOptional":true}],"value":"interface Choice {\n  /** Value of the choice */\n  value: string;\n  /** Label for the choice */\n  label: React.ReactNode;\n  /** A unique identifier for the choice */\n  id?: string;\n  /** Disable choice */\n  disabled?: boolean;\n  /** Additional text to aide in use */\n  helpText?: React.ReactNode;\n  /** Indicates that the choice is aria-describedBy the error message */\n  describedByError?: boolean;\n  /**  Method to render children with a choice */\n  renderChildren?(isSelected: boolean): React.ReactNode | false;\n}"}},"editPageLinkPath":"polaris.shopify.com/content/components/selection-and-input/choice-list.mdx"},"__N_SSG":true}