{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    code: \"code\",\n    hr: \"hr\",\n    pre: \"pre\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\"\n  }, _provideComponents(), props.components), {Lede, Examples, Props} = _components;\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"The drop zone component lets users upload files by dragging and dropping the files into an area on a page, or activating a button.\"\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"drop-zone\",\n      children: \"Drop zone\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Drop zones should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Inform merchants when the file(s) can’t be uploaded:\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"When possible, use validation errors on drag to detect and explain things like file size limits or file types accepted.\"\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"Use the \", _jsx(_components.a, {\n              href: \"https://polaris.shopify.com/components/feedback-indicators/banner\",\n              children: \"banner component\"\n            }), \" with a critical status to communicate errors that happen on the server.\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Provide feedback once the file(s) have been dropped and uploading begins.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"For convenience, allow files to be dropped anywhere on the page by enabling \", _jsx(_components.code, {\n          children: \"dropOnPage\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Provide a file upload button to allow merchants to select files for upload in a traditional way. Do this by using the \", _jsx(_components.code, {\n          children: \"DropZone.FileUpload\"\n        }), \" subcomponent.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"validation-errors\",\n      children: \"Validation errors\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The drop zone component validates file type by default. File types you wish to accept can be defined by editing the \", _jsx(_components.code, {\n        children: \"accept\"\n      }), \" property. This component also accepts custom validations using the \", _jsx(_components.code, {\n        children: \"customValidator\"\n      }), \" property. When validation fails, the component sets itself to error mode.\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"content-guidelines\",\n      children: \"Content guidelines\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"client-side-validation-error-messages\",\n      children: \"Client-side validation error messages\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Client-side validation errors give instant feedback.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Validation error messages should be:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Explicit: help merchants understand why their file can’t be uploaded and what they should change to successfully upload their file\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"In sentence case: capitalize only the first word in the message\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Concise: use simple, clear language that can be read at a glance. For example:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"File size must be less than 20MB\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"File type must be .gif, .jpg, .png or .svg\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"server-side-upload-error-messages\",\n      children: \"Server-side upload error messages\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Server-side upload errors give feedback after file submission.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Upload error messages should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Be displayed as a \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/feedback-indicators/banner\",\n          children: \"banner\"\n        }), \" with a critical status\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Show the name of the file(s) that were not uploaded successfully\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Describe why the file(s) couldn’t be uploaded and what merchants should change to upload their file successfully, as seen below\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"The following images couldn’t be uploaded:\\n\\n* “keep-it-real.png” is too large. Try a file size less than 20MB.\\n* “realer-than-real.zip” is not supported. File type must be .gif, .jpg, .png or .svg.\\n* “so-so-real.png” was interrupted due to weak network connection, [retry upload](#)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"drop-zone-file-upload\",\n      children: \"Drop zone file upload\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Use file upload with the drop zone component to let merchants select files for upload in a traditional way.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"file-upload-properties\",\n      children: \"File upload properties\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Prop\"\n          }), _jsx(_components.th, {\n            children: \"Type\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          }), _jsx(_components.th, {\n            children: \"Default\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"actionTitle\"\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"String that appears in file upload\"\n          }), _jsx(_components.td, {\n            children: \"'Add file'\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"actionHint\"\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"String that appears in file upload\"\n          }), _jsx(_components.td, {\n            children: \"'or drop files to upload'\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"related-components\",\n      children: \"Related components\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"To provide context to upload errors when they occur, use the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/feedback-indicators/banner\",\n          children: \"banner component\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To provide feedback during file upload, use the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/spinner\",\n          children: \"spinner component\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"accessibility\",\n      children: \"Accessibility\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The drop zone component builds on the native HTML \", _jsx(_components.code, {\n        children: \"<input type=\\\"upload\\\">\"\n      }), \" element. It includes a visual\", _jsx(_components.code, {\n        children: \"<button>\"\n      }), \" as well as a drag and drop area that can receive keyboard focus.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"keyboard-support\",\n      children: \"Keyboard support\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To upload a file with the keyboard, merchants can interact with the drag-and-drop region.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"To give the input keyboard focus, use the \", _jsx(\"kbd\", {\n          children: \"tab\"\n        }), \" key (or \", _jsx(\"kbd\", {\n          children: \"shift\"\n        }), \" + \", _jsx(\"kbd\", {\n          children: \"tab\"\n        }), \" when tabbing backwards)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To activate the input, use the \", _jsx(\"kbd\", {\n          children: \"enter\"\n        }), \"/\", _jsx(\"kbd\", {\n          children: \"return\"\n        }), \" or \", _jsx(\"kbd\", {\n          children: \"space\"\n        }), \" keys\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Drop zone","category":"Selection and input","keywords":["upload","image upload","file upload","drag","drop","area","drop area","file dialog","upload placeholder","drop placeholder"],"examples":[{"fileName":"drop-zone-default.tsx","title":"Default","description":"Use to allow merchants to upload files. They can drag and drop files into the dashed area, or upload traditionally by clicking the “Add file” button or anywhere inside the dashed area."},{"fileName":"drop-zone-with-a-label.tsx","title":"With a label","description":"Use to pair with a label for better accessibility."},{"fileName":"drop-zone-with-image-file-upload.tsx","title":"With image file upload","description":"Use for cases that accept image file formats."},{"fileName":"drop-zone-with-single-file-upload.tsx","title":"With single file upload","description":"Use to accept only one file."},{"fileName":"drop-zone-with-drop-on-page.tsx","title":"With drop on page","description":"Use to accept files for upload when dropped anywhere on the page."},{"fileName":"drop-zone-accepts-only-svg-files.tsx","title":"Accepts only SVG files","description":"Use to accept only SVG files."},{"fileName":"drop-zone-nested.tsx","title":"Nested","description":"Use to allow merchants to upload files in a wider area than the visible drop zone."},{"fileName":"drop-zone-medium-sized.tsx","title":"Medium-sized","description":"Use for cases with limited space. To improve usability, nest medium-sized drop zone in a larger drop zone with no outline. See the nested dropzone example."},{"fileName":"drop-zone-small-sized.tsx","title":"Small-sized","description":"Use for cases with tight space constraints, such as variant thumbnails on the Product details page. To improve usability, nest small-sized drop zone in a larger drop zone with no outline. See the nested dropzone example."},{"fileName":"drop-zone-with-custom-file-upload-text.tsx","title":"With custom FileUpload text","description":"Use for cases where you want the child contents of the dropzone to determine its height."},{"fileName":"drop-zone-with-custom-file-dialog-trigger.tsx","title":"With custom file dialog trigger","description":"Use to trigger the file dialog from an action somewhere else on the page."}],"previewImg":"/images/components/selection-and-input/drop-zone.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"drop-zone-default.tsx","title":"Default","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to allow merchants to upload files. They can drag and drop files into the dashed area, or upload traditionally by clicking the “Add file” button or anywhere inside the dashed area.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {DropZone, LegacyStack, Thumbnail, Text} from '@shopify/polaris';\nimport {NoteMinor} from '@shopify/polaris-icons';\nimport {useState, useCallback} from 'react';\n\nfunction DropZoneExample() {\n  const [files, setFiles] = useState<File[]>([]);\n\n  const handleDropZoneDrop = useCallback(\n    (_dropFiles: File[], acceptedFiles: File[], _rejectedFiles: File[]) =>\n      setFiles((files) => [...files, ...acceptedFiles]),\n    [],\n  );\n\n  const validImageTypes = ['image/gif', 'image/jpeg', 'image/png'];\n\n  const fileUpload = !files.length && <DropZone.FileUpload />;\n  const uploadedFiles = files.length > 0 && (\n    <div style={{padding: '0'}}>\n      <LegacyStack vertical>\n        {files.map((file, index) => (\n          <LegacyStack alignment=\"center\" key={index}>\n            <Thumbnail\n              size=\"small\"\n              alt={file.name}\n              source={\n                validImageTypes.includes(file.type)\n                  ? window.URL.createObjectURL(file)\n                  : NoteMinor\n              }\n            />\n            <div>\n              {file.name}{' '}\n              <Text variant=\"bodySm\" as=\"p\">\n                {file.size} bytes\n              </Text>\n            </div>\n          </LegacyStack>\n        ))}\n      </LegacyStack>\n    </div>\n  );\n\n  return (\n    <DropZone onDrop={handleDropZoneDrop}>\n      {uploadedFiles}\n      {fileUpload}\n    </DropZone>\n  );\n}\n\n"},{"fileName":"drop-zone-with-a-label.tsx","title":"With a label","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to pair with a label for better accessibility.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {DropZone} from '@shopify/polaris';\nimport React from 'react';\n\nfunction DropZoneExample() {\n  return (\n    <DropZone label=\"Theme files\">\n      <DropZone.FileUpload />\n    </DropZone>\n  );\n}\n\n"},{"fileName":"drop-zone-with-image-file-upload.tsx","title":"With image file upload","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use for cases that accept image file formats.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  DropZone,\n  LegacyStack,\n  Thumbnail,\n  Banner,\n  List,\n  Text,\n} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction DropZoneWithImageFileUpload() {\n  const [files, setFiles] = useState<File[]>([]);\n  const [rejectedFiles, setRejectedFiles] = useState<File[]>([]);\n  const hasError = rejectedFiles.length > 0;\n\n  const handleDrop = useCallback(\n    (_droppedFiles: File[], acceptedFiles: File[], rejectedFiles: File[]) => {\n      setFiles((files) => [...files, ...acceptedFiles]);\n      setRejectedFiles(rejectedFiles);\n    },\n    [],\n  );\n\n  const fileUpload = !files.length && <DropZone.FileUpload />;\n  const uploadedFiles = files.length > 0 && (\n    <LegacyStack vertical>\n      {files.map((file, index) => (\n        <LegacyStack alignment=\"center\" key={index}>\n          <Thumbnail\n            size=\"small\"\n            alt={file.name}\n            source={window.URL.createObjectURL(file)}\n          />\n          <div>\n            {file.name}{' '}\n            <Text variant=\"bodySm\" as=\"p\">\n              {file.size} bytes\n            </Text>\n          </div>\n        </LegacyStack>\n      ))}\n    </LegacyStack>\n  );\n\n  const errorMessage = hasError && (\n    <Banner title=\"The following images couldn’t be uploaded:\" tone=\"critical\">\n      <List type=\"bullet\">\n        {rejectedFiles.map((file, index) => (\n          <List.Item key={index}>\n            {`\"${file.name}\" is not supported. File type must be .gif, .jpg, .png or .svg.`}\n          </List.Item>\n        ))}\n      </List>\n    </Banner>\n  );\n\n  return (\n    <LegacyStack vertical>\n      {errorMessage}\n      <DropZone accept=\"image/*\" type=\"image\" onDrop={handleDrop}>\n        {uploadedFiles}\n        {fileUpload}\n      </DropZone>\n    </LegacyStack>\n  );\n}\n\n"},{"fileName":"drop-zone-with-single-file-upload.tsx","title":"With single file upload","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to accept only one file.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {DropZone, LegacyStack, Thumbnail, Text} from '@shopify/polaris';\nimport {NoteMinor} from '@shopify/polaris-icons';\nimport {useState, useCallback} from 'react';\n\nfunction DropZoneExample() {\n  const [file, setFile] = useState<File>();\n\n  const handleDropZoneDrop = useCallback(\n    (_dropFiles: File[], acceptedFiles: File[], _rejectedFiles: File[]) =>\n      setFile(acceptedFiles[0]),\n    [],\n  );\n\n  const validImageTypes = ['image/gif', 'image/jpeg', 'image/png'];\n\n  const fileUpload = !file && <DropZone.FileUpload />;\n  const uploadedFile = file && (\n    <LegacyStack>\n      <Thumbnail\n        size=\"small\"\n        alt={file.name}\n        source={\n          validImageTypes.includes(file.type)\n            ? window.URL.createObjectURL(file)\n            : NoteMinor\n        }\n      />\n      <div>\n        {file.name}{' '}\n        <Text variant=\"bodySm\" as=\"p\">\n          {file.size} bytes\n        </Text>\n      </div>\n    </LegacyStack>\n  );\n\n  return (\n    <DropZone allowMultiple={false} onDrop={handleDropZoneDrop}>\n      {uploadedFile}\n      {fileUpload}\n    </DropZone>\n  );\n}\n\n"},{"fileName":"drop-zone-with-drop-on-page.tsx","title":"With drop on page","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to accept files for upload when dropped anywhere on the page.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyStack, Thumbnail, DropZone, Page, Text} from '@shopify/polaris';\nimport {NoteMinor} from '@shopify/polaris-icons';\nimport {useState, useCallback} from 'react';\n\nfunction DropZoneWithDropOnPageExample() {\n  const [files, setFiles] = useState<File[]>([]);\n\n  const handleDropZoneDrop = useCallback(\n    (dropFiles: File[], _acceptedFiles: File[], _rejectedFiles: File[]) =>\n      setFiles((files) => [...files, ...dropFiles]),\n    [],\n  );\n\n  const validImageTypes = ['image/gif', 'image/jpeg', 'image/png'];\n\n  const uploadedFiles = files.length > 0 && (\n    <LegacyStack vertical>\n      {files.map((file, index) => (\n        <LegacyStack alignment=\"center\" key={index}>\n          <Thumbnail\n            size=\"small\"\n            alt={file.name}\n            source={\n              validImageTypes.includes(file.type)\n                ? window.URL.createObjectURL(file)\n                : NoteMinor\n            }\n          />\n          <div>\n            {file.name}{' '}\n            <Text variant=\"bodySm\" as=\"p\">\n              {file.size} bytes\n            </Text>\n          </div>\n        </LegacyStack>\n      ))}\n    </LegacyStack>\n  );\n\n  const uploadMessage = !uploadedFiles && <DropZone.FileUpload />;\n\n  return (\n    <Page\n      backAction={{content: 'Products', url: '/products'}}\n      title=\"Jar With Lock-Lid\"\n      primaryAction={{content: 'Save', disabled: true}}\n      secondaryActions={[\n        {content: 'Duplicate'},\n        {content: 'View on your store'},\n      ]}\n      pagination={{\n        hasPrevious: true,\n        hasNext: true,\n      }}\n    >\n      <DropZone dropOnPage onDrop={handleDropZoneDrop}>\n        {uploadedFiles}\n        {uploadMessage}\n      </DropZone>\n    </Page>\n  );\n}\n\n"},{"fileName":"drop-zone-accepts-only-svg-files.tsx","title":"Accepts only SVG files","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to accept only SVG files.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  LegacyStack,\n  Thumbnail,\n  Banner,\n  List,\n  DropZone,\n  Text,\n} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction DropZoneAcceptingSVGFilesExample() {\n  const [files, setFiles] = useState<File[]>([]);\n  const [rejectedFiles, setRejectedFiles] = useState<File[]>([]);\n  const hasError = rejectedFiles.length > 0;\n\n  const handleDropZoneDrop = useCallback(\n    (_dropFiles: File[], acceptedFiles: File[], rejectedFiles: File[]) => {\n      setFiles((files) => [...files, ...acceptedFiles]);\n      setRejectedFiles(rejectedFiles);\n    },\n    [],\n  );\n\n  const uploadedFiles = files.length > 0 && (\n    <LegacyStack vertical>\n      {files.map((file, index) => (\n        <LegacyStack alignment=\"center\" key={index}>\n          <Thumbnail\n            size=\"small\"\n            alt={file.name}\n            source={window.URL.createObjectURL(file)}\n          />\n          <div>\n            {file.name}{' '}\n            <Text variant=\"bodySm\" as=\"p\">\n              {file.size} bytes\n            </Text>\n          </div>\n        </LegacyStack>\n      ))}\n    </LegacyStack>\n  );\n\n  const errorMessage = hasError && (\n    <Banner title=\"The following images couldn’t be uploaded:\" tone=\"critical\">\n      <List type=\"bullet\">\n        {rejectedFiles.map((file, index) => (\n          <List.Item key={index}>\n            {`\"${file.name}\" is not supported. File type must be .svg.`}\n          </List.Item>\n        ))}\n      </List>\n    </Banner>\n  );\n\n  return (\n    <LegacyStack vertical>\n      {errorMessage}\n      <DropZone\n        accept=\"image/svg+xml\"\n        type=\"image\"\n        errorOverlayText=\"File type must be .svg\"\n        onDrop={handleDropZoneDrop}\n      >\n        {uploadedFiles}\n      </DropZone>\n    </LegacyStack>\n  );\n}\n\n"},{"fileName":"drop-zone-nested.tsx","title":"Nested","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to allow merchants to upload files in a wider area than the visible drop zone.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  DropZone,\n  LegacyStack,\n  Thumbnail,\n  LegacyCard,\n  Text,\n} from '@shopify/polaris';\nimport {NoteMinor} from '@shopify/polaris-icons';\nimport {useState, useCallback} from 'react';\n\nfunction NestedDropZoneExample() {\n  const [files, setFiles] = useState<File[]>([]);\n\n  const handleDrop = useCallback((dropFiles: File[]) => {\n    setFiles((files) => [...files, ...dropFiles]);\n  }, []);\n\n  const handleDropZoneClick = useCallback(() => {}, []);\n\n  const validImageTypes = ['image/gif', 'image/jpeg', 'image/png'];\n\n  const fileUpload = !files.length && <DropZone.FileUpload />;\n  const uploadedFiles = files.length > 0 && (\n    <LegacyStack vertical>\n      {files.map((file, index) => (\n        <LegacyStack alignment=\"center\" key={index}>\n          <Thumbnail\n            size=\"small\"\n            alt={file.name}\n            source={\n              validImageTypes.includes(file.type)\n                ? window.URL.createObjectURL(file)\n                : NoteMinor\n            }\n          />\n          <div>\n            {file.name}{' '}\n            <Text variant=\"bodySm\" as=\"p\">\n              {file.size} bytes\n            </Text>\n          </div>\n        </LegacyStack>\n      ))}\n    </LegacyStack>\n  );\n\n  return (\n    <DropZone outline={false} onDrop={handleDrop}>\n      <LegacyCard sectioned>\n        <DropZone onClick={handleDropZoneClick}>\n          {uploadedFiles}\n          {fileUpload}\n        </DropZone>\n      </LegacyCard>\n    </DropZone>\n  );\n}\n\n"},{"fileName":"drop-zone-medium-sized.tsx","title":"Medium-sized","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use for cases with limited space. To improve usability, nest medium-sized drop zone in a larger drop zone with no outline. See the nested dropzone example.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {DropZone} from '@shopify/polaris';\nimport React from 'react';\n\nfunction DropZoneExample() {\n  return (\n    <div style={{width: 114, height: 114}}>\n      <DropZone>\n        <DropZone.FileUpload />\n      </DropZone>\n    </div>\n  );\n}\n\n"},{"fileName":"drop-zone-small-sized.tsx","title":"Small-sized","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use for cases with tight space constraints, such as variant thumbnails on the Product details page. To improve usability, nest small-sized drop zone in a larger drop zone with no outline. See the nested dropzone example.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {DropZone} from '@shopify/polaris';\nimport React from 'react';\n\nfunction DropZoneExample() {\n  return (\n    <div style={{width: 50, height: 50}}>\n      <DropZone>\n        <DropZone.FileUpload />\n      </DropZone>\n    </div>\n  );\n}\n\n"},{"fileName":"drop-zone-with-custom-file-upload-text.tsx","title":"With custom FileUpload text","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use for cases where you want the child contents of the dropzone to determine its height.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {DropZone, LegacyStack, Thumbnail, Text} from '@shopify/polaris';\nimport {NoteMinor} from '@shopify/polaris-icons';\nimport {useState, useCallback} from 'react';\n\nfunction DropZoneExample() {\n  const [files, setFiles] = useState<File[]>([]);\n\n  const handleDropZoneDrop = useCallback(\n    (_dropFiles: File[], acceptedFiles: File[], _rejectedFiles: File[]) =>\n      setFiles((files) => [...files, ...acceptedFiles]),\n    [],\n  );\n\n  const validImageTypes = ['image/gif', 'image/jpeg', 'image/png'];\n\n  const fileUpload = !files.length && (\n    <DropZone.FileUpload actionHint=\"Accepts .gif, .jpg, and .png\" />\n  );\n\n  const uploadedFiles = files.length > 0 && (\n    <LegacyStack vertical>\n      {files.map((file, index) => (\n        <LegacyStack alignment=\"center\" key={index}>\n          <Thumbnail\n            size=\"small\"\n            alt={file.name}\n            source={\n              validImageTypes.includes(file.type)\n                ? window.URL.createObjectURL(file)\n                : NoteMinor\n            }\n          />\n          <div>\n            {file.name}{' '}\n            <Text variant=\"bodySm\" as=\"p\">\n              {file.size} bytes\n            </Text>\n          </div>\n        </LegacyStack>\n      ))}\n    </LegacyStack>\n  );\n\n  return (\n    <DropZone onDrop={handleDropZoneDrop} variableHeight>\n      {uploadedFiles}\n      {fileUpload}\n    </DropZone>\n  );\n}\n\n"},{"fileName":"drop-zone-with-custom-file-dialog-trigger.tsx","title":"With custom file dialog trigger","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to trigger the file dialog from an action somewhere else on the page.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  LegacyStack,\n  Thumbnail,\n  LegacyCard,\n  DropZone,\n  Text,\n} from '@shopify/polaris';\nimport {NoteMinor} from '@shopify/polaris-icons';\nimport {useState, useCallback} from 'react';\n\nfunction DropZoneWithCustomFileDialogExample() {\n  const [files, setFiles] = useState<File[]>([]);\n  const [openFileDialog, setOpenFileDialog] = useState(false);\n\n  const handleDropZoneDrop = useCallback(\n    (dropFiles: File[], _acceptedFiles: File[], _rejectedFiles: File[]) =>\n      setFiles((files) => [...files, ...dropFiles]),\n    [],\n  );\n  const toggleOpenFileDialog = useCallback(\n    () => setOpenFileDialog((openFileDialog) => !openFileDialog),\n    [],\n  );\n\n  const validImageTypes = ['image/gif', 'image/jpeg', 'image/png'];\n\n  const uploadedFiles = files.length > 0 && (\n    <LegacyStack vertical>\n      {files.map((file, index) => (\n        <LegacyStack alignment=\"center\" key={index}>\n          <Thumbnail\n            size=\"small\"\n            alt={file.name}\n            source={\n              validImageTypes.indexOf(file.type) > -1\n                ? window.URL.createObjectURL(file)\n                : NoteMinor\n            }\n          />\n          <div>\n            {file.name}{' '}\n            <Text variant=\"bodySm\" as=\"p\">\n              {file.size} bytes\n            </Text>\n          </div>\n        </LegacyStack>\n      ))}\n    </LegacyStack>\n  );\n\n  return (\n    <LegacyCard\n      sectioned\n      title=\"Product Images\"\n      actions={[\n        {\n          content: 'Upload Image',\n          onAction: toggleOpenFileDialog,\n        },\n      ]}\n    >\n      <DropZone\n        openFileDialog={openFileDialog}\n        onDrop={handleDropZoneDrop}\n        onFileDialogClose={toggleOpenFileDialog}\n      >\n        {uploadedFiles}\n      </DropZone>\n    </LegacyCard>\n  );\n}\n\n"}],"seoDescription":"The drop zone component lets users upload files by dragging and dropping the files into an area on a page, or activating a button.","type":{"DropZoneProps":{"filePath":"polaris-react/src/components/DropZone/DropZone.tsx","name":"DropZoneProps","description":"","members":[{"filePath":"polaris-react/src/components/DropZone/DropZone.tsx","syntaxKind":"PropertySignature","name":"label","value":"React.ReactNode","description":"Label for the file input","isOptional":true},{"filePath":"polaris-react/src/components/DropZone/DropZone.tsx","syntaxKind":"PropertySignature","name":"labelAction","value":"Action","description":"Adds an action to the label","isOptional":true},{"filePath":"polaris-react/src/components/DropZone/DropZone.tsx","syntaxKind":"PropertySignature","name":"labelHidden","value":"boolean","description":"Visually hide the label","isOptional":true},{"filePath":"polaris-react/src/components/DropZone/DropZone.tsx","syntaxKind":"PropertySignature","name":"id","value":"string","description":"ID for file input","isOptional":true},{"filePath":"polaris-react/src/components/DropZone/DropZone.tsx","syntaxKind":"PropertySignature","name":"accept","value":"string","description":"Allowed file types","isOptional":true},{"filePath":"polaris-react/src/components/DropZone/DropZone.tsx","syntaxKind":"PropertySignature","name":"type","value":"DropZoneFileType","description":"Whether is a file or an image","isOptional":true,"defaultValue":"'file'"},{"filePath":"polaris-react/src/components/DropZone/DropZone.tsx","syntaxKind":"PropertySignature","name":"active","value":"boolean","description":"Sets an active state","isOptional":true},{"filePath":"polaris-react/src/components/DropZone/DropZone.tsx","syntaxKind":"PropertySignature","name":"error","value":"boolean","description":"Sets an error state","isOptional":true},{"filePath":"polaris-react/src/components/DropZone/DropZone.tsx","syntaxKind":"PropertySignature","name":"outline","value":"boolean","description":"Displays an outline border","isOptional":true,"defaultValue":"true"},{"filePath":"polaris-react/src/components/DropZone/DropZone.tsx","syntaxKind":"PropertySignature","name":"overlay","value":"boolean","description":"Displays an overlay on hover","isOptional":true,"defaultValue":"true"},{"filePath":"polaris-react/src/components/DropZone/DropZone.tsx","syntaxKind":"PropertySignature","name":"overlayText","value":"string","description":"Text that appears in the overlay","isOptional":true},{"filePath":"polaris-react/src/components/DropZone/DropZone.tsx","syntaxKind":"PropertySignature","name":"errorOverlayText","value":"string","description":"Text that appears in the overlay when set in error state","isOptional":true},{"filePath":"polaris-react/src/components/DropZone/DropZone.tsx","syntaxKind":"PropertySignature","name":"allowMultiple","value":"boolean","description":"Allows multiple files to be uploaded at once","isOptional":true,"defaultValue":"true"},{"filePath":"polaris-react/src/components/DropZone/DropZone.tsx","syntaxKind":"PropertySignature","name":"disabled","value":"boolean","description":"Sets a disabled state","isOptional":true},{"filePath":"polaris-react/src/components/DropZone/DropZone.tsx","syntaxKind":"PropertySignature","name":"children","value":"any","description":"The child elements to render in the dropzone.","isOptional":true},{"filePath":"polaris-react/src/components/DropZone/DropZone.tsx","syntaxKind":"PropertySignature","name":"dropOnPage","value":"boolean","description":"Allows a file to be dropped anywhere on the page","isOptional":true},{"filePath":"polaris-react/src/components/DropZone/DropZone.tsx","syntaxKind":"PropertySignature","name":"openFileDialog","value":"boolean","description":"Sets the default file dialog state","isOptional":true},{"filePath":"polaris-react/src/components/DropZone/DropZone.tsx","syntaxKind":"PropertySignature","name":"variableHeight","value":"boolean","description":"Allows child content to adjust height","isOptional":true},{"filePath":"polaris-react/src/components/DropZone/DropZone.tsx","syntaxKind":"MethodSignature","name":"customValidator","value":"(file: File) => boolean","description":"Adds custom validations","isOptional":true},{"filePath":"polaris-react/src/components/DropZone/DropZone.tsx","syntaxKind":"MethodSignature","name":"onClick","value":"(event: React.MouseEvent<HTMLElement>) => void","description":"Callback triggered on click","isOptional":true},{"filePath":"polaris-react/src/components/DropZone/DropZone.tsx","syntaxKind":"MethodSignature","name":"onDrop","value":"(files: File[], acceptedFiles: File[], rejectedFiles: File[]) => void","description":"Callback triggered on any file drop","isOptional":true},{"filePath":"polaris-react/src/components/DropZone/DropZone.tsx","syntaxKind":"MethodSignature","name":"onDropAccepted","value":"(acceptedFiles: File[]) => void","description":"Callback triggered when at least one of the files dropped was accepted","isOptional":true},{"filePath":"polaris-react/src/components/DropZone/DropZone.tsx","syntaxKind":"MethodSignature","name":"onDropRejected","value":"(rejectedFiles: File[]) => void","description":"Callback triggered when at least one of the files dropped was rejected","isOptional":true},{"filePath":"polaris-react/src/components/DropZone/DropZone.tsx","syntaxKind":"MethodSignature","name":"onDragOver","value":"() => void","description":"Callback triggered when one or more files are dragging over the drag area","isOptional":true},{"filePath":"polaris-react/src/components/DropZone/DropZone.tsx","syntaxKind":"MethodSignature","name":"onDragEnter","value":"() => void","description":"Callback triggered when one or more files entered the drag area","isOptional":true},{"filePath":"polaris-react/src/components/DropZone/DropZone.tsx","syntaxKind":"MethodSignature","name":"onDragLeave","value":"() => void","description":"Callback triggered when one or more files left the drag area","isOptional":true},{"filePath":"polaris-react/src/components/DropZone/DropZone.tsx","syntaxKind":"MethodSignature","name":"onFileDialogClose","value":"() => void","description":"Callback triggered when the file dialog is canceled","isOptional":true}],"value":"export interface DropZoneProps {\n  /** Label for the file input */\n  label?: React.ReactNode;\n  /** Adds an action to the label */\n  labelAction?: LabelledProps['action'];\n  /** Visually hide the label */\n  labelHidden?: boolean;\n  /** ID for file input */\n  id?: string;\n  /** Allowed file types */\n  accept?: string;\n  /**\n   * Whether is a file or an image\n   * @default 'file'\n   */\n  type?: DropZoneFileType;\n  /** Sets an active state */\n  active?: boolean;\n  /** Sets an error state */\n  error?: boolean;\n  /**\n   * Displays an outline border\n   * @default true\n   */\n  outline?: boolean;\n  /**\n   * Displays an overlay on hover\n   * @default true\n   */\n  overlay?: boolean;\n  /** Text that appears in the overlay */\n  overlayText?: string;\n  /** Text that appears in the overlay when set in error state */\n  errorOverlayText?: string;\n  /**\n   * Allows multiple files to be uploaded at once\n   * @default true\n   */\n  allowMultiple?: boolean;\n  /** Sets a disabled state */\n  disabled?: boolean;\n  /** The child elements to render in the dropzone. */\n  children?: string | React.ReactNode;\n  /** Allows a file to be dropped anywhere on the page */\n  dropOnPage?: boolean;\n  /** Sets the default file dialog state */\n  openFileDialog?: boolean;\n  /** Allows child content to adjust height */\n  variableHeight?: boolean;\n  /** Adds custom validations */\n  customValidator?(file: File): boolean;\n  /** Callback triggered on click */\n  onClick?(event: React.MouseEvent<HTMLElement>): void;\n  /** Callback triggered on any file drop */\n  onDrop?(files: File[], acceptedFiles: File[], rejectedFiles: File[]): void;\n  /** Callback triggered when at least one of the files dropped was accepted */\n  onDropAccepted?(acceptedFiles: File[]): void;\n  /** Callback triggered when at least one of the files dropped was rejected */\n  onDropRejected?(rejectedFiles: File[]): void;\n  /** Callback triggered when one or more files are dragging over the drag area */\n  onDragOver?(): void;\n  /** Callback triggered when one or more files entered the drag area */\n  onDragEnter?(): void;\n  /** Callback triggered when one or more files left the drag area */\n  onDragLeave?(): void;\n  /** Callback triggered when the file dialog is canceled */\n  onFileDialogClose?(): void;\n}"},"Action":{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Action","description":"","members":[{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"id","value":"string","description":"A unique identifier for the action","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"content","value":"string","description":"Content the action displays","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"accessibilityLabel","value":"string","description":"Visually hidden text for screen readers","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"url","value":"string","description":"A destination to link to, rendered in the action","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"external","value":"boolean","description":"Forces url to open in a new tab","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"target","value":"Target","description":"Where to display the url","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"MethodSignature","name":"onAction","value":"() => void","description":"Callback when an action takes place","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"MethodSignature","name":"onMouseEnter","value":"() => void","description":"Callback when mouse enter","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"MethodSignature","name":"onTouchStart","value":"() => void","description":"Callback when element is touched","isOptional":true}],"value":"export interface Action {\n  /** A unique identifier for the action */\n  id?: string;\n  /** Content the action displays */\n  content?: string;\n  /** Visually hidden text for screen readers */\n  accessibilityLabel?: string;\n  /** A destination to link to, rendered in the action */\n  url?: string;\n  /** Forces url to open in a new tab */\n  external?: boolean;\n  /** Where to display the url */\n  target?: Target;\n  /** Callback when an action takes place */\n  onAction?(): void;\n  /** Callback when mouse enter */\n  onMouseEnter?(): void;\n  /** Callback when element is touched */\n  onTouchStart?(): void;\n}"},"Target":{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"TypeAliasDeclaration","name":"Target","value":"'_blank' | '_self' | '_parent' | '_top'","description":""},"DropZoneFileType":{"filePath":"polaris-react/src/components/DropZone/DropZone.tsx","syntaxKind":"TypeAliasDeclaration","name":"DropZoneFileType","value":"'file' | 'image' | 'video'","description":""}},"editPageLinkPath":"polaris.shopify.com/content/components/selection-and-input/drop-zone.mdx"},"__N_SSG":true}