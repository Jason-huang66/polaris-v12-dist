{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    hr: \"hr\",\n    h2: \"h2\",\n    em: \"em\",\n    h3: \"h3\",\n    h4: \"h4\",\n    code: \"code\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\"\n  }, _provideComponents(), props.components), {Lede, Examples, Props, DoDont} = _components;\n  if (!DoDont) _missingMdxReference(\"DoDont\", true);\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"An index table displays a collection of objects of the same type, like orders or products. The main job of an index table is to help merchants get an at-a-glance of the objects to perform actions or navigate to a full-page representation of it.\"\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Index tables can also:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Support \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/resource-item\",\n          children: \"customized index rows and columns\"\n        })]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Include bulk actions so merchants can act on multiple objects at once\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Support sorting and \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/filters\",\n          children: \"filtering\"\n        }), \" of long lists\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Be paired with pagination to make long lists digestible\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"build\",\n      children: \"Build\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Using an index table in a project involves combining the following components and subcomponents:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"IndexTable\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#index-table-row\",\n          children: \"IndexTable.Row\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#index-table-cell\",\n          children: \"IndexTable.Cell\"\n        })\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/components/selection-and-input/filters\",\n          children: \"Filters\"\n        }), \" (optional)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/components/selection-and-input/index-filters\",\n          children: \"IndexFilters\"\n        }), \" (optional)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/components/navigation/pagination\",\n          children: \"Pagination\"\n        }), \" (optional)\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The index table component provides the UI elements for list selection, sorting, filtering, and pagination, but doesn’t provide the logic for these operations. When a sort option is changed, filter added, or second page requested, you’ll need to handle that event (including any network requests) and then update the component with new props.\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"purpose\",\n      children: \"Purpose\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Shopify is organized around objects that represent merchants' businesses, like customers, products, and orders. Each individual order, for example, is given a dedicated page that can be linked to. In Shopify, we call these types of objects \", _jsx(_components.em, {\n        children: \"resources\"\n      }), \", and we call the object’s dedicated page its \", _jsx(_components.em, {\n        children: \"details page\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"problem\",\n      children: \"Problem\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Take orders as an example. Merchants may have a lot of them. They need a way to scan their orders, view the different attributes on each order, and find out which ones need action first. In other words, they need a way find an individual order, call up more information about it, and take action on it.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"solution\",\n      children: \"Solution\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Index tables function as:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"A content format, presenting a set of individual resources with multiple columns of information for each\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"A system for taking action on one or more individual resources\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"A way to navigate to an individual resource’s details page\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Because a details page displays all the content and actions for an individual resource, you can think of a resource list as a summary of these details pages. In this way resource lists bridge a middle level in Shopify’s navigation hierarchy.\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Index tables should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Have items that perform an action when clicked. The action should navigate to the resource’s details page or otherwise provide more detail about the item.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/resource-item\",\n          children: \"Customize the content and layout\"\n        }), \" of their items rows to surface information to support merchants’ needs.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Support sorting if the list can be long, and especially if different merchant tasks benefit from different sort orders.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Support \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/filters\",\n          children: \"filtering\"\n        }), \" if the list can be long.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Paginate when the current list contains more than 50 items.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Use the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/skeleton-page\",\n          children: \"skeleton page\"\n        }), \" component on initial page load for the rest of the page if the loading prop is true and items are processing.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Numeric cells and titles should be right aligned with the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/text\",\n          children: \"Text\"\n        }), \" component\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Numeric cells should use the numeric style with the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/text\",\n          children: \"Text\"\n        }), \" component\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Index tables can optionally:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Provide bulk actions for tasks that are often applied to many list items at once. For example, merchants may want to add the same tag to a large number of products.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"content-guidelines\",\n      children: \"Content guidelines\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Index tables should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Identify the type of resource, usually with a heading\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Products\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Showing 50 products\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.em, {\n            children: \"No heading\"\n          })\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Indicate when not all members of a resource are being shown. For a card summarizing and linking to recently purchased products:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-1\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Popular products this week\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont-1\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Products\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Follow the verb + noun formula for bulk actions\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Follow the \", _jsx(_components.a, {\n            href: \"https://polaris.shopify.com/components/filters#content-guidelines\",\n            children: \"content guidelines for filter options and applied filters\"\n          })]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"indextablerow\",\n      children: \"IndexTable.Row\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"An \", _jsx(_components.code, {\n        children: \"IndexTable.Row\"\n      }), \" is used to render a row representing an item within an \", _jsx(_components.code, {\n        children: \"IndexTable\"\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"indextablerow-properties\",\n      children: \"IndexTable.Row properties\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Prop\"\n          }), _jsx(_components.th, {\n            children: \"Type\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"children\"\n          }), _jsx(_components.td, {\n            children: \"ReactNode\"\n          }), _jsx(_components.td, {\n            children: \"Table header or data cells\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"id\"\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"A unique identifier for the row\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"selected?\"\n          }), _jsx(_components.td, {\n            children: \"boolean | \\\"indeterminate\\\"\"\n          }), _jsx(_components.td, {\n            children: \"A boolean property indicating whether the row or it's related rows are selected\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"position\"\n          }), _jsx(_components.td, {\n            children: \"number\"\n          }), _jsxs(_components.td, {\n            children: [\"The zero-indexed position of the row. Used for Shift key multi-selection as well as selection of a range of rows when a \", _jsx(_components.code, {\n              children: \"selectionRange\"\n            }), \" is set.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"tone?\"\n          }), _jsx(_components.td, {\n            children: \"\\\"subdued\\\" | \\\"success\\\" | \\\"warning\\\" | \\\"critical\\\"\"\n          }), _jsx(_components.td, {\n            children: \"Whether the row should visually indicate its status with a background color\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"disabled?\"\n          }), _jsx(_components.td, {\n            children: \"boolean\"\n          }), _jsx(_components.td, {\n            children: \"Whether the row should be disabled\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"selectionRange?\"\n          }), _jsx(_components.td, {\n            children: \"[number, number]\"\n          }), _jsx(_components.td, {\n            children: \"A tuple array with the first and last index of the range of other rows that the row describes. All non-disabled rows in the range are selected when the row with a selection range set is selected.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"rowType?\"\n          }), _jsx(_components.td, {\n            children: \"\\\"data\\\" | \\\"subheader\\\"\"\n          }), _jsxs(_components.td, {\n            children: [\"Indicates the relationship or role of the row's contents. A \", _jsx(_components.code, {\n              children: \"rowType\"\n            }), \" of \\\"subheader\\\" looks and behaves the same as the table header. Defaults to \\\"data\\\".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"accessibilityLabel?\"\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"Label set on the row's checkbox. Defaults to \\\"Select {resourceName}\\\"\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"onClick?\"\n          }), _jsx(_components.td, {\n            children: \"() => void\"\n          }), _jsx(_components.td, {\n            children: \"Callback fired when the row is clicked. Overrides the default click behaviour.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"onNavigation?\"\n          }), _jsx(_components.td, {\n            children: \"(id: string) => void\"\n          }), _jsxs(_components.td, {\n            children: [\"Callback fired when the row is clicked and contains an anchor element with the \", _jsx(_components.code, {\n              children: \"data-primary-link\"\n            }), \" property set\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"indextablecell\",\n      children: \"IndexTable.Cell\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"An \", _jsx(_components.code, {\n        children: \"IndexTable.Cell\"\n      }), \" is used to render a single cell within an \", _jsx(_components.code, {\n        children: \"IndexTable.Row\"\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"indextablecell-properties\",\n      children: \"IndexTable.Cell properties\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Prop\"\n          }), _jsx(_components.th, {\n            children: \"Type\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"as?\"\n          }), _jsx(_components.td, {\n            children: \"'th' | 'td'\"\n          }), _jsxs(_components.td, {\n            children: [\"The table cell element to render. Render the cell as a \", _jsx(_components.code, {\n              children: \"th\"\n            }), \" if it serves as a subheading. Defaults to \", _jsx(_components.code, {\n              children: \"td\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"id?\"\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"The unique ID to set on the cell element\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"children?\"\n          }), _jsx(_components.td, {\n            children: \"ReactNode\"\n          }), _jsx(_components.td, {\n            children: \"The cell contents\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"className?\"\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"Adds a class to the cell. Use to set a custom cell width.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"flush?\"\n          }), _jsx(_components.td, {\n            children: \"boolean\"\n          }), _jsx(_components.td, {\n            children: \"Whether the cell padding should be removed. Defaults to false.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"colSpan?\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.a, {\n              href: \"https://www.w3schools.com/tags/att_colspan.asp\",\n              children: \"HTMLTableCellElement['colSpan']\"\n            })\n          }), _jsx(_components.td, {\n            children: \"For subheader cells -- The number of the columns that the cell element should extend to within the row.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"scope?\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.a, {\n              href: \"https://www.w3schools.com/tags/att_scope.asp\",\n              children: \"HTMLTableCellElement['scope']\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"For subheader cells -- Indicates the cells that the \", _jsx(_components.code, {\n              children: \"th\"\n            }), \" element relates to\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"headers?\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.a, {\n              href: \"https://www.w3schools.com/tags/att_headers.asp\",\n              children: \"HTMLTableCellElement['headers']\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"A space-separated list of the \", _jsx(_components.code, {\n              children: \"th\"\n            }), \" cell IDs that describe or apply to it. Use for cells within a row that relate to a subheader cell in addition to their column header.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"related-components\",\n      children: \"Related components\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"To create an actionable list of related items that link to details pages, such as a list of customers, use the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/lists/resource-list\",\n          children: \"resource list component\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To present structured data for comparison and analysis, like when helping merchants to gain insights or review analytics, use the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/tables/data-table\",\n          children: \"data table component\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To display a simple list of related content, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/lists/list\",\n          children: \"use the list component\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"accessibility\",\n      children: \"Accessibility\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"structure\",\n      children: \"Structure\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"IndexTable\"\n      }), \" is an actionable, filterable, and sortable table widget that supports row selection with \", _jsx(_components.a, {\n        href: \"https://www.w3.org/WAI/tutorials/tables/multi-level/\",\n        children: \"subheaders\"\n      }), \". To ensure that the power of this table is accessible to all merchants when implementing \", _jsx(_components.code, {\n        children: \"IndexTable.Row\"\n      }), \" subheaders, set the following props on \", _jsx(_components.code, {\n        children: \"IndexTable.Cell\"\n      }), \" that are appropriate for the enhancement you are implementing.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Merchants can select a group of rows at once by clicking or \", _jsx(\"kbd\", {\n        children: \"Space\"\n      }), \" keypressing a subheader row's checkbox. To indicate that an \", _jsx(_components.code, {\n        children: \"IndexTable.Row\"\n      }), \" serves as a subheader for 1 or more rows below it, set the:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Zero-indexed table \", _jsx(_components.code, {\n          children: \"position\"\n        }), \" of the first and last \", _jsx(_components.code, {\n          children: \"IndexTable.Row\"\n        }), \" described by the subheader \", _jsx(_components.code, {\n          children: \"IndexTable.Row\"\n        }), \" as a tuple array on its \", _jsx(_components.code, {\n          children: \"selectionRange\"\n        }), \" prop\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Unique \", _jsx(_components.code, {\n          children: \"id\"\n        }), \" on the \", _jsx(_components.code, {\n          children: \"IndexTable.Cell\"\n        }), \" that contains the subheader content\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Element tag to \", _jsx(_components.code, {\n          children: \"\\\"th\\\"\"\n        }), \" on the \", _jsx(_components.code, {\n          children: \"as\"\n        }), \" prop of the subheader \", _jsx(_components.code, {\n          children: \"IndexTable.Cell\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Subheader \", _jsx(_components.code, {\n          children: \"IndexTable.Cell\"\n        }), \" \", _jsx(_components.code, {\n          children: \"scope\"\n        }), \" prop to \", _jsx(_components.code, {\n          children: \"\\\"colgroup\\\"\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To associate the subheader \", _jsx(_components.code, {\n        children: \"IndexTable.Row\"\n      }), \" with each \", _jsx(_components.code, {\n        children: \"IndexTable.Cell\"\n      }), \" that it describes, set the:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Unique \", _jsx(_components.code, {\n          children: \"id\"\n        }), \" provided to the subheader \", _jsx(_components.code, {\n          children: \"IndexTable.Cell\"\n        }), \" on the \", _jsx(_components.code, {\n          children: \"headers\"\n        }), \" prop of each related \", _jsx(_components.code, {\n          children: \"IndexTable.Cell\"\n        }), \" (contained by an \", _jsx(_components.code, {\n          children: \"IndexTable.Row\"\n        }), \" that's position is within the \", _jsx(_components.code, {\n          children: \"selectionRange\"\n        }), \") as well as the unique \", _jsx(_components.code, {\n          children: \"id\"\n        }), \" of its corresponding column heading that you provided to the \", _jsx(_components.code, {\n          children: \"IndexTable\"\n        }), \" \", _jsx(_components.code, {\n          children: \"headings\"\n        }), \" prop\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"keyboard-support\",\n      children: \"Keyboard support\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"IndexTable\"\n      }), \" also supports multi-selection of a range of rows by keypressing the \", _jsx(\"kbd\", {\n        children: \"Shift\"\n      }), \" key. To select a range, press and hold the \", _jsx(\"kbd\", {\n        children: \"Shift\"\n      }), \" key while you click or keypress the \", _jsx(\"kbd\", {\n        children: \"Space\"\n      }), \" key on a row checkbox and then do the same on another row's checkbox. All selectable rows between the selected checkboxes will also be selected.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Index table","category":"Tables","keywords":["ResourceList","index","table","list","collections","items","objects","list of products","list of orders","product lists","order lists","collections lists","collection lists","list of collections","product listings list","channel lists","resource list attributes","list attributes","exceptions list","list secondary actions","secondary actions in a list","list of resources","filter","sort"],"examples":[{"fileName":"index-table-default.tsx","title":"Default","description":"An index table with simple items and no bulk actions, sorting, or filtering."},{"fileName":"index-table-with-views-search-filter-sorting.tsx","title":"With saved views, search, filtering, and sorting","description":"An index table with saved views, search, filtering, sorting, and bulk actions."},{"fileName":"index-filters-with-edit-colums-button.tsx","title":"With edit columns button","description":"An index table with edit columns, saved views, search, filtering, sorting, and bulk actions."},{"fileName":"index-table-with-disabled-rows.tsx","title":"With disabled rows","description":"An index table with saved views, search, filtering, sorting, and bulk actions."},{"fileName":"index-table-small-screen.tsx","title":"Small screen","description":"A small screen index table with simple items and no bulk actions, sorting, or filtering."},{"fileName":"index-table-condensed-with-views-search-filter-sorting.tsx","title":"Small screen with saved views, search, filtering, and sorting","description":"A small screen index table with saved views, search, filtering, sorting, and bulk actions."},{"fileName":"index-table-with-empty-state.tsx","title":"With empty state","description":"Use to explain the purpose of a index table when no resources exist yet. This allows a smooth transition from a list in a loading state to a list where zero, one, or many resources exist."},{"fileName":"index-table-with-bulk-actions.tsx","title":"With bulk actions","description":"Allows merchants to select items and perform an action on the selection."},{"fileName":"index-table-with-multiple-promoted-bulk-actions.tsx","title":"With multiple promoted bulk actions","description":"Allows merchants to select items and perform different actions on the selection."},{"fileName":"index-table-with-bulk-actions-and-selection-across-pages.tsx","title":"With bulk actions and selection across pages","description":"Allows merchants to select items, perform an action on the selection and select resources across pages."},{"fileName":"index-table-with-loading-state.tsx","title":"With loading state","description":"Notifies merchants that index table items are being processed."},{"fileName":"index-table-with-filtering.tsx","title":"With filtering","description":"Allows merchants to narrow the index table to a subset of the original items."},{"fileName":"index-table-with-sticky-last-column.tsx","title":"With sticky last column","description":"An index table with a sticky last column that stays visible on scroll. The last heading will also be sticky if not hidden."},{"fileName":"index-table-with-row-navigation-link.tsx","title":"With row navigation link","description":"Use when clicking the row should navigate merchants to another page, like the row item's detail page. When a row contains a `Link` with the `dataPrimaryLink` prop set to `true`, clicking the row will trigger navigation to the link's `url` instead of selecting the row as well as trigger the callback set on the `IndexTable` `onNavigation` prop if provided."},{"fileName":"index-table-without-checkboxes.tsx","title":"Without checkboxes","description":"An index table without checkboxes and bulk actions."},{"fileName":"index-table-with-subheaders.tsx","title":"With subheaders","description":"An index table with multiple table headers. Use to present merchants with resources grouped by a relevant data value to enable faster bulk selection."},{"fileName":"index-table-with-pagination.tsx","title":"With pagination","description":"Use when the table contains many rows and they need paginating."}],"previewImg":"/images/components/tables/index-table.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"index-table-default.tsx","title":"Default","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"An index table with simple items and no bulk actions, sorting, or filtering.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  IndexTable,\n  LegacyCard,\n  useIndexResourceState,\n  Text,\n  Badge,\n} from '@shopify/polaris';\nimport React from 'react';\n\nfunction SimpleIndexTableExample() {\n  const orders = [\n    {\n      id: '1020',\n      order: '#1020',\n      date: 'Jul 20 at 4:34pm',\n      customer: 'Jaydon Stanton',\n      total: '$969.44',\n      paymentStatus: <Badge progress=\"complete\">Paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n    {\n      id: '1019',\n      order: '#1019',\n      date: 'Jul 20 at 3:46pm',\n      customer: 'Ruben Westerfelt',\n      total: '$701.19',\n      paymentStatus: <Badge progress=\"partiallyComplete\">Partially paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n    {\n      id: '1018',\n      order: '#1018',\n      date: 'Jul 20 at 3.44pm',\n      customer: 'Leo Carder',\n      total: '$798.24',\n      paymentStatus: <Badge progress=\"complete\">Paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n  ];\n  const resourceName = {\n    singular: 'order',\n    plural: 'orders',\n  };\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(orders);\n\n  const rowMarkup = orders.map(\n    (\n      {id, order, date, customer, total, paymentStatus, fulfillmentStatus},\n      index,\n    ) => (\n      <IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n      >\n        <IndexTable.Cell>\n          <Text variant=\"bodyMd\" fontWeight=\"bold\" as=\"span\">\n            {order}\n          </Text>\n        </IndexTable.Cell>\n        <IndexTable.Cell>{date}</IndexTable.Cell>\n        <IndexTable.Cell>{customer}</IndexTable.Cell>\n        <IndexTable.Cell>{total}</IndexTable.Cell>\n        <IndexTable.Cell>{paymentStatus}</IndexTable.Cell>\n        <IndexTable.Cell>{fulfillmentStatus}</IndexTable.Cell>\n      </IndexTable.Row>\n    ),\n  );\n\n  return (\n    <LegacyCard>\n      <IndexTable\n        resourceName={resourceName}\n        itemCount={orders.length}\n        selectedItemsCount={\n          allResourcesSelected ? 'All' : selectedResources.length\n        }\n        onSelectionChange={handleSelectionChange}\n        headings={[\n          {title: 'Order'},\n          {title: 'Date'},\n          {title: 'Customer'},\n          {title: 'Total', alignment: 'end'},\n          {title: 'Payment status'},\n          {title: 'Fulfillment status'},\n        ]}\n      >\n        {rowMarkup}\n      </IndexTable>\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"index-table-with-views-search-filter-sorting.tsx","title":"With saved views, search, filtering, and sorting","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"An index table with saved views, search, filtering, sorting, and bulk actions.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  TextField,\n  IndexTable,\n  LegacyCard,\n  IndexFilters,\n  useSetIndexFiltersMode,\n  useIndexResourceState,\n  Text,\n  ChoiceList,\n  RangeSlider,\n  Badge,\n} from '@shopify/polaris';\nimport type {IndexFiltersProps, TabProps} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction IndexTableWithViewsSearchFilterSorting() {\n  const sleep = (ms: number) =>\n    new Promise((resolve) => setTimeout(resolve, ms));\n  const [itemStrings, setItemStrings] = useState([\n    'All',\n    'Unpaid',\n    'Open',\n    'Closed',\n    'Local delivery',\n    'Local pickup',\n  ]);\n  const deleteView = (index: number) => {\n    const newItemStrings = [...itemStrings];\n    newItemStrings.splice(index, 1);\n    setItemStrings(newItemStrings);\n    setSelected(0);\n  };\n\n  const duplicateView = async (name: string) => {\n    setItemStrings([...itemStrings, name]);\n    setSelected(itemStrings.length);\n    await sleep(1);\n    return true;\n  };\n\n  const tabs: TabProps[] = itemStrings.map((item, index) => ({\n    content: item,\n    index,\n    onAction: () => {},\n    id: `${item}-${index}`,\n    isLocked: index === 0,\n    actions:\n      index === 0\n        ? []\n        : [\n            {\n              type: 'rename',\n              onAction: () => {},\n              onPrimaryAction: async (value: string): Promise<boolean> => {\n                const newItemsStrings = tabs.map((item, idx) => {\n                  if (idx === index) {\n                    return value;\n                  }\n                  return item.content;\n                });\n                await sleep(1);\n                setItemStrings(newItemsStrings);\n                return true;\n              },\n            },\n            {\n              type: 'duplicate',\n              onPrimaryAction: async (value: string): Promise<boolean> => {\n                await sleep(1);\n                duplicateView(value);\n                return true;\n              },\n            },\n            {\n              type: 'edit',\n            },\n            {\n              type: 'delete',\n              onPrimaryAction: async () => {\n                await sleep(1);\n                deleteView(index);\n                return true;\n              },\n            },\n          ],\n  }));\n  const [selected, setSelected] = useState(0);\n  const onCreateNewView = async (value: string) => {\n    await sleep(500);\n    setItemStrings([...itemStrings, value]);\n    setSelected(itemStrings.length);\n    return true;\n  };\n  const sortOptions: IndexFiltersProps['sortOptions'] = [\n    {label: 'Order', value: 'order asc', directionLabel: 'Ascending'},\n    {label: 'Order', value: 'order desc', directionLabel: 'Descending'},\n    {label: 'Customer', value: 'customer asc', directionLabel: 'A-Z'},\n    {label: 'Customer', value: 'customer desc', directionLabel: 'Z-A'},\n    {label: 'Date', value: 'date asc', directionLabel: 'A-Z'},\n    {label: 'Date', value: 'date desc', directionLabel: 'Z-A'},\n    {label: 'Total', value: 'total asc', directionLabel: 'Ascending'},\n    {label: 'Total', value: 'total desc', directionLabel: 'Descending'},\n  ];\n  const [sortSelected, setSortSelected] = useState(['order asc']);\n  const {mode, setMode} = useSetIndexFiltersMode();\n  const onHandleCancel = () => {};\n\n  const onHandleSave = async () => {\n    await sleep(1);\n    return true;\n  };\n\n  const primaryAction: IndexFiltersProps['primaryAction'] =\n    selected === 0\n      ? {\n          type: 'save-as',\n          onAction: onCreateNewView,\n          disabled: false,\n          loading: false,\n        }\n      : {\n          type: 'save',\n          onAction: onHandleSave,\n          disabled: false,\n          loading: false,\n        };\n  const [accountStatus, setAccountStatus] = useState<string[] | undefined>(\n    undefined,\n  );\n  const [moneySpent, setMoneySpent] = useState<[number, number] | undefined>(\n    undefined,\n  );\n  const [taggedWith, setTaggedWith] = useState('');\n  const [queryValue, setQueryValue] = useState('');\n\n  const handleAccountStatusChange = useCallback(\n    (value: string[]) => setAccountStatus(value),\n    [],\n  );\n  const handleMoneySpentChange = useCallback(\n    (value: [number, number]) => setMoneySpent(value),\n    [],\n  );\n  const handleTaggedWithChange = useCallback(\n    (value: string) => setTaggedWith(value),\n    [],\n  );\n  const handleFiltersQueryChange = useCallback(\n    (value: string) => setQueryValue(value),\n    [],\n  );\n  const handleAccountStatusRemove = useCallback(\n    () => setAccountStatus(undefined),\n    [],\n  );\n  const handleMoneySpentRemove = useCallback(\n    () => setMoneySpent(undefined),\n    [],\n  );\n  const handleTaggedWithRemove = useCallback(() => setTaggedWith(''), []);\n  const handleQueryValueRemove = useCallback(() => setQueryValue(''), []);\n  const handleFiltersClearAll = useCallback(() => {\n    handleAccountStatusRemove();\n    handleMoneySpentRemove();\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [\n    handleAccountStatusRemove,\n    handleMoneySpentRemove,\n    handleQueryValueRemove,\n    handleTaggedWithRemove,\n  ]);\n\n  const filters = [\n    {\n      key: 'accountStatus',\n      label: 'Account status',\n      filter: (\n        <ChoiceList\n          title=\"Account status\"\n          titleHidden\n          choices={[\n            {label: 'Enabled', value: 'enabled'},\n            {label: 'Not invited', value: 'not invited'},\n            {label: 'Invited', value: 'invited'},\n            {label: 'Declined', value: 'declined'},\n          ]}\n          selected={accountStatus || []}\n          onChange={handleAccountStatusChange}\n          allowMultiple\n        />\n      ),\n      shortcut: true,\n    },\n    {\n      key: 'taggedWith',\n      label: 'Tagged with',\n      filter: (\n        <TextField\n          label=\"Tagged with\"\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=\"off\"\n          labelHidden\n        />\n      ),\n      shortcut: true,\n    },\n    {\n      key: 'moneySpent',\n      label: 'Money spent',\n      filter: (\n        <RangeSlider\n          label=\"Money spent is between\"\n          labelHidden\n          value={moneySpent || [0, 500]}\n          prefix=\"$\"\n          output\n          min={0}\n          max={2000}\n          step={1}\n          onChange={handleMoneySpentChange}\n        />\n      ),\n    },\n  ];\n\n  const appliedFilters: IndexFiltersProps['appliedFilters'] = [];\n  if (accountStatus && !isEmpty(accountStatus)) {\n    const key = 'accountStatus';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, accountStatus),\n      onRemove: handleAccountStatusRemove,\n    });\n  }\n  if (moneySpent) {\n    const key = 'moneySpent';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, moneySpent),\n      onRemove: handleMoneySpentRemove,\n    });\n  }\n  if (!isEmpty(taggedWith)) {\n    const key = 'taggedWith';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, taggedWith),\n      onRemove: handleTaggedWithRemove,\n    });\n  }\n\n  const orders = [\n    {\n      id: '1020',\n      order: (\n        <Text as=\"span\" variant=\"bodyMd\" fontWeight=\"semibold\">\n          #1020\n        </Text>\n      ),\n      date: 'Jul 20 at 4:34pm',\n      customer: 'Jaydon Stanton',\n      total: '$969.44',\n      paymentStatus: <Badge progress=\"complete\">Paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n    {\n      id: '1019',\n      order: (\n        <Text as=\"span\" variant=\"bodyMd\" fontWeight=\"semibold\">\n          #1019\n        </Text>\n      ),\n      date: 'Jul 20 at 3:46pm',\n      customer: 'Ruben Westerfelt',\n      total: '$701.19',\n      paymentStatus: <Badge progress=\"partiallyComplete\">Partially paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n    {\n      id: '1018',\n      order: (\n        <Text as=\"span\" variant=\"bodyMd\" fontWeight=\"semibold\">\n          #1018\n        </Text>\n      ),\n      date: 'Jul 20 at 3.44pm',\n      customer: 'Leo Carder',\n      total: '$798.24',\n      paymentStatus: <Badge progress=\"complete\">Paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n  ];\n  const resourceName = {\n    singular: 'order',\n    plural: 'orders',\n  };\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(orders);\n\n  const rowMarkup = orders.map(\n    (\n      {id, order, date, customer, total, paymentStatus, fulfillmentStatus},\n      index,\n    ) => (\n      <IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n      >\n        <IndexTable.Cell>\n          <Text variant=\"bodyMd\" fontWeight=\"bold\" as=\"span\">\n            {order}\n          </Text>\n        </IndexTable.Cell>\n        <IndexTable.Cell>{date}</IndexTable.Cell>\n        <IndexTable.Cell>{customer}</IndexTable.Cell>\n        <IndexTable.Cell>{total}</IndexTable.Cell>\n        <IndexTable.Cell>{paymentStatus}</IndexTable.Cell>\n        <IndexTable.Cell>{fulfillmentStatus}</IndexTable.Cell>\n      </IndexTable.Row>\n    ),\n  );\n\n  return (\n    <LegacyCard>\n      <IndexFilters\n        sortOptions={sortOptions}\n        sortSelected={sortSelected}\n        queryValue={queryValue}\n        queryPlaceholder=\"Searching in all\"\n        onQueryChange={handleFiltersQueryChange}\n        onQueryClear={() => setQueryValue('')}\n        onSort={setSortSelected}\n        primaryAction={primaryAction}\n        cancelAction={{\n          onAction: onHandleCancel,\n          disabled: false,\n          loading: false,\n        }}\n        tabs={tabs}\n        selected={selected}\n        onSelect={setSelected}\n        canCreateNewView\n        onCreateNewView={onCreateNewView}\n        filters={filters}\n        appliedFilters={appliedFilters}\n        onClearAll={handleFiltersClearAll}\n        mode={mode}\n        setMode={setMode}\n      />\n      <IndexTable\n        resourceName={resourceName}\n        itemCount={orders.length}\n        selectedItemsCount={\n          allResourcesSelected ? 'All' : selectedResources.length\n        }\n        onSelectionChange={handleSelectionChange}\n        headings={[\n          {title: 'Order'},\n          {title: 'Date'},\n          {title: 'Customer'},\n          {title: 'Total', alignment: 'end'},\n          {title: 'Payment status'},\n          {title: 'Fulfillment status'},\n        ]}\n      >\n        {rowMarkup}\n      </IndexTable>\n    </LegacyCard>\n  );\n\n  function disambiguateLabel(key: string, value: string | any[]): string {\n    switch (key) {\n      case 'moneySpent':\n        return `Money spent is between $${value[0]} and $${value[1]}`;\n      case 'taggedWith':\n        return `Tagged with ${value}`;\n      case 'accountStatus':\n        return (value as string[]).map((val) => `Customer ${val}`).join(', ');\n      default:\n        return value as string;\n    }\n  }\n\n  function isEmpty(value: string | string[]): boolean {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === '' || value == null;\n    }\n  }\n}\n\n"},{"fileName":"index-filters-with-edit-colums-button.tsx","title":"With edit columns button","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"An index table with edit columns, saved views, search, filtering, sorting, and bulk actions.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  TextField,\n  IndexTable,\n  LegacyCard,\n  IndexFilters,\n  useSetIndexFiltersMode,\n  useIndexResourceState,\n  Text,\n  ChoiceList,\n  RangeSlider,\n  Badge,\n} from '@shopify/polaris';\nimport type {IndexFiltersProps, TabProps} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction IndexFiltersDefaultExample() {\n  const sleep = (ms: number) =>\n    new Promise((resolve) => setTimeout(resolve, ms));\n  const [itemStrings, setItemStrings] = useState([\n    'All',\n    'Unpaid',\n    'Open',\n    'Closed',\n    'Local delivery',\n    'Local pickup',\n  ]);\n  const deleteView = (index: number) => {\n    const newItemStrings = [...itemStrings];\n    newItemStrings.splice(index, 1);\n    setItemStrings(newItemStrings);\n    setSelected(0);\n  };\n\n  const duplicateView = async (name: string) => {\n    setItemStrings([...itemStrings, name]);\n    setSelected(itemStrings.length);\n    await sleep(1);\n    return true;\n  };\n\n  const tabs: TabProps[] = itemStrings.map((item, index) => ({\n    content: item,\n    index,\n    onAction: () => {},\n    id: `${item}-${index}`,\n    isLocked: index === 0,\n    actions:\n      index === 0\n        ? []\n        : [\n            {\n              type: 'rename',\n              onAction: () => {},\n              onPrimaryAction: async (value: string): Promise<boolean> => {\n                const newItemsStrings = tabs.map((item, idx) => {\n                  if (idx === index) {\n                    return value;\n                  }\n                  return item.content;\n                });\n                await sleep(1);\n                setItemStrings(newItemsStrings);\n                return true;\n              },\n            },\n            {\n              type: 'duplicate',\n              onPrimaryAction: async (value: string): Promise<boolean> => {\n                await sleep(1);\n                duplicateView(value);\n                return true;\n              },\n            },\n            {\n              type: 'edit',\n            },\n            {\n              type: 'delete',\n              onPrimaryAction: async () => {\n                await sleep(1);\n                deleteView(index);\n                return true;\n              },\n            },\n          ],\n  }));\n  const [selected, setSelected] = useState(0);\n  const onCreateNewView = async (value: string) => {\n    await sleep(500);\n    setItemStrings([...itemStrings, value]);\n    setSelected(itemStrings.length);\n    return true;\n  };\n  const sortOptions: IndexFiltersProps['sortOptions'] = [\n    {label: 'Order', value: 'order asc', directionLabel: 'Ascending'},\n    {label: 'Order', value: 'order desc', directionLabel: 'Descending'},\n    {label: 'Customer', value: 'customer asc', directionLabel: 'A-Z'},\n    {label: 'Customer', value: 'customer desc', directionLabel: 'Z-A'},\n    {label: 'Date', value: 'date asc', directionLabel: 'A-Z'},\n    {label: 'Date', value: 'date desc', directionLabel: 'Z-A'},\n    {label: 'Total', value: 'total asc', directionLabel: 'Ascending'},\n    {label: 'Total', value: 'total desc', directionLabel: 'Descending'},\n  ];\n  const [sortSelected, setSortSelected] = useState(['order asc']);\n  const {mode, setMode} = useSetIndexFiltersMode();\n  const onHandleCancel = () => {};\n\n  const onHandleSave = async () => {\n    await sleep(1);\n    return true;\n  };\n\n  const primaryAction: IndexFiltersProps['primaryAction'] =\n    selected === 0\n      ? {\n          type: 'save-as',\n          onAction: onCreateNewView,\n          disabled: false,\n          loading: false,\n        }\n      : {\n          type: 'save',\n          onAction: onHandleSave,\n          disabled: false,\n          loading: false,\n        };\n  const [accountStatus, setAccountStatus] = useState<string[] | undefined>(\n    undefined,\n  );\n  const [moneySpent, setMoneySpent] = useState<[number, number] | undefined>(\n    undefined,\n  );\n  const [taggedWith, setTaggedWith] = useState('');\n  const [queryValue, setQueryValue] = useState('');\n\n  const handleAccountStatusChange = useCallback(\n    (value: string[]) => setAccountStatus(value),\n    [],\n  );\n  const handleMoneySpentChange = useCallback(\n    (value: [number, number]) => setMoneySpent(value),\n    [],\n  );\n  const handleTaggedWithChange = useCallback(\n    (value: string) => setTaggedWith(value),\n    [],\n  );\n  const handleFiltersQueryChange = useCallback(\n    (value: string) => setQueryValue(value),\n    [],\n  );\n  const handleAccountStatusRemove = useCallback(\n    () => setAccountStatus(undefined),\n    [],\n  );\n  const handleMoneySpentRemove = useCallback(\n    () => setMoneySpent(undefined),\n    [],\n  );\n  const handleTaggedWithRemove = useCallback(() => setTaggedWith(''), []);\n  const handleQueryValueRemove = useCallback(() => setQueryValue(''), []);\n  const handleFiltersClearAll = useCallback(() => {\n    handleAccountStatusRemove();\n    handleMoneySpentRemove();\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [\n    handleAccountStatusRemove,\n    handleMoneySpentRemove,\n    handleQueryValueRemove,\n    handleTaggedWithRemove,\n  ]);\n\n  const filters = [\n    {\n      key: 'accountStatus',\n      label: 'Account status',\n      filter: (\n        <ChoiceList\n          title=\"Account status\"\n          titleHidden\n          choices={[\n            {label: 'Enabled', value: 'enabled'},\n            {label: 'Not invited', value: 'not invited'},\n            {label: 'Invited', value: 'invited'},\n            {label: 'Declined', value: 'declined'},\n          ]}\n          selected={accountStatus || []}\n          onChange={handleAccountStatusChange}\n          allowMultiple\n        />\n      ),\n      shortcut: true,\n    },\n    {\n      key: 'taggedWith',\n      label: 'Tagged with',\n      filter: (\n        <TextField\n          label=\"Tagged with\"\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=\"off\"\n          labelHidden\n        />\n      ),\n      shortcut: true,\n    },\n    {\n      key: 'moneySpent',\n      label: 'Money spent',\n      filter: (\n        <RangeSlider\n          label=\"Money spent is between\"\n          labelHidden\n          value={moneySpent || [0, 500]}\n          prefix=\"$\"\n          output\n          min={0}\n          max={2000}\n          step={1}\n          onChange={handleMoneySpentChange}\n        />\n      ),\n    },\n  ];\n\n  const appliedFilters: IndexFiltersProps['appliedFilters'] = [];\n  if (accountStatus && !isEmpty(accountStatus)) {\n    const key = 'accountStatus';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, accountStatus),\n      onRemove: handleAccountStatusRemove,\n    });\n  }\n  if (moneySpent) {\n    const key = 'moneySpent';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, moneySpent),\n      onRemove: handleMoneySpentRemove,\n    });\n  }\n  if (!isEmpty(taggedWith)) {\n    const key = 'taggedWith';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, taggedWith),\n      onRemove: handleTaggedWithRemove,\n    });\n  }\n\n  const orders = [\n    {\n      id: '1020',\n      order: (\n        <Text as=\"span\" variant=\"bodyMd\" fontWeight=\"semibold\">\n          #1020\n        </Text>\n      ),\n      date: 'Jul 20 at 4:34pm',\n      customer: 'Jaydon Stanton',\n      total: '$969.44',\n      paymentStatus: <Badge progress=\"complete\">Paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n    {\n      id: '1019',\n      order: (\n        <Text as=\"span\" variant=\"bodyMd\" fontWeight=\"semibold\">\n          #1019\n        </Text>\n      ),\n      date: 'Jul 20 at 3:46pm',\n      customer: 'Ruben Westerfelt',\n      total: '$701.19',\n      paymentStatus: <Badge progress=\"partiallyComplete\">Partially paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n    {\n      id: '1018',\n      order: (\n        <Text as=\"span\" variant=\"bodyMd\" fontWeight=\"semibold\">\n          #1018\n        </Text>\n      ),\n      date: 'Jul 20 at 3.44pm',\n      customer: 'Leo Carder',\n      total: '$798.24',\n      paymentStatus: <Badge progress=\"complete\">Paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n  ];\n  const resourceName = {\n    singular: 'order',\n    plural: 'orders',\n  };\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(orders);\n\n  const rowMarkup = orders.map(\n    (\n      {id, order, date, customer, total, paymentStatus, fulfillmentStatus},\n      index,\n    ) => (\n      <IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n      >\n        <IndexTable.Cell>\n          <Text variant=\"bodyMd\" fontWeight=\"bold\" as=\"span\">\n            {order}\n          </Text>\n        </IndexTable.Cell>\n        <IndexTable.Cell>{date}</IndexTable.Cell>\n        <IndexTable.Cell>{customer}</IndexTable.Cell>\n        <IndexTable.Cell>{total}</IndexTable.Cell>\n        <IndexTable.Cell>{paymentStatus}</IndexTable.Cell>\n        <IndexTable.Cell>{fulfillmentStatus}</IndexTable.Cell>\n      </IndexTable.Row>\n    ),\n  );\n\n  return (\n    <LegacyCard>\n      <IndexFilters\n        sortOptions={sortOptions}\n        sortSelected={sortSelected}\n        queryValue={queryValue}\n        queryPlaceholder=\"Searching in all\"\n        onQueryChange={handleFiltersQueryChange}\n        onQueryClear={() => setQueryValue('')}\n        onSort={setSortSelected}\n        primaryAction={primaryAction}\n        cancelAction={{\n          onAction: onHandleCancel,\n          disabled: false,\n          loading: false,\n        }}\n        tabs={tabs}\n        selected={selected}\n        onSelect={setSelected}\n        canCreateNewView\n        onCreateNewView={onCreateNewView}\n        filters={filters}\n        appliedFilters={appliedFilters}\n        onClearAll={handleFiltersClearAll}\n        mode={mode}\n        setMode={setMode}\n        showEditColumnsButton\n      />\n      <IndexTable\n        resourceName={resourceName}\n        itemCount={orders.length}\n        selectedItemsCount={\n          allResourcesSelected ? 'All' : selectedResources.length\n        }\n        onSelectionChange={handleSelectionChange}\n        headings={[\n          {title: 'Order'},\n          {title: 'Date'},\n          {title: 'Customer'},\n          {title: 'Total', alignment: 'end'},\n          {title: 'Payment status'},\n          {title: 'Fulfillment status'},\n        ]}\n      >\n        {rowMarkup}\n      </IndexTable>\n    </LegacyCard>\n  );\n\n  function disambiguateLabel(key: string, value: string | any[]): string {\n    switch (key) {\n      case 'moneySpent':\n        return `Money spent is between $${value[0]} and $${value[1]}`;\n      case 'taggedWith':\n        return `Tagged with ${value}`;\n      case 'accountStatus':\n        return (value as string[]).map((val) => `Customer ${val}`).join(', ');\n      default:\n        return value as string;\n    }\n  }\n\n  function isEmpty(value: string | any[]) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === '' || value == null;\n    }\n  }\n}\n\n"},{"fileName":"index-table-with-disabled-rows.tsx","title":"With disabled rows","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"An index table with saved views, search, filtering, sorting, and bulk actions.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  IndexTable,\n  LegacyCard,\n  useIndexResourceState,\n  Text,\n  Badge,\n} from '@shopify/polaris';\nimport React from 'react';\n\nfunction IndexTableWithDisabledRowsExample() {\n  const orders = [\n    {\n      id: '1020',\n      order: '#1020',\n      date: 'Jul 20 at 4:34pm',\n      customer: 'Jaydon Stanton',\n      total: '$969.44',\n      paymentStatus: <Badge progress=\"complete\">Paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n      disabled: false,\n    },\n    {\n      id: '1019',\n      order: '#1019',\n      date: 'Jul 20 at 3:46pm',\n      customer: 'Ruben Westerfelt',\n      total: '$701.19',\n      paymentStatus: <Badge progress=\"partiallyComplete\">Partially paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n      disabled: true,\n    },\n    {\n      id: '1018',\n      order: '#1018',\n      date: 'Jul 20 at 3.44pm',\n      customer: 'Leo Carder',\n      total: '$798.24',\n      paymentStatus: <Badge progress=\"complete\">Paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n      disabled: false,\n    },\n  ];\n  const resourceName = {\n    singular: 'order',\n    plural: 'orders',\n  };\n\n  const selectableOrders = orders.filter((order) => !order.disabled);\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(selectableOrders);\n\n  const rowMarkup = orders.map(\n    (\n      {\n        id,\n        order,\n        date,\n        customer,\n        total,\n        paymentStatus,\n        fulfillmentStatus,\n        disabled,\n      },\n      index,\n    ) => (\n      <IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n        disabled={disabled}\n      >\n        <IndexTable.Cell>\n          <Text variant=\"bodyMd\" fontWeight=\"bold\" as=\"span\">\n            {order}\n          </Text>\n        </IndexTable.Cell>\n        <IndexTable.Cell>{date}</IndexTable.Cell>\n        <IndexTable.Cell>{customer}</IndexTable.Cell>\n        <IndexTable.Cell>{total}</IndexTable.Cell>\n        <IndexTable.Cell>{paymentStatus}</IndexTable.Cell>\n        <IndexTable.Cell>{fulfillmentStatus}</IndexTable.Cell>\n      </IndexTable.Row>\n    ),\n  );\n\n  return (\n    <LegacyCard>\n      <IndexTable\n        resourceName={resourceName}\n        itemCount={selectableOrders.length}\n        selectedItemsCount={\n          allResourcesSelected ? 'All' : selectedResources.length\n        }\n        onSelectionChange={handleSelectionChange}\n        headings={[\n          {title: 'Order'},\n          {title: 'Date'},\n          {title: 'Customer'},\n          {title: 'Total', alignment: 'end'},\n          {title: 'Payment status'},\n          {title: 'Fulfillment status'},\n        ]}\n      >\n        {rowMarkup}\n      </IndexTable>\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"index-table-small-screen.tsx","title":"Small screen","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"A small screen index table with simple items and no bulk actions, sorting, or filtering.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  IndexTable,\n  LegacyCard,\n  useIndexResourceState,\n  Text,\n  InlineStack,\n  Badge,\n  BlockStack,\n} from '@shopify/polaris';\nimport React from 'react';\n\nfunction SimpleSmallScreenIndexTableExample() {\n  const orders = [\n    {\n      id: '1020',\n      order: '#1020',\n      date: 'Jul 20 at 4:34pm',\n      customer: 'Jaydon Stanton',\n      total: '$969.44',\n      paymentStatus: <Badge progress=\"complete\">Paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n    {\n      id: '1019',\n      order: '#1019',\n      date: 'Jul 20 at 3:46pm',\n      customer: 'Ruben Westerfelt',\n      total: '$701.19',\n      paymentStatus: <Badge progress=\"partiallyComplete\">Partially paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n    {\n      id: '1018',\n      order: '#1018',\n      date: 'Jul 20 at 3.44pm',\n      customer: 'Leo Carder',\n      total: '$798.24',\n      paymentStatus: <Badge progress=\"complete\">Paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n  ];\n  const resourceName = {\n    singular: 'order',\n    plural: 'orders',\n  };\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(orders);\n\n  const rowMarkup = orders.map(\n    (\n      {id, order, date, customer, total, paymentStatus, fulfillmentStatus},\n      index,\n    ) => (\n      <IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n      >\n        <div style={{padding: '12px 16px', width: '100%'}}>\n          <BlockStack gap=\"100\">\n            <Text as=\"span\" variant=\"bodySm\" tone=\"subdued\">\n              {order} • {date}\n            </Text>\n            <InlineStack align=\"space-between\">\n              <Text as=\"span\" variant=\"bodyMd\" fontWeight=\"semibold\">\n                {customer}\n              </Text>\n              <Text as=\"span\" variant=\"bodyMd\">\n                {total}\n              </Text>\n            </InlineStack>\n            <InlineStack align=\"start\" gap=\"100\">\n              {paymentStatus}\n              {fulfillmentStatus}\n            </InlineStack>\n          </BlockStack>\n        </div>\n      </IndexTable.Row>\n    ),\n  );\n\n  return (\n    <div style={{width: '430px'}}>\n      <LegacyCard>\n        <IndexTable\n          resourceName={resourceName}\n          itemCount={orders.length}\n          selectedItemsCount={\n            allResourcesSelected ? 'All' : selectedResources.length\n          }\n          condensed\n          onSelectionChange={handleSelectionChange}\n          headings={[\n            {title: 'Order'},\n            {title: 'Date'},\n            {title: 'Customer'},\n            {title: 'Total', alignment: 'end'},\n            {title: 'Payment status'},\n            {title: 'Fulfillment status'},\n          ]}\n        >\n          {rowMarkup}\n        </IndexTable>\n      </LegacyCard>\n    </div>\n  );\n}\n\n"},{"fileName":"index-table-condensed-with-views-search-filter-sorting.tsx","title":"Small screen with saved views, search, filtering, and sorting","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"A small screen index table with saved views, search, filtering, sorting, and bulk actions.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  TextField,\n  IndexTable,\n  LegacyCard,\n  IndexFilters,\n  useSetIndexFiltersMode,\n  useIndexResourceState,\n  Text,\n  ChoiceList,\n  RangeSlider,\n  Badge,\n  BlockStack,\n  InlineStack,\n} from '@shopify/polaris';\nimport type {IndexFiltersProps, TabProps} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction IndexTableWithViewsSearchFilterSorting() {\n  const sleep = (ms: number) =>\n    new Promise((resolve) => setTimeout(resolve, ms));\n  const [itemStrings, setItemStrings] = useState(['All', 'Unpaid']);\n  const deleteView = (index: number) => {\n    const newItemStrings = [...itemStrings];\n    newItemStrings.splice(index, 1);\n    setItemStrings(newItemStrings);\n    setSelected(0);\n  };\n\n  const duplicateView = async (name: string) => {\n    setItemStrings([...itemStrings, name]);\n    setSelected(itemStrings.length);\n    await sleep(1);\n    return true;\n  };\n\n  const tabs: TabProps[] = itemStrings.map((item, index) => ({\n    content: item,\n    index,\n    onAction: () => {},\n    id: `${item}-${index}`,\n    isLocked: index === 0,\n    actions:\n      index === 0\n        ? []\n        : [\n            {\n              type: 'rename',\n              onAction: () => {},\n              onPrimaryAction: async (value: string): Promise<boolean> => {\n                const newItemsStrings = tabs.map((item, idx) => {\n                  if (idx === index) {\n                    return value;\n                  }\n                  return item.content;\n                });\n                await sleep(1);\n                setItemStrings(newItemsStrings);\n                return true;\n              },\n            },\n            {\n              type: 'duplicate',\n              onPrimaryAction: async (value: string): Promise<boolean> => {\n                await sleep(1);\n                duplicateView(value);\n                return true;\n              },\n            },\n            {\n              type: 'edit',\n            },\n            {\n              type: 'delete',\n              onPrimaryAction: async () => {\n                await sleep(1);\n                deleteView(index);\n                return true;\n              },\n            },\n          ],\n  }));\n  const [selected, setSelected] = useState(0);\n  const onCreateNewView = async (value: string) => {\n    await sleep(500);\n    setItemStrings([...itemStrings, value]);\n    setSelected(itemStrings.length);\n    return true;\n  };\n  const sortOptions: IndexFiltersProps['sortOptions'] = [\n    {label: 'Order', value: 'order asc', directionLabel: 'Ascending'},\n    {label: 'Order', value: 'order desc', directionLabel: 'Descending'},\n    {label: 'Customer', value: 'customer asc', directionLabel: 'A-Z'},\n    {label: 'Customer', value: 'customer desc', directionLabel: 'Z-A'},\n    {label: 'Date', value: 'date asc', directionLabel: 'A-Z'},\n    {label: 'Date', value: 'date desc', directionLabel: 'Z-A'},\n    {label: 'Total', value: 'total asc', directionLabel: 'Ascending'},\n    {label: 'Total', value: 'total desc', directionLabel: 'Descending'},\n  ];\n  const [sortSelected, setSortSelected] = useState(['order asc']);\n  const {mode, setMode} = useSetIndexFiltersMode();\n  const onHandleCancel = () => {};\n\n  const onHandleSave = async () => {\n    await sleep(1);\n    return true;\n  };\n\n  const primaryAction: IndexFiltersProps['primaryAction'] =\n    selected === 0\n      ? {\n          type: 'save-as',\n          onAction: onCreateNewView,\n          disabled: false,\n          loading: false,\n        }\n      : {\n          type: 'save',\n          onAction: onHandleSave,\n          disabled: false,\n          loading: false,\n        };\n  const [accountStatus, setAccountStatus] = useState<string[]>([]);\n  const [moneySpent, setMoneySpent] = useState<[number, number] | undefined>(\n    undefined,\n  );\n  const [taggedWith, setTaggedWith] = useState('');\n  const [queryValue, setQueryValue] = useState('');\n\n  const handleAccountStatusChange = useCallback(\n    (value: string[]) => setAccountStatus(value),\n    [],\n  );\n  const handleMoneySpentChange = useCallback(\n    (value: [number, number]) => setMoneySpent(value),\n    [],\n  );\n  const handleTaggedWithChange = useCallback(\n    (value: string) => setTaggedWith(value),\n    [],\n  );\n  const handleFiltersQueryChange = useCallback(\n    (value: string) => setQueryValue(value),\n    [],\n  );\n  const handleAccountStatusRemove = useCallback(() => setAccountStatus([]), []);\n  const handleMoneySpentRemove = useCallback(\n    () => setMoneySpent(undefined),\n    [],\n  );\n  const handleTaggedWithRemove = useCallback(() => setTaggedWith(''), []);\n  const handleQueryValueRemove = useCallback(() => setQueryValue(''), []);\n  const handleFiltersClearAll = useCallback(() => {\n    handleAccountStatusRemove();\n    handleMoneySpentRemove();\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [\n    handleAccountStatusRemove,\n    handleMoneySpentRemove,\n    handleQueryValueRemove,\n    handleTaggedWithRemove,\n  ]);\n\n  const filters = [\n    {\n      key: 'accountStatus',\n      label: 'Account status',\n      filter: (\n        <ChoiceList\n          title=\"Account status\"\n          titleHidden\n          choices={[\n            {label: 'Enabled', value: 'enabled'},\n            {label: 'Not invited', value: 'not invited'},\n            {label: 'Invited', value: 'invited'},\n            {label: 'Declined', value: 'declined'},\n          ]}\n          selected={accountStatus || []}\n          onChange={handleAccountStatusChange}\n          allowMultiple\n        />\n      ),\n      shortcut: true,\n    },\n    {\n      key: 'taggedWith',\n      label: 'Tagged with',\n      filter: (\n        <TextField\n          label=\"Tagged with\"\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=\"off\"\n          labelHidden\n        />\n      ),\n      shortcut: true,\n    },\n    {\n      key: 'moneySpent',\n      label: 'Money spent',\n      filter: (\n        <RangeSlider\n          label=\"Money spent is between\"\n          labelHidden\n          value={moneySpent || [0, 500]}\n          prefix=\"$\"\n          output\n          min={0}\n          max={2000}\n          step={1}\n          onChange={handleMoneySpentChange}\n        />\n      ),\n    },\n  ];\n\n  const appliedFilters: IndexFiltersProps['appliedFilters'] = [];\n  if (!isEmpty(accountStatus)) {\n    const key = 'accountStatus';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, accountStatus),\n      onRemove: handleAccountStatusRemove,\n    });\n  }\n  if (moneySpent) {\n    const key = 'moneySpent';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, moneySpent),\n      onRemove: handleMoneySpentRemove,\n    });\n  }\n  if (!isEmpty(taggedWith)) {\n    const key = 'taggedWith';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, taggedWith),\n      onRemove: handleTaggedWithRemove,\n    });\n  }\n\n  const orders = [\n    {\n      id: '1020',\n      order: (\n        <Text as=\"span\" variant=\"bodyMd\" fontWeight=\"semibold\">\n          #1020\n        </Text>\n      ),\n      date: 'Jul 20 at 4:34pm',\n      customer: 'Jaydon Stanton',\n      total: '$969.44',\n      paymentStatus: <Badge progress=\"complete\">Paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n    {\n      id: '1019',\n      order: (\n        <Text as=\"span\" variant=\"bodyMd\" fontWeight=\"semibold\">\n          #1019\n        </Text>\n      ),\n      date: 'Jul 20 at 3:46pm',\n      customer: 'Ruben Westerfelt',\n      total: '$701.19',\n      paymentStatus: <Badge progress=\"partiallyComplete\">Partially paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n    {\n      id: '1018',\n      order: (\n        <Text as=\"span\" variant=\"bodyMd\" fontWeight=\"semibold\">\n          #1018\n        </Text>\n      ),\n      date: 'Jul 20 at 3.44pm',\n      customer: 'Leo Carder',\n      total: '$798.24',\n      paymentStatus: <Badge progress=\"complete\">Paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n  ];\n  const resourceName = {\n    singular: 'order',\n    plural: 'orders',\n  };\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(orders);\n\n  const rowMarkup = orders.map(\n    (\n      {id, order, date, customer, total, paymentStatus, fulfillmentStatus},\n      index,\n    ) => (\n      <IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n      >\n        <div style={{padding: '12px 16px', width: '100%'}}>\n          <BlockStack gap=\"100\">\n            <Text as=\"span\" variant=\"bodySm\" tone=\"subdued\">\n              {order} • {date}\n            </Text>\n            <InlineStack align=\"space-between\">\n              <Text as=\"span\" variant=\"bodyMd\" fontWeight=\"semibold\">\n                {customer}\n              </Text>\n              <Text as=\"span\" variant=\"bodyMd\">\n                {total}\n              </Text>\n            </InlineStack>\n            <InlineStack align=\"start\" gap=\"100\">\n              {paymentStatus}\n              {fulfillmentStatus}\n            </InlineStack>\n          </BlockStack>\n        </div>\n      </IndexTable.Row>\n    ),\n  );\n\n  return (\n    <div style={{width: '430px'}}>\n      <LegacyCard>\n        <IndexFilters\n          sortOptions={sortOptions}\n          sortSelected={sortSelected}\n          queryValue={queryValue}\n          queryPlaceholder=\"Searching in all\"\n          onQueryChange={handleFiltersQueryChange}\n          onQueryClear={() => setQueryValue('')}\n          onSort={setSortSelected}\n          primaryAction={primaryAction}\n          cancelAction={{\n            onAction: onHandleCancel,\n            disabled: false,\n            loading: false,\n          }}\n          tabs={tabs}\n          selected={selected}\n          onSelect={setSelected}\n          canCreateNewView\n          onCreateNewView={onCreateNewView}\n          filters={filters}\n          appliedFilters={appliedFilters}\n          onClearAll={handleFiltersClearAll}\n          mode={mode}\n          setMode={setMode}\n        />\n        <IndexTable\n          resourceName={resourceName}\n          itemCount={orders.length}\n          selectedItemsCount={\n            allResourcesSelected ? 'All' : selectedResources.length\n          }\n          condensed\n          onSelectionChange={handleSelectionChange}\n          headings={[\n            {title: 'Order'},\n            {title: 'Date'},\n            {title: 'Customer'},\n            {title: 'Total', alignment: 'end'},\n            {title: 'Payment status'},\n            {title: 'Fulfillment status'},\n          ]}\n        >\n          {rowMarkup}\n        </IndexTable>\n      </LegacyCard>\n    </div>\n  );\n\n  function disambiguateLabel(key: string, value: any[] | string): string {\n    switch (key) {\n      case 'moneySpent':\n        return `Money spent is between $${value[0]} and $${value[1]}`;\n      case 'taggedWith':\n        return `Tagged with ${value}`;\n      case 'accountStatus':\n        return (value as string[]).map((val) => `Customer ${val}`).join(', ');\n      default:\n        return value as string;\n    }\n  }\n\n  function isEmpty(value: string | string[]) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === '' || value == null;\n    }\n  }\n}\n\n"},{"fileName":"index-table-with-empty-state.tsx","title":"With empty state","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to explain the purpose of a index table when no resources exist yet. This allows a smooth transition from a list in a loading state to a list where zero, one, or many resources exist.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  EmptySearchResult,\n  IndexTable,\n  LegacyCard,\n  Text,\n} from '@shopify/polaris';\nimport React from 'react';\n\nfunction IndexTableWithCustomEmptyStateExample() {\n  const customers: {\n    id: string;\n    name: string;\n    location: string;\n    orders: number;\n    amountSpent: string;\n  }[] = [];\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const emptyStateMarkup = (\n    <EmptySearchResult\n      title={'No customers yet'}\n      description={'Try changing the filters or search term'}\n      withIllustration\n    />\n  );\n\n  const rowMarkup = customers.map(\n    ({id, name, location, orders, amountSpent}, index) => (\n      <IndexTable.Row id={id} key={id} position={index}>\n        <IndexTable.Cell>\n          <Text fontWeight=\"bold\" as=\"span\">\n            {name}\n          </Text>\n        </IndexTable.Cell>\n        <IndexTable.Cell>{location}</IndexTable.Cell>\n        <IndexTable.Cell>\n          <Text as=\"span\" alignment=\"end\" numeric>\n            {orders}\n          </Text>\n        </IndexTable.Cell>\n        <IndexTable.Cell>\n          <Text as=\"span\" alignment=\"end\" numeric>\n            {amountSpent}\n          </Text>\n        </IndexTable.Cell>\n      </IndexTable.Row>\n    ),\n  );\n\n  return (\n    <LegacyCard>\n      <IndexTable\n        resourceName={resourceName}\n        itemCount={customers.length}\n        emptyState={emptyStateMarkup}\n        headings={[\n          {title: 'Name'},\n          {title: 'Location'},\n          {\n            id: 'order-count',\n            title: (\n              <Text as=\"span\" alignment=\"end\">\n                Order count\n              </Text>\n            ),\n          },\n          {\n            id: 'amount-spent',\n            title: (\n              <Text as=\"span\" alignment=\"end\">\n                Amount spent\n              </Text>\n            ),\n          },\n        ]}\n      >\n        {rowMarkup}\n      </IndexTable>\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"index-table-with-bulk-actions.tsx","title":"With bulk actions","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Allows merchants to select items and perform an action on the selection.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  IndexTable,\n  LegacyCard,\n  useIndexResourceState,\n  Text,\n  Badge,\n} from '@shopify/polaris';\nimport React from 'react';\n\nfunction IndexTableWithBulkActionsExample() {\n  const orders = [\n    {\n      id: '1020',\n      order: '#1020',\n      date: 'Jul 20 at 4:34pm',\n      customer: 'Jaydon Stanton',\n      total: '$969.44',\n      paymentStatus: <Badge progress=\"complete\">Paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n    {\n      id: '1019',\n      order: '#1019',\n      date: 'Jul 20 at 3:46pm',\n      customer: 'Ruben Westerfelt',\n      total: '$701.19',\n      paymentStatus: <Badge progress=\"partiallyComplete\">Partially paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n    {\n      id: '1018',\n      order: '#1018',\n      date: 'Jul 20 at 3.44pm',\n      customer: 'Leo Carder',\n      total: '$798.24',\n      paymentStatus: <Badge progress=\"complete\">Paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n  ];\n  const resourceName = {\n    singular: 'order',\n    plural: 'orders',\n  };\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(orders);\n\n  const rowMarkup = orders.map(\n    (\n      {id, order, date, customer, total, paymentStatus, fulfillmentStatus},\n      index,\n    ) => (\n      <IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n      >\n        <IndexTable.Cell>\n          <Text variant=\"bodyMd\" fontWeight=\"bold\" as=\"span\">\n            {order}\n          </Text>\n        </IndexTable.Cell>\n        <IndexTable.Cell>{date}</IndexTable.Cell>\n        <IndexTable.Cell>{customer}</IndexTable.Cell>\n        <IndexTable.Cell>{total}</IndexTable.Cell>\n        <IndexTable.Cell>{paymentStatus}</IndexTable.Cell>\n        <IndexTable.Cell>{fulfillmentStatus}</IndexTable.Cell>\n      </IndexTable.Row>\n    ),\n  );\n\n  const promotedBulkActions = [\n    {\n      content: 'Create shipping labels',\n      onAction: () => console.log('Todo: implement bulk edit'),\n    },\n  ];\n  const bulkActions = [\n    {\n      content: 'Add tags',\n      onAction: () => console.log('Todo: implement bulk add tags'),\n    },\n    {\n      content: 'Remove tags',\n      onAction: () => console.log('Todo: implement bulk remove tags'),\n    },\n    {\n      content: 'Delete orders',\n      onAction: () => console.log('Todo: implement bulk delete'),\n    },\n  ];\n\n  return (\n    <LegacyCard>\n      <IndexTable\n        resourceName={resourceName}\n        itemCount={orders.length}\n        selectedItemsCount={\n          allResourcesSelected ? 'All' : selectedResources.length\n        }\n        onSelectionChange={handleSelectionChange}\n        headings={[\n          {title: 'Order'},\n          {title: 'Date'},\n          {title: 'Customer'},\n          {title: 'Total', alignment: 'end'},\n          {title: 'Payment status'},\n          {title: 'Fulfillment status'},\n        ]}\n        bulkActions={bulkActions}\n        promotedBulkActions={promotedBulkActions}\n      >\n        {rowMarkup}\n      </IndexTable>\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"index-table-with-multiple-promoted-bulk-actions.tsx","title":"With multiple promoted bulk actions","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Allows merchants to select items and perform different actions on the selection.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  IndexTable,\n  LegacyCard,\n  useIndexResourceState,\n  Text,\n  Badge,\n} from '@shopify/polaris';\nimport React from 'react';\n\nfunction IndexTableWithMultiplePromotedBulkActionsExample() {\n  const orders = [\n    {\n      id: '1020',\n      order: '#1020',\n      date: 'Jul 20 at 4:34pm',\n      customer: 'Jaydon Stanton',\n      total: '$969.44',\n      paymentStatus: <Badge progress=\"complete\">Paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n    {\n      id: '1019',\n      order: '#1019',\n      date: 'Jul 20 at 3:46pm',\n      customer: 'Ruben Westerfelt',\n      total: '$701.19',\n      paymentStatus: <Badge progress=\"partiallyComplete\">Partially paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n    {\n      id: '1018',\n      order: '#1018',\n      date: 'Jul 20 at 3.44pm',\n      customer: 'Leo Carder',\n      total: '$798.24',\n      paymentStatus: <Badge progress=\"complete\">Paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n  ];\n  const resourceName = {\n    singular: 'order',\n    plural: 'orders',\n  };\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(orders);\n\n  const rowMarkup = orders.map(\n    (\n      {id, order, date, customer, total, paymentStatus, fulfillmentStatus},\n      index,\n    ) => (\n      <IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n      >\n        <IndexTable.Cell>\n          <Text variant=\"bodyMd\" fontWeight=\"bold\" as=\"span\">\n            {order}\n          </Text>\n        </IndexTable.Cell>\n        <IndexTable.Cell>{date}</IndexTable.Cell>\n        <IndexTable.Cell>{customer}</IndexTable.Cell>\n        <IndexTable.Cell>{total}</IndexTable.Cell>\n        <IndexTable.Cell>{paymentStatus}</IndexTable.Cell>\n        <IndexTable.Cell>{fulfillmentStatus}</IndexTable.Cell>\n      </IndexTable.Row>\n    ),\n  );\n\n  const promotedBulkActions = [\n    {\n      content: 'Create shipping labels',\n      onAction: () => console.log('Todo: implement create shipping labels'),\n    },\n    {\n      content: 'Mark as fulfilled',\n      onAction: () => console.log('Todo: implement mark as fulfilled'),\n    },\n    {\n      content: 'Capture payment',\n      onAction: () => console.log('Todo: implement capture payment'),\n    },\n  ];\n  const bulkActions = [\n    {\n      content: 'Add tags',\n      onAction: () => console.log('Todo: implement bulk add tags'),\n    },\n    {\n      content: 'Remove tags',\n      onAction: () => console.log('Todo: implement bulk remove tags'),\n    },\n    {\n      content: 'Delete customers',\n      onAction: () => console.log('Todo: implement bulk delete'),\n    },\n  ];\n\n  return (\n    <LegacyCard>\n      <IndexTable\n        resourceName={resourceName}\n        itemCount={orders.length}\n        selectedItemsCount={\n          allResourcesSelected ? 'All' : selectedResources.length\n        }\n        onSelectionChange={handleSelectionChange}\n        headings={[\n          {title: 'Order'},\n          {title: 'Date'},\n          {title: 'Customer'},\n          {title: 'Total', alignment: 'end'},\n          {title: 'Payment status'},\n          {title: 'Fulfillment status'},\n        ]}\n        bulkActions={bulkActions}\n        promotedBulkActions={promotedBulkActions}\n      >\n        {rowMarkup}\n      </IndexTable>\n    </LegacyCard>\n  );\n}\n\n  IndexTableWithMultiplePromotedBulkActionsExample,\n);\n"},{"fileName":"index-table-with-bulk-actions-and-selection-across-pages.tsx","title":"With bulk actions and selection across pages","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Allows merchants to select items, perform an action on the selection and select resources across pages.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  IndexTable,\n  LegacyCard,\n  useIndexResourceState,\n  Text,\n  Badge,\n} from '@shopify/polaris';\nimport React from 'react';\n\nfunction IndexTableWithBulkActionsAndSelectionAcrossPagesExample() {\n  const orders = [\n    {\n      id: '1020',\n      order: '#1020',\n      date: 'Jul 20 at 4:34pm',\n      customer: 'Jaydon Stanton',\n      total: '$969.44',\n      paymentStatus: <Badge progress=\"complete\">Paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n    {\n      id: '1019',\n      order: '#1019',\n      date: 'Jul 20 at 3:46pm',\n      customer: 'Ruben Westerfelt',\n      total: '$701.19',\n      paymentStatus: <Badge progress=\"partiallyComplete\">Partially paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n    {\n      id: '1018',\n      order: '#1018',\n      date: 'Jul 20 at 3.44pm',\n      customer: 'Leo Carder',\n      total: '$798.24',\n      paymentStatus: <Badge progress=\"complete\">Paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n  ];\n  const resourceName = {\n    singular: 'order',\n    plural: 'orders',\n  };\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(orders);\n\n  const rowMarkup = orders.map(\n    (\n      {id, order, date, customer, total, paymentStatus, fulfillmentStatus},\n      index,\n    ) => (\n      <IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n      >\n        <IndexTable.Cell>\n          <Text variant=\"bodyMd\" fontWeight=\"bold\" as=\"span\">\n            {order}\n          </Text>\n        </IndexTable.Cell>\n        <IndexTable.Cell>{date}</IndexTable.Cell>\n        <IndexTable.Cell>{customer}</IndexTable.Cell>\n        <IndexTable.Cell>{total}</IndexTable.Cell>\n        <IndexTable.Cell>{paymentStatus}</IndexTable.Cell>\n        <IndexTable.Cell>{fulfillmentStatus}</IndexTable.Cell>\n      </IndexTable.Row>\n    ),\n  );\n\n  const promotedBulkActions = [\n    {\n      content: 'Create shipping labels',\n      onAction: () => console.log('Todo: implement create shipping labels'),\n    },\n    {\n      content: 'Mark as fulfilled',\n      onAction: () => console.log('Todo: implement mark as fulfilled'),\n    },\n    {\n      content: 'Capture payment',\n      onAction: () => console.log('Todo: implement capture payment'),\n    },\n  ];\n  const bulkActions = [\n    {\n      content: 'Add tags',\n      onAction: () => console.log('Todo: implement bulk add tags'),\n    },\n    {\n      content: 'Remove tags',\n      onAction: () => console.log('Todo: implement bulk remove tags'),\n    },\n    {\n      content: 'Delete customers',\n      onAction: () => console.log('Todo: implement bulk delete'),\n    },\n  ];\n\n  return (\n    <LegacyCard>\n      <IndexTable\n        resourceName={resourceName}\n        itemCount={orders.length}\n        selectedItemsCount={\n          allResourcesSelected ? 'All' : selectedResources.length\n        }\n        onSelectionChange={handleSelectionChange}\n        hasMoreItems\n        bulkActions={bulkActions}\n        promotedBulkActions={promotedBulkActions}\n        headings={[\n          {title: 'Order'},\n          {title: 'Date'},\n          {title: 'Customer'},\n          {title: 'Total', alignment: 'end'},\n          {title: 'Payment status'},\n          {title: 'Fulfillment status'},\n        ]}\n      >\n        {rowMarkup}\n      </IndexTable>\n    </LegacyCard>\n  );\n}\n\n  IndexTableWithBulkActionsAndSelectionAcrossPagesExample,\n);\n"},{"fileName":"index-table-with-loading-state.tsx","title":"With loading state","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Notifies merchants that index table items are being processed.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  TextField,\n  IndexTable,\n  LegacyCard,\n  IndexFilters,\n  useSetIndexFiltersMode,\n  useIndexResourceState,\n  Text,\n  ChoiceList,\n  RangeSlider,\n  Badge,\n} from '@shopify/polaris';\nimport type {IndexFiltersProps, TabProps} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction IndexTableWithLoadingExample() {\n  const sleep = (ms: number) =>\n    new Promise((resolve) => setTimeout(resolve, ms));\n  const [itemStrings, setItemStrings] = useState([\n    'All',\n    'Unpaid',\n    'Open',\n    'Closed',\n    'Local delivery',\n    'Local pickup',\n  ]);\n  const deleteView = (index: number) => {\n    const newItemStrings = [...itemStrings];\n    newItemStrings.splice(index, 1);\n    setItemStrings(newItemStrings);\n    setSelected(0);\n  };\n\n  const duplicateView = async (name: string) => {\n    setItemStrings([...itemStrings, name]);\n    setSelected(itemStrings.length);\n    await sleep(1);\n    return true;\n  };\n\n  const tabs: TabProps[] = itemStrings.map((item, index) => ({\n    content: item,\n    index,\n    onAction: () => {},\n    id: `${item}-${index}`,\n    isLocked: index === 0,\n    actions:\n      index === 0\n        ? []\n        : [\n            {\n              type: 'rename',\n              onAction: () => {},\n              onPrimaryAction: async (value: string): Promise<boolean> => {\n                const newItemsStrings = tabs.map((item, idx) => {\n                  if (idx === index) {\n                    return value;\n                  }\n                  return item.content;\n                });\n                await sleep(1);\n                setItemStrings(newItemsStrings);\n                return true;\n              },\n            },\n            {\n              type: 'duplicate',\n              onPrimaryAction: async (value: string): Promise<boolean> => {\n                await sleep(1);\n                duplicateView(value);\n                return true;\n              },\n            },\n            {\n              type: 'edit',\n            },\n            {\n              type: 'delete',\n              onPrimaryAction: async () => {\n                await sleep(1);\n                deleteView(index);\n                return true;\n              },\n            },\n          ],\n  }));\n  const [selected, setSelected] = useState(0);\n  const onCreateNewView = async (value: string) => {\n    await sleep(500);\n    setItemStrings([...itemStrings, value]);\n    setSelected(itemStrings.length);\n    return true;\n  };\n  const sortOptions: IndexFiltersProps['sortOptions'] = [\n    {label: 'Order', value: 'order asc', directionLabel: 'Ascending'},\n    {label: 'Order', value: 'order desc', directionLabel: 'Descending'},\n    {label: 'Customer', value: 'customer asc', directionLabel: 'A-Z'},\n    {label: 'Customer', value: 'customer desc', directionLabel: 'Z-A'},\n    {label: 'Date', value: 'date asc', directionLabel: 'A-Z'},\n    {label: 'Date', value: 'date desc', directionLabel: 'Z-A'},\n    {label: 'Total', value: 'total asc', directionLabel: 'Ascending'},\n    {label: 'Total', value: 'total desc', directionLabel: 'Descending'},\n  ];\n  const [sortSelected, setSortSelected] = useState(['order asc']);\n  const {mode, setMode} = useSetIndexFiltersMode();\n  const onHandleCancel = () => {};\n\n  const onHandleSave = async () => {\n    await sleep(1);\n    return true;\n  };\n\n  const primaryAction: IndexFiltersProps['primaryAction'] =\n    selected === 0\n      ? {\n          type: 'save-as',\n          onAction: onCreateNewView,\n          disabled: false,\n          loading: false,\n        }\n      : {\n          type: 'save',\n          onAction: onHandleSave,\n          disabled: false,\n          loading: false,\n        };\n  const [accountStatus, setAccountStatus] = useState<string[] | undefined>(\n    undefined,\n  );\n  const [moneySpent, setMoneySpent] = useState<[number, number] | undefined>(\n    undefined,\n  );\n  const [taggedWith, setTaggedWith] = useState<string>('');\n  const [queryValue, setQueryValue] = useState<string>('');\n\n  const handleAccountStatusChange = useCallback(\n    (value: string[]) => setAccountStatus(value),\n    [],\n  );\n  const handleMoneySpentChange = useCallback(\n    (value: [number, number]) => setMoneySpent(value),\n    [],\n  );\n  const handleTaggedWithChange = useCallback(\n    (value: string) => setTaggedWith(value),\n    [],\n  );\n  const handleFiltersQueryChange = useCallback(\n    (value: string) => setQueryValue(value),\n    [],\n  );\n  const handleAccountStatusRemove = useCallback(\n    () => setAccountStatus(undefined),\n    [],\n  );\n  const handleMoneySpentRemove = useCallback(\n    () => setMoneySpent(undefined),\n    [],\n  );\n  const handleTaggedWithRemove = useCallback(() => setTaggedWith(''), []);\n  const handleQueryValueRemove = useCallback(() => setQueryValue(''), []);\n  const handleFiltersClearAll = useCallback(() => {\n    handleAccountStatusRemove();\n    handleMoneySpentRemove();\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [\n    handleAccountStatusRemove,\n    handleMoneySpentRemove,\n    handleQueryValueRemove,\n    handleTaggedWithRemove,\n  ]);\n\n  const filters = [\n    {\n      key: 'accountStatus',\n      label: 'Account status',\n      filter: (\n        <ChoiceList\n          title=\"Account status\"\n          titleHidden\n          choices={[\n            {label: 'Enabled', value: 'enabled'},\n            {label: 'Not invited', value: 'not invited'},\n            {label: 'Invited', value: 'invited'},\n            {label: 'Declined', value: 'declined'},\n          ]}\n          selected={accountStatus || []}\n          onChange={handleAccountStatusChange}\n          allowMultiple\n        />\n      ),\n      shortcut: true,\n    },\n    {\n      key: 'taggedWith',\n      label: 'Tagged with',\n      filter: (\n        <TextField\n          label=\"Tagged with\"\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=\"off\"\n          labelHidden\n        />\n      ),\n      shortcut: true,\n    },\n    {\n      key: 'moneySpent',\n      label: 'Money spent',\n      filter: (\n        <RangeSlider\n          label=\"Money spent is between\"\n          labelHidden\n          value={moneySpent || [0, 500]}\n          prefix=\"$\"\n          output\n          min={0}\n          max={2000}\n          step={1}\n          onChange={handleMoneySpentChange}\n        />\n      ),\n    },\n  ];\n\n  const appliedFilters: IndexFiltersProps['appliedFilters'] = [];\n  if (accountStatus && !isEmpty(accountStatus)) {\n    const key = 'accountStatus';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, accountStatus),\n      onRemove: handleAccountStatusRemove,\n    });\n  }\n  if (moneySpent) {\n    const key = 'moneySpent';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, moneySpent),\n      onRemove: handleMoneySpentRemove,\n    });\n  }\n  if (!isEmpty(taggedWith)) {\n    const key = 'taggedWith';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, taggedWith),\n      onRemove: handleTaggedWithRemove,\n    });\n  }\n\n  const orders = [\n    {\n      id: '1020',\n      order: (\n        <Text as=\"span\" variant=\"bodyMd\" fontWeight=\"semibold\">\n          #1020\n        </Text>\n      ),\n      date: 'Jul 20 at 4:34pm',\n      customer: 'Jaydon Stanton',\n      total: '$969.44',\n      paymentStatus: <Badge progress=\"complete\">Paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n    {\n      id: '1019',\n      order: (\n        <Text as=\"span\" variant=\"bodyMd\" fontWeight=\"semibold\">\n          #1019\n        </Text>\n      ),\n      date: 'Jul 20 at 3:46pm',\n      customer: 'Ruben Westerfelt',\n      total: '$701.19',\n      paymentStatus: <Badge progress=\"partiallyComplete\">Partially paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n    {\n      id: '1018',\n      order: (\n        <Text as=\"span\" variant=\"bodyMd\" fontWeight=\"semibold\">\n          #1018\n        </Text>\n      ),\n      date: 'Jul 20 at 3.44pm',\n      customer: 'Leo Carder',\n      total: '$798.24',\n      paymentStatus: <Badge progress=\"complete\">Paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n  ];\n  const resourceName = {\n    singular: 'order',\n    plural: 'orders',\n  };\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(orders);\n\n  const rowMarkup = orders.map(\n    (\n      {id, order, date, customer, total, paymentStatus, fulfillmentStatus},\n      index,\n    ) => (\n      <IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n      >\n        <IndexTable.Cell>\n          <Text variant=\"bodyMd\" fontWeight=\"bold\" as=\"span\">\n            {order}\n          </Text>\n        </IndexTable.Cell>\n        <IndexTable.Cell>{date}</IndexTable.Cell>\n        <IndexTable.Cell>{customer}</IndexTable.Cell>\n        <IndexTable.Cell>{total}</IndexTable.Cell>\n        <IndexTable.Cell>{paymentStatus}</IndexTable.Cell>\n        <IndexTable.Cell>{fulfillmentStatus}</IndexTable.Cell>\n      </IndexTable.Row>\n    ),\n  );\n\n  return (\n    <LegacyCard>\n      <IndexFilters\n        sortOptions={sortOptions}\n        sortSelected={sortSelected}\n        queryValue={queryValue}\n        queryPlaceholder=\"Searching in all\"\n        onQueryChange={handleFiltersQueryChange}\n        onQueryClear={() => setQueryValue('')}\n        onSort={setSortSelected}\n        primaryAction={primaryAction}\n        cancelAction={{\n          onAction: onHandleCancel,\n          disabled: false,\n          loading: false,\n        }}\n        tabs={tabs}\n        selected={selected}\n        onSelect={setSelected}\n        canCreateNewView\n        onCreateNewView={onCreateNewView}\n        filters={filters}\n        appliedFilters={appliedFilters}\n        onClearAll={handleFiltersClearAll}\n        mode={mode}\n        setMode={setMode}\n        loading\n      />\n      <IndexTable\n        resourceName={resourceName}\n        itemCount={orders.length}\n        selectedItemsCount={\n          allResourcesSelected ? 'All' : selectedResources.length\n        }\n        onSelectionChange={handleSelectionChange}\n        headings={[\n          {title: 'Order'},\n          {title: 'Date'},\n          {title: 'Customer'},\n          {title: 'Total', alignment: 'end'},\n          {title: 'Payment status'},\n          {title: 'Fulfillment status'},\n        ]}\n      >\n        {rowMarkup}\n      </IndexTable>\n    </LegacyCard>\n  );\n\n  function disambiguateLabel(key: string, value: string | any[]): string {\n    switch (key) {\n      case 'moneySpent':\n        return `Money spent is between $${value[0]} and $${value[1]}`;\n      case 'taggedWith':\n        return `Tagged with ${value}`;\n      case 'accountStatus':\n        return (value as string[]).map((val) => `Customer ${val}`).join(', ');\n      default:\n        return value as string;\n    }\n  }\n\n  function isEmpty(value: string | string[]): boolean {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === '' || value == null;\n    }\n  }\n}\n\n"},{"fileName":"index-table-with-filtering.tsx","title":"With filtering","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Allows merchants to narrow the index table to a subset of the original items.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  TextField,\n  IndexTable,\n  LegacyCard,\n  IndexFilters,\n  useSetIndexFiltersMode,\n  useIndexResourceState,\n  Text,\n  ChoiceList,\n  RangeSlider,\n  Badge,\n  IndexFiltersMode,\n} from '@shopify/polaris';\nimport type {IndexFiltersProps, TabProps} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction IndexTableWithFilteringExample() {\n  const sleep = (ms: number) =>\n    new Promise((resolve) => setTimeout(resolve, ms));\n  const [itemStrings, setItemStrings] = useState([\n    'All',\n    'Unpaid',\n    'Open',\n    'Closed',\n    'Local delivery',\n    'Local pickup',\n  ]);\n  const deleteView = (index: number) => {\n    const newItemStrings = [...itemStrings];\n    newItemStrings.splice(index, 1);\n    setItemStrings(newItemStrings);\n    setSelected(0);\n  };\n\n  const duplicateView = async (name: string) => {\n    setItemStrings([...itemStrings, name]);\n    setSelected(itemStrings.length);\n    await sleep(1);\n    return true;\n  };\n\n  const tabs: TabProps[] = itemStrings.map((item, index) => ({\n    content: item,\n    index,\n    onAction: () => {},\n    id: `${item}-${index}`,\n    isLocked: index === 0,\n    actions:\n      index === 0\n        ? []\n        : [\n            {\n              type: 'rename',\n              onAction: () => {},\n              onPrimaryAction: async (value: string): Promise<boolean> => {\n                const newItemsStrings = tabs.map((item, idx) => {\n                  if (idx === index) {\n                    return value;\n                  }\n                  return item.content;\n                });\n                await sleep(1);\n                setItemStrings(newItemsStrings);\n                return true;\n              },\n            },\n            {\n              type: 'duplicate',\n              onPrimaryAction: async (value: string): Promise<boolean> => {\n                await sleep(1);\n                duplicateView(value);\n                return true;\n              },\n            },\n            {\n              type: 'edit',\n            },\n            {\n              type: 'delete',\n              onPrimaryAction: async () => {\n                await sleep(1);\n                deleteView(index);\n                return true;\n              },\n            },\n          ],\n  }));\n  const [selected, setSelected] = useState(0);\n  const onCreateNewView = async (value: string) => {\n    await sleep(500);\n    setItemStrings([...itemStrings, value]);\n    setSelected(itemStrings.length);\n    return true;\n  };\n  const sortOptions: IndexFiltersProps['sortOptions'] = [\n    {label: 'Order', value: 'order asc', directionLabel: 'Ascending'},\n    {label: 'Order', value: 'order desc', directionLabel: 'Descending'},\n    {label: 'Customer', value: 'customer asc', directionLabel: 'A-Z'},\n    {label: 'Customer', value: 'customer desc', directionLabel: 'Z-A'},\n    {label: 'Date', value: 'date asc', directionLabel: 'A-Z'},\n    {label: 'Date', value: 'date desc', directionLabel: 'Z-A'},\n    {label: 'Total', value: 'total asc', directionLabel: 'Ascending'},\n    {label: 'Total', value: 'total desc', directionLabel: 'Descending'},\n  ];\n  const [sortSelected, setSortSelected] = useState(['order asc']);\n  const {mode, setMode} = useSetIndexFiltersMode(IndexFiltersMode.Filtering);\n  const onHandleCancel = () => {};\n\n  const onHandleSave = async () => {\n    await sleep(1);\n    return true;\n  };\n\n  const primaryAction: IndexFiltersProps['primaryAction'] =\n    selected === 0\n      ? {\n          type: 'save-as',\n          onAction: onCreateNewView,\n          disabled: false,\n          loading: false,\n        }\n      : {\n          type: 'save',\n          onAction: onHandleSave,\n          disabled: false,\n          loading: false,\n        };\n  const [accountStatus, setAccountStatus] = useState<string[]>([]);\n  const [moneySpent, setMoneySpent] = useState<[number, number] | undefined>(\n    undefined,\n  );\n  const [taggedWith, setTaggedWith] = useState<string | undefined>('');\n  const [queryValue, setQueryValue] = useState<string | undefined>(undefined);\n\n  const handleAccountStatusChange = useCallback(\n    (value: string[]) => setAccountStatus(value),\n    [],\n  );\n  const handleMoneySpentChange = useCallback(\n    (value: [number, number]) => setMoneySpent(value),\n    [],\n  );\n  const handleTaggedWithChange = useCallback(\n    (value: string) => setTaggedWith(value),\n    [],\n  );\n  const handleQueryValueChange = useCallback(\n    (value: string) => setQueryValue(value),\n    [],\n  );\n  const handleAccountStatusRemove = useCallback(() => setAccountStatus([]), []);\n  const handleMoneySpentRemove = useCallback(\n    () => setMoneySpent(undefined),\n    [],\n  );\n  const handleTaggedWithRemove = useCallback(() => setTaggedWith(''), []);\n  const handleQueryValueRemove = useCallback(() => setQueryValue(''), []);\n  const handleFiltersClearAll = useCallback(() => {\n    handleAccountStatusRemove();\n    handleMoneySpentRemove();\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [\n    handleQueryValueRemove,\n    handleTaggedWithRemove,\n    handleMoneySpentRemove,\n    handleAccountStatusRemove,\n  ]);\n\n  const filters = [\n    {\n      key: 'accountStatus',\n      label: 'Account status',\n      filter: (\n        <ChoiceList\n          title=\"Account status\"\n          titleHidden\n          choices={[\n            {label: 'Enabled', value: 'enabled'},\n            {label: 'Not invited', value: 'not invited'},\n            {label: 'Invited', value: 'invited'},\n            {label: 'Declined', value: 'declined'},\n          ]}\n          selected={accountStatus || []}\n          onChange={handleAccountStatusChange}\n          allowMultiple\n        />\n      ),\n      shortcut: true,\n    },\n    {\n      key: 'taggedWith',\n      label: 'Tagged with',\n      filter: (\n        <TextField\n          label=\"Tagged with\"\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=\"off\"\n          labelHidden\n        />\n      ),\n      shortcut: true,\n    },\n    {\n      key: 'moneySpent',\n      label: 'Money spent',\n      filter: (\n        <RangeSlider\n          label=\"Money spent is between\"\n          labelHidden\n          value={moneySpent || [0, 500]}\n          prefix=\"$\"\n          output\n          min={0}\n          max={2000}\n          step={1}\n          onChange={handleMoneySpentChange}\n        />\n      ),\n    },\n  ];\n\n  const appliedFilters =\n    taggedWith && !isEmpty(taggedWith)\n      ? [\n          {\n            key: 'taggedWith',\n            label: disambiguateLabel('taggedWith', taggedWith),\n            onRemove: handleTaggedWithRemove,\n          },\n        ]\n      : [];\n\n  const orders = [\n    {\n      id: '1020',\n      order: '#1020',\n      date: 'Jul 20 at 4:34pm',\n      customer: 'Jaydon Stanton',\n      total: '$969.44',\n      paymentStatus: <Badge progress=\"complete\">Paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n    {\n      id: '1019',\n      order: '#1019',\n      date: 'Jul 20 at 3:46pm',\n      customer: 'Ruben Westerfelt',\n      total: '$701.19',\n      paymentStatus: <Badge progress=\"partiallyComplete\">Partially paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n    {\n      id: '1018',\n      order: '#1018',\n      date: 'Jul 20 at 3.44pm',\n      customer: 'Leo Carder',\n      total: '$798.24',\n      paymentStatus: <Badge progress=\"complete\">Paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n  ];\n\n  const resourceName = {\n    singular: 'order',\n    plural: 'orders',\n  };\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(orders);\n\n  const rowMarkup = orders.map(\n    (\n      {id, order, date, customer, total, paymentStatus, fulfillmentStatus},\n      index,\n    ) => (\n      <IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n      >\n        <IndexTable.Cell>\n          <Text variant=\"bodyMd\" fontWeight=\"bold\" as=\"span\">\n            {order}\n          </Text>\n        </IndexTable.Cell>\n        <IndexTable.Cell>{date}</IndexTable.Cell>\n        <IndexTable.Cell>{customer}</IndexTable.Cell>\n        <IndexTable.Cell>{total}</IndexTable.Cell>\n        <IndexTable.Cell>{paymentStatus}</IndexTable.Cell>\n        <IndexTable.Cell>{fulfillmentStatus}</IndexTable.Cell>\n      </IndexTable.Row>\n    ),\n  );\n\n  return (\n    <LegacyCard>\n      <IndexFilters\n        sortOptions={sortOptions}\n        sortSelected={sortSelected}\n        queryValue={queryValue}\n        queryPlaceholder=\"Searching in all\"\n        onQueryChange={handleQueryValueChange}\n        onQueryClear={() => setQueryValue('')}\n        onSort={setSortSelected}\n        primaryAction={primaryAction}\n        cancelAction={{\n          onAction: onHandleCancel,\n          disabled: false,\n          loading: false,\n        }}\n        tabs={tabs}\n        selected={selected}\n        onSelect={setSelected}\n        canCreateNewView\n        onCreateNewView={onCreateNewView}\n        filters={filters}\n        appliedFilters={appliedFilters}\n        onClearAll={handleFiltersClearAll}\n        mode={mode}\n        setMode={setMode}\n      />\n      <IndexTable\n        resourceName={resourceName}\n        itemCount={orders.length}\n        selectedItemsCount={\n          allResourcesSelected ? 'All' : selectedResources.length\n        }\n        onSelectionChange={handleSelectionChange}\n        headings={[\n          {title: 'Order'},\n          {title: 'Date'},\n          {title: 'Customer'},\n          {title: 'Total', alignment: 'end'},\n          {title: 'Payment status'},\n          {title: 'Fulfillment status'},\n        ]}\n      >\n        {rowMarkup}\n      </IndexTable>\n    </LegacyCard>\n  );\n\n  function disambiguateLabel(key: string, value: string | string[]): string {\n    switch (key) {\n      case 'moneySpent':\n        return `Money spent is between $${value[0]} and $${value[1]}`;\n      case 'taggedWith':\n        return `Tagged with ${value}`;\n      case 'accountStatus':\n        return (value as string[]).map((val) => `Customer ${val}`).join(', ');\n      default:\n        return value as string;\n    }\n  }\n\n  function isEmpty(value: string): boolean {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === '' || value == null;\n    }\n  }\n}\n\n"},{"fileName":"index-table-with-sticky-last-column.tsx","title":"With sticky last column","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"An index table with a sticky last column that stays visible on scroll. The last heading will also be sticky if not hidden.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  IndexTable,\n  LegacyCard,\n  useIndexResourceState,\n  Text,\n  Badge,\n} from '@shopify/polaris';\nimport React from 'react';\n\nfunction StickyLastCellIndexTableExample() {\n  const orders = [\n    {\n      id: '1020',\n      order: '#1020',\n      date: 'Jul 20 at 4:34pm',\n      customer: 'Jaydon Stanton',\n      total: '$969.44',\n      paymentStatus: <Badge progress=\"complete\">Paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n    {\n      id: '1019',\n      order: '#1019',\n      date: 'Jul 20 at 3:46pm',\n      customer: 'Ruben Westerfelt',\n      total: '$701.19',\n      paymentStatus: <Badge progress=\"partiallyComplete\">Partially paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n    {\n      id: '1018',\n      order: '#1018',\n      date: 'Jul 20 at 3.44pm',\n      customer: 'Leo Carder',\n      total: '$798.24',\n      paymentStatus: <Badge progress=\"complete\">Paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n  ];\n  const resourceName = {\n    singular: 'order',\n    plural: 'orders',\n  };\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(orders);\n\n  const rowMarkup = orders.map(\n    (\n      {id, order, date, customer, total, paymentStatus, fulfillmentStatus},\n      index,\n    ) => (\n      <IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n      >\n        <IndexTable.Cell>\n          <Text variant=\"bodyMd\" fontWeight=\"bold\" as=\"span\">\n            {order}\n          </Text>\n        </IndexTable.Cell>\n        <IndexTable.Cell>{date}</IndexTable.Cell>\n        <IndexTable.Cell>{customer}</IndexTable.Cell>\n        <IndexTable.Cell>{total}</IndexTable.Cell>\n        <IndexTable.Cell>{paymentStatus}</IndexTable.Cell>\n        <IndexTable.Cell>{fulfillmentStatus}</IndexTable.Cell>\n      </IndexTable.Row>\n    ),\n  );\n\n  return (\n    <LegacyCard>\n      <IndexTable\n        resourceName={resourceName}\n        itemCount={orders.length}\n        selectedItemsCount={\n          allResourcesSelected ? 'All' : selectedResources.length\n        }\n        onSelectionChange={handleSelectionChange}\n        headings={[\n          {title: 'Order'},\n          {title: 'Date'},\n          {title: 'Customer'},\n          {title: 'Total', alignment: 'end'},\n          {title: 'Payment status'},\n          {title: 'Fulfillment status'},\n        ]}\n        lastColumnSticky\n      >\n        {rowMarkup}\n      </IndexTable>\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"index-table-with-row-navigation-link.tsx","title":"With row navigation link","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_components.p, {\n    children: [\"Use when clicking the row should navigate merchants to another page, like the row item's detail page. When a row contains a \", _jsx(_components.code, {\n      children: \"Link\"\n    }), \" with the \", _jsx(_components.code, {\n      children: \"dataPrimaryLink\"\n    }), \" prop set to \", _jsx(_components.code, {\n      children: \"true\"\n    }), \", clicking the row will trigger navigation to the link's \", _jsx(_components.code, {\n      children: \"url\"\n    }), \" instead of selecting the row as well as trigger the callback set on the \", _jsx(_components.code, {\n      children: \"IndexTable\"\n    }), \" \", _jsx(_components.code, {\n      children: \"onNavigation\"\n    }), \" prop if provided.\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  IndexTable,\n  LegacyCard,\n  Link,\n  useIndexResourceState,\n  Text,\n} from '@shopify/polaris';\nimport React from 'react';\n\nfunction ClickThroughLinkIndexTableExample() {\n  const customers = [\n    {\n      id: '3411',\n      url: '#',\n      name: 'Mae Jemison',\n      location: 'Decatur, USA',\n      orders: 20,\n      amountSpent: '$2,400',\n    },\n    {\n      id: '2561',\n      url: '#',\n      name: 'Ellen Ochoa',\n      location: 'Los Angeles, USA',\n      orders: 30,\n      amountSpent: '$140',\n    },\n  ];\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(customers);\n\n  const rowMarkup = customers.map(\n    ({id, url, name, location, orders, amountSpent}, index) => (\n      <IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n      >\n        <IndexTable.Cell>\n          <Link\n            dataPrimaryLink\n            url={url}\n            onClick={() => console.log(`Clicked ${name}`)}\n          >\n            <Text fontWeight=\"bold\" as=\"span\">\n              {name}\n            </Text>\n          </Link>\n        </IndexTable.Cell>\n        <IndexTable.Cell>{location}</IndexTable.Cell>\n        <IndexTable.Cell>\n          <Text as=\"span\" alignment=\"end\" numeric>\n            {orders}\n          </Text>\n        </IndexTable.Cell>\n        <IndexTable.Cell>\n          <Text as=\"span\" alignment=\"end\" numeric>\n            {amountSpent}\n          </Text>\n        </IndexTable.Cell>\n      </IndexTable.Row>\n    ),\n  );\n\n  return (\n    <LegacyCard>\n      <IndexTable\n        resourceName={resourceName}\n        itemCount={customers.length}\n        selectedItemsCount={\n          allResourcesSelected ? 'All' : selectedResources.length\n        }\n        onSelectionChange={handleSelectionChange}\n        headings={[\n          {title: 'Name'},\n          {title: 'Location'},\n          {\n            id: 'order-count',\n            title: (\n              <Text as=\"span\" alignment=\"end\">\n                Order count\n              </Text>\n            ),\n          },\n          {\n            id: 'amount-spent',\n            hidden: false,\n            title: (\n              <Text as=\"span\" alignment=\"end\">\n                Amount spent\n              </Text>\n            ),\n          },\n        ]}\n      >\n        {rowMarkup}\n      </IndexTable>\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"index-table-without-checkboxes.tsx","title":"Without checkboxes","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"An index table without checkboxes and bulk actions.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {IndexTable, LegacyCard, Text, Badge} from '@shopify/polaris';\nimport React from 'react';\n\nfunction IndexTableWithoutCheckboxesExample() {\n  const orders = [\n    {\n      id: '1020',\n      order: '#1020',\n      date: 'Jul 20 at 4:34pm',\n      customer: 'Jaydon Stanton',\n      total: '$969.44',\n      paymentStatus: <Badge progress=\"complete\">Paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n    {\n      id: '1019',\n      order: '#1019',\n      date: 'Jul 20 at 3:46pm',\n      customer: 'Ruben Westerfelt',\n      total: '$701.19',\n      paymentStatus: <Badge progress=\"partiallyComplete\">Partially paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n    {\n      id: '1018',\n      order: '#1018',\n      date: 'Jul 20 at 3.44pm',\n      customer: 'Leo Carder',\n      total: '$798.24',\n      paymentStatus: <Badge progress=\"complete\">Paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n  ];\n  const resourceName = {\n    singular: 'order',\n    plural: 'orders',\n  };\n\n  const rowMarkup = orders.map(\n    (\n      {id, order, date, customer, total, paymentStatus, fulfillmentStatus},\n      index,\n    ) => (\n      <IndexTable.Row id={id} key={id} position={index}>\n        <IndexTable.Cell>\n          <Text variant=\"bodyMd\" fontWeight=\"bold\" as=\"span\">\n            {order}\n          </Text>\n        </IndexTable.Cell>\n        <IndexTable.Cell>{date}</IndexTable.Cell>\n        <IndexTable.Cell>{customer}</IndexTable.Cell>\n        <IndexTable.Cell>{total}</IndexTable.Cell>\n        <IndexTable.Cell>{paymentStatus}</IndexTable.Cell>\n        <IndexTable.Cell>{fulfillmentStatus}</IndexTable.Cell>\n      </IndexTable.Row>\n    ),\n  );\n\n  return (\n    <LegacyCard>\n      <IndexTable\n        resourceName={resourceName}\n        itemCount={orders.length}\n        headings={[\n          {title: 'Order'},\n          {title: 'Date'},\n          {title: 'Customer'},\n          {title: 'Total', alignment: 'end'},\n          {title: 'Payment status'},\n          {title: 'Fulfillment status'},\n        ]}\n        selectable={false}\n      >\n        {rowMarkup}\n      </IndexTable>\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"index-table-with-subheaders.tsx","title":"With subheaders","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"An index table with multiple table headers. Use to present merchants with resources grouped by a relevant data value to enable faster bulk selection.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  LegacyCard,\n  Text,\n  useIndexResourceState,\n  IndexTable,\n} from '@shopify/polaris';\nimport type {IndexTableRowProps, IndexTableProps} from '@shopify/polaris';\nimport React, {Fragment} from 'react';\n\nexport function WithSubHeadersExample() {\n  interface Customer {\n    id: string;\n    url: string;\n    name: string;\n    location: string;\n    orders: number;\n    amountSpent: string;\n    lastOrderDate: string;\n    disabled?: boolean;\n  }\n\n  interface CustomerRow extends Customer {\n    position: number;\n  }\n\n  interface CustomerGroup {\n    id: string;\n    position: number;\n    customers: CustomerRow[];\n  }\n\n  interface Groups {\n    [key: string]: CustomerGroup;\n  }\n\n  const rows = [\n    {\n      id: '3411',\n      url: '#',\n      name: 'Mae Jemison',\n      location: 'Decatur, USA',\n      orders: 11,\n      amountSpent: '$2,400',\n      lastOrderDate: 'May 31, 2023',\n    },\n    {\n      id: '2562',\n      url: '#',\n      name: 'Ellen Ochoa',\n      location: 'Los Angeles, USA',\n      orders: 30,\n      amountSpent: '$975',\n      lastOrderDate: 'May 31, 2023',\n    },\n    {\n      id: '4102',\n      url: '#',\n      name: 'Colm Dillane',\n      location: 'New York, USA',\n      orders: 27,\n      amountSpent: '$2885',\n      lastOrderDate: 'May 31, 2023',\n    },\n    {\n      id: '2564',\n      url: '#',\n      name: 'Al Chemist',\n      location: 'New York, USA',\n      orders: 19,\n      amountSpent: '$1,209',\n      lastOrderDate: 'April 4, 2023',\n      disabled: true,\n    },\n    {\n      id: '2563',\n      url: '#',\n      name: 'Larry June',\n      location: 'San Francisco, USA',\n      orders: 22,\n      amountSpent: '$1,400',\n      lastOrderDate: 'March 19, 2023',\n    },\n  ];\n\n  const columnHeadings = [\n    {title: 'Name', id: 'name'},\n    {title: 'Location', id: 'location'},\n    {\n      alignment: 'end',\n      id: 'order-count',\n      title: 'Order count',\n    },\n    {\n      alignment: 'end',\n      hidden: false,\n      id: 'amount-spent',\n      title: 'Amount spent',\n    },\n  ];\n\n  const groupRowsByLastOrderDate = () => {\n    let position = -1;\n    const groups: Groups = (rows as Customer[]).reduce(\n      (groups: Groups, customer: Customer) => {\n        const {lastOrderDate} = customer;\n        if (!groups[lastOrderDate]) {\n          position += 1;\n\n          groups[lastOrderDate] = {\n            position,\n            customers: [],\n            id: `order-${lastOrderDate.split(' ').join('-')}`,\n          };\n        }\n\n        groups[lastOrderDate].customers.push({\n          ...customer,\n          position: position + 1,\n        });\n\n        position += 1;\n        return groups;\n      },\n      {},\n    );\n\n    return groups;\n  };\n\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(rows, {resourceFilter: ({disabled}) => !disabled});\n\n  const orders = groupRowsByLastOrderDate();\n\n  const rowMarkup = Object.keys(orders).map((orderDate, index) => {\n    const {customers, position, id: subheaderId} = orders[orderDate];\n    let selected: IndexTableRowProps['selected'] = false;\n\n    const someCustomersSelected = customers.some(({id}) =>\n      selectedResources.includes(id),\n    );\n\n    const allCustomersSelected = customers.every(({id}) =>\n      selectedResources.includes(id),\n    );\n\n    if (allCustomersSelected) {\n      selected = true;\n    } else if (someCustomersSelected) {\n      selected = 'indeterminate';\n    }\n\n    const selectableRows = rows.filter(({disabled}) => !disabled);\n    const childRowRange: IndexTableRowProps['selectionRange'] = [\n      selectableRows.findIndex((row) => row.id === customers[0].id),\n      selectableRows.findIndex(\n        (row) => row.id === customers[customers.length - 1].id,\n      ),\n    ];\n\n    return (\n      <Fragment key={subheaderId}>\n        <IndexTable.Row\n          rowType=\"subheader\"\n          selectionRange={childRowRange}\n          id={subheaderId}\n          position={position}\n          selected={selected}\n          disabled={index === 1}\n        >\n          <IndexTable.Cell\n            colSpan={4}\n            scope=\"colgroup\"\n            as=\"th\"\n            id={subheaderId}\n          >\n            {`Last order placed: ${orderDate}`}\n          </IndexTable.Cell>\n        </IndexTable.Row>\n        {customers.map(\n          (\n            {id, name, location, orders, amountSpent, position, disabled},\n            rowIndex,\n          ) => {\n            return (\n              <IndexTable.Row\n                key={rowIndex}\n                id={id}\n                position={position}\n                selected={selectedResources.includes(id)}\n                disabled={disabled}\n              >\n                <IndexTable.Cell\n                  headers={`${columnHeadings[0].id} ${subheaderId}`}\n                >\n                  <Text variant=\"bodyMd\" fontWeight=\"semibold\" as=\"span\">\n                    {name}\n                  </Text>\n                </IndexTable.Cell>\n                <IndexTable.Cell>{location}</IndexTable.Cell>\n                <IndexTable.Cell>\n                  <Text as=\"span\" alignment=\"end\" numeric>\n                    {orders}\n                  </Text>\n                </IndexTable.Cell>\n                <IndexTable.Cell>\n                  <Text as=\"span\" alignment=\"end\" numeric>\n                    {amountSpent}\n                  </Text>\n                </IndexTable.Cell>\n              </IndexTable.Row>\n            );\n          },\n        )}\n      </Fragment>\n    );\n  });\n\n  return (\n    <LegacyCard>\n      <IndexTable\n        onSelectionChange={handleSelectionChange}\n        selectedItemsCount={\n          allResourcesSelected ? 'All' : selectedResources.length\n        }\n        resourceName={resourceName}\n        itemCount={rows.length}\n        headings={columnHeadings as IndexTableProps['headings']}\n      >\n        {rowMarkup}\n      </IndexTable>\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"index-table-with-pagination.tsx","title":"With pagination","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when the table contains many rows and they need paginating.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  IndexTable,\n  LegacyCard,\n  useIndexResourceState,\n  Text,\n  Badge,\n} from '@shopify/polaris';\nimport React from 'react';\n\nfunction IndexTableWithPaginationExample() {\n  const orders = [\n    {\n      id: '1020',\n      order: '#1020',\n      date: 'Jul 20 at 4:34pm',\n      customer: 'Jaydon Stanton',\n      total: '$969.44',\n      paymentStatus: <Badge progress=\"complete\">Paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n    {\n      id: '1019',\n      order: '#1019',\n      date: 'Jul 20 at 3:46pm',\n      customer: 'Ruben Westerfelt',\n      total: '$701.19',\n      paymentStatus: <Badge progress=\"partiallyComplete\">Partially paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n    {\n      id: '1018',\n      order: '#1018',\n      date: 'Jul 20 at 3.44pm',\n      customer: 'Leo Carder',\n      total: '$798.24',\n      paymentStatus: <Badge progress=\"complete\">Paid</Badge>,\n      fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>,\n    },\n  ];\n  const resourceName = {\n    singular: 'order',\n    plural: 'orders',\n  };\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(orders);\n\n  const rowMarkup = orders.map(\n    (\n      {id, order, date, customer, total, paymentStatus, fulfillmentStatus},\n      index,\n    ) => (\n      <IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n      >\n        <IndexTable.Cell>\n          <Text variant=\"bodyMd\" fontWeight=\"bold\" as=\"span\">\n            {order}\n          </Text>\n        </IndexTable.Cell>\n        <IndexTable.Cell>{date}</IndexTable.Cell>\n        <IndexTable.Cell>{customer}</IndexTable.Cell>\n        <IndexTable.Cell>{total}</IndexTable.Cell>\n        <IndexTable.Cell>{paymentStatus}</IndexTable.Cell>\n        <IndexTable.Cell>{fulfillmentStatus}</IndexTable.Cell>\n      </IndexTable.Row>\n    ),\n  );\n\n  return (\n    <LegacyCard>\n      <IndexTable\n        resourceName={resourceName}\n        itemCount={orders.length}\n        selectedItemsCount={\n          allResourcesSelected ? 'All' : selectedResources.length\n        }\n        onSelectionChange={handleSelectionChange}\n        headings={[\n          {title: 'Order'},\n          {title: 'Date'},\n          {title: 'Customer'},\n          {title: 'Total', alignment: 'end'},\n          {title: 'Payment status'},\n          {title: 'Fulfillment status'},\n        ]}\n        pagination={{\n          hasNext: true,\n          onNext: () => {},\n        }}\n      >\n        {rowMarkup}\n      </IndexTable>\n    </LegacyCard>\n  );\n}\n\n"}],"seoDescription":"An index table displays a collection of objects of the same type, like orders or products. The main job of an index table is to help merchants get an at-a-glance of the objects to perform actions or navigate to a full-page representation of it.","type":{"IndexTableProps":{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","name":"IndexTableProps","description":"","members":[{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"headings","value":"NonEmptyArray<IndexTableHeading>","description":""},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"promotedBulkActions","value":"(MenuGroupDescriptor | BulkAction)[]","description":"","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"bulkActions","value":"(ActionListSection | BulkAction)[]","description":"","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"children","value":"React.ReactNode","description":"","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"emptyState","value":"React.ReactNode","description":"","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"sort","value":"React.ReactNode","description":"","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"paginatedSelectAllActionText","value":"string","description":"","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"lastColumnSticky","value":"boolean","description":"","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"selectable","value":"boolean","description":"","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"sortable","value":"boolean[]","description":"List of booleans, which maps to whether sorting is enabled or not for each column. Defaults to false for all columns.","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"defaultSortDirection","value":"IndexTableSortDirection","description":"The direction to sort the table rows on first click or keypress of a sortable column heading. Defaults to descending.","isOptional":true,"defaultValue":"'descending'"},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"sortDirection","value":"IndexTableSortDirection","description":"The current sorting direction.","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"sortColumnIndex","value":"number","description":"The index of the heading that the table rows are sorted by.","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"MethodSignature","name":"onSort","value":"(headingIndex: number, direction: IndexTableSortDirection) => void","description":"Callback fired on click or keypress of a sortable column heading.","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"sortToggleLabels","value":"IndexTableSortToggleLabels","description":"Optional dictionary of sort toggle labels for each sortable column, with ascending and descending label,\nwith the key as the index of the column","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"hasZebraStriping","value":"boolean","description":"Add zebra striping to table rows","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"pagination","value":"IndexTablePaginationProps","description":"Properties to enable pagination at the bottom of the table.","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"itemCount","value":"number","description":""},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"selectedItemsCount","value":"number | \"All\"","description":"","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"resourceName","value":"{ singular: string; plural: string; }","description":"","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"loading","value":"boolean","description":"","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"hasMoreItems","value":"boolean","description":"","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"condensed","value":"boolean","description":"","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"MethodSignature","name":"onSelectionChange","value":"(selectionType: SelectionType, toggleType: boolean, selection?: string | Range, position?: number) => void","description":"","isOptional":true}],"value":"export interface IndexTableProps\n  extends IndexTableBaseProps,\n    IndexProviderProps {}"},"NonEmptyArray":{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"TypeAliasDeclaration","name":"NonEmptyArray","value":"[T, ...T[]]","description":""},"IndexTableHeading":{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"TypeAliasDeclaration","name":"IndexTableHeading","value":"IndexTableHeadingTitleString | IndexTableHeadingTitleNode","description":""},"IndexTableHeadingTitleString":{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","name":"IndexTableHeadingTitleString","description":"","members":[{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"title","value":"string","description":""},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"id","value":"string","description":"","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"alignment","value":"\"start\" | \"center\" | \"end\"","description":"Adjust horizontal alignment of header content.","isOptional":true,"defaultValue":"'start'"},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"flush","value":"boolean","description":"","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"new","value":"boolean","description":"","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"hidden","value":"boolean","description":"","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"tooltipContent","value":"React.ReactNode","description":"","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"tooltipWidth","value":"Width","description":"","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"tooltipPersistsOnClick","value":"boolean","description":"","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"defaultSortDirection","value":"IndexTableSortDirection","description":"The direction to sort the table rows on first click or keypress of this column heading.\nWhen not specified, the value from IndexTable.defaultSortDirection will be used.","isOptional":true}],"value":"interface IndexTableHeadingTitleString extends IndexTableHeadingBase {\n  title: string;\n  id?: string;\n}"},"Width":{"filePath":"polaris-react/src/components/Tooltip/Tooltip.tsx","syntaxKind":"TypeAliasDeclaration","name":"Width","value":"'default' | 'wide'","description":""},"IndexTableSortDirection":{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"TypeAliasDeclaration","name":"IndexTableSortDirection","value":"'ascending' | 'descending'","description":""},"IndexTableHeadingTitleNode":{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","name":"IndexTableHeadingTitleNode","description":"","members":[{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"title","value":"React.ReactNode","description":""},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"id","value":"string","description":""},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"alignment","value":"\"start\" | \"center\" | \"end\"","description":"Adjust horizontal alignment of header content.","isOptional":true,"defaultValue":"'start'"},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"flush","value":"boolean","description":"","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"new","value":"boolean","description":"","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"hidden","value":"boolean","description":"","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"tooltipContent","value":"React.ReactNode","description":"","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"tooltipWidth","value":"Width","description":"","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"tooltipPersistsOnClick","value":"boolean","description":"","isOptional":true},{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"PropertySignature","name":"defaultSortDirection","value":"IndexTableSortDirection","description":"The direction to sort the table rows on first click or keypress of this column heading.\nWhen not specified, the value from IndexTable.defaultSortDirection will be used.","isOptional":true}],"value":"interface IndexTableHeadingTitleNode extends IndexTableHeadingBase {\n  title: React.ReactNode;\n  id: string;\n}"},"MenuGroupDescriptor":{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"MenuGroupDescriptor","description":"","members":[{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"title","value":"string","description":"Menu group title"},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"actions","value":"ActionListItemDescriptor[]","description":"List of actions"},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"icon","value":"any","description":"Icon to display","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"details","value":"React.ReactNode","description":"Action details","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"disabled","value":"boolean","description":"Disables action button","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"index","value":"number","description":"Zero-indexed numerical position. Overrides the group's order in the menu.","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"onActionAnyItem","value":"() => void","description":"Callback when any action takes place","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"MethodSignature","name":"onClick","value":"(openActions: () => void) => void","description":"Callback when the menu is clicked","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"badge","value":"{ tone: \"new\"; content: string; }","description":"","isOptional":true}],"value":"export interface MenuGroupDescriptor extends BadgeAction {\n  /** Menu group title */\n  title: string;\n  /** List of actions */\n  actions: ActionListItemDescriptor[];\n  /** Icon to display */\n  icon?: IconableAction['icon'];\n  /** Action details */\n  details?: React.ReactNode;\n  /** Disables action button */\n  disabled?: boolean;\n  /** Zero-indexed numerical position. Overrides the group's order in the menu. */\n  index?: number;\n  /** Callback when any action takes place */\n  onActionAnyItem?: ActionListItemDescriptor['onAction'];\n  /** Callback when the menu is clicked */\n  onClick?(openActions: () => void): void;\n}"},"ActionListItemDescriptor":{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"ActionListItemDescriptor","description":"","members":[{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"accessibilityLabel","value":"string","description":"Visually hidden text for screen readers","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"badge","value":"{ tone: \"new\"; content: string; }","description":"","isOptional":true,"deprecationMessage":"Badge component"},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"helpText","value":"React.ReactNode","description":"Additional hint text to display with item","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"icon","value":"any","description":"","isOptional":true,"deprecationMessage":"Source of the icon"},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"image","value":"string","description":"","isOptional":true,"deprecationMessage":"Image source"},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"prefix","value":"React.ReactNode","description":"Prefix source","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"suffix","value":"React.ReactNode","description":"Suffix source","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"ellipsis","value":"boolean","description":"","isOptional":true,"deprecationMessage":"Add an ellipsis suffix to action content. ellipsis appends `...` without truncating. Use truncate instead."},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"truncate","value":"boolean","description":"Truncate the action content either at the beginning or at the end","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"active","value":"boolean","description":"Whether the action is active or not","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"variant","value":"\"default\" | \"menu\" | \"indented\"","description":"The item variations","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"role","value":"string","description":"Defines a role for the action","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"disabled","value":"boolean","description":"Whether or not the action is disabled","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"id","value":"string","description":"A unique identifier for the action","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"content","value":"string","description":"Content the action displays","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"url","value":"string","description":"A destination to link to, rendered in the action","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"external","value":"boolean","description":"Forces url to open in a new tab","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"target","value":"Target","description":"Where to display the url","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"MethodSignature","name":"onAction","value":"() => void","description":"Callback when an action takes place","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"MethodSignature","name":"onMouseEnter","value":"() => void","description":"Callback when mouse enter","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"MethodSignature","name":"onTouchStart","value":"() => void","description":"Callback when element is touched","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"destructive","value":"boolean","description":"Destructive action","isOptional":true}],"value":"export interface ActionListItemDescriptor\n  extends DisableableAction,\n    DestructableAction {\n  /** Visually hidden text for screen readers */\n  accessibilityLabel?: string;\n  /** @deprecated Badge component */\n  badge?: {\n    tone: 'new';\n    content: string;\n  };\n  /** Additional hint text to display with item */\n  helpText?: React.ReactNode;\n  /** @deprecated Source of the icon */\n  icon?: IconSource;\n  /** @deprecated Image source */\n  image?: string;\n  /** Prefix source */\n  prefix?: React.ReactNode;\n  /** Suffix source */\n  suffix?: React.ReactNode;\n  /** @deprecated Add an ellipsis suffix to action content. ellipsis appends `...` without truncating. Use truncate instead. */\n  ellipsis?: boolean;\n  /** Truncate the action content either at the beginning or at the end */\n  truncate?: boolean;\n  /** Whether the action is active or not */\n  active?: boolean;\n  /** The item variations */\n  variant?: 'default' | 'menu' | 'indented';\n  /** Defines a role for the action */\n  role?: string;\n}"},"Target":{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"TypeAliasDeclaration","name":"Target","value":"'_blank' | '_self' | '_parent' | '_top'","description":""},"BulkAction":{"filePath":"polaris-react/src/components/BulkActions/BulkActions.tsx","syntaxKind":"TypeAliasDeclaration","name":"BulkAction","value":"DisableableAction & BadgeAction","description":""},"DisableableAction":{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"DisableableAction","description":"","members":[{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"disabled","value":"boolean","description":"Whether or not the action is disabled","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"id","value":"string","description":"A unique identifier for the action","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"content","value":"string","description":"Content the action displays","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"accessibilityLabel","value":"string","description":"Visually hidden text for screen readers","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"url","value":"string","description":"A destination to link to, rendered in the action","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"external","value":"boolean","description":"Forces url to open in a new tab","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"target","value":"Target","description":"Where to display the url","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"MethodSignature","name":"onAction","value":"() => void","description":"Callback when an action takes place","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"MethodSignature","name":"onMouseEnter","value":"() => void","description":"Callback when mouse enter","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"MethodSignature","name":"onTouchStart","value":"() => void","description":"Callback when element is touched","isOptional":true}],"value":"export interface DisableableAction extends Action {\n  /** Whether or not the action is disabled */\n  disabled?: boolean;\n}"},"BadgeAction":{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"BadgeAction","description":"","members":[{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"badge","value":"{ tone: \"new\"; content: string; }","description":"","isOptional":true}],"value":"export interface BadgeAction {\n  badge?: {\n    tone: 'new';\n    content: string;\n  };\n}"},"ActionListSection":{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"ActionListSection","description":"","members":[{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"title","value":"any","description":"Section title","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"items","value":"readonly ActionListItemDescriptor[]","description":"Collection of action items for the list"}],"value":"export interface ActionListSection {\n  /** Section title */\n  title?: string | React.ReactNode;\n  /** Collection of action items for the list */\n  items: readonly ActionListItemDescriptor[];\n}"},"IndexTableSortToggleLabels":{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","name":"IndexTableSortToggleLabels","description":"","members":[{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","name":"[key: number]","value":"IndexTableSortToggleLabel"}],"value":"interface IndexTableSortToggleLabels {\n  [key: number]: IndexTableSortToggleLabel;\n}"},"IndexTableSortToggleLabel":{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"TypeAliasDeclaration","name":"IndexTableSortToggleLabel","value":"{\n  [key in IndexTableSortDirection]: string;\n}","description":""},"IndexTablePaginationProps":{"filePath":"polaris-react/src/components/IndexTable/IndexTable.tsx","syntaxKind":"TypeAliasDeclaration","name":"IndexTablePaginationProps","value":"Omit<PaginationProps, 'type'>","description":""},"PaginationProps":{"filePath":"polaris-react/src/components/Pagination/Pagination.tsx","name":"PaginationProps","description":"","members":[{"filePath":"polaris-react/src/components/Pagination/Pagination.tsx","syntaxKind":"PropertySignature","name":"nextKeys","value":"Key[]","description":"Keyboard shortcuts for the next button","isOptional":true},{"filePath":"polaris-react/src/components/Pagination/Pagination.tsx","syntaxKind":"PropertySignature","name":"previousKeys","value":"Key[]","description":"Keyboard shortcuts for the previous button","isOptional":true},{"filePath":"polaris-react/src/components/Pagination/Pagination.tsx","syntaxKind":"PropertySignature","name":"nextTooltip","value":"string","description":"Tooltip for the next button","isOptional":true},{"filePath":"polaris-react/src/components/Pagination/Pagination.tsx","syntaxKind":"PropertySignature","name":"previousTooltip","value":"string","description":"Tooltip for the previous button","isOptional":true},{"filePath":"polaris-react/src/components/Pagination/Pagination.tsx","syntaxKind":"PropertySignature","name":"nextURL","value":"string","description":"The URL of the next page","isOptional":true},{"filePath":"polaris-react/src/components/Pagination/Pagination.tsx","syntaxKind":"PropertySignature","name":"previousURL","value":"string","description":"The URL of the previous page","isOptional":true},{"filePath":"polaris-react/src/components/Pagination/Pagination.tsx","syntaxKind":"PropertySignature","name":"hasNext","value":"boolean","description":"Whether there is a next page to show","isOptional":true},{"filePath":"polaris-react/src/components/Pagination/Pagination.tsx","syntaxKind":"PropertySignature","name":"hasPrevious","value":"boolean","description":"Whether there is a previous page to show","isOptional":true},{"filePath":"polaris-react/src/components/Pagination/Pagination.tsx","syntaxKind":"PropertySignature","name":"accessibilityLabel","value":"string","description":"Accessible label for the pagination","isOptional":true},{"filePath":"polaris-react/src/components/Pagination/Pagination.tsx","syntaxKind":"PropertySignature","name":"accessibilityLabels","value":"AccessibilityLabels","description":"Accessible labels for the buttons and UnstyledLinks","isOptional":true},{"filePath":"polaris-react/src/components/Pagination/Pagination.tsx","syntaxKind":"MethodSignature","name":"onNext","value":"() => void","description":"Callback when next button is clicked","isOptional":true},{"filePath":"polaris-react/src/components/Pagination/Pagination.tsx","syntaxKind":"MethodSignature","name":"onPrevious","value":"() => void","description":"Callback when previous button is clicked","isOptional":true},{"filePath":"polaris-react/src/components/Pagination/Pagination.tsx","syntaxKind":"PropertySignature","name":"label","value":"React.ReactNode","description":"Text to provide more context in between the arrow buttons","isOptional":true},{"filePath":"polaris-react/src/components/Pagination/Pagination.tsx","syntaxKind":"PropertySignature","name":"type","value":"\"table\" | \"page\"","description":"Layout structure of the component","isOptional":true}],"value":"export interface PaginationProps {\n  /** Keyboard shortcuts for the next button */\n  nextKeys?: Key[];\n  /** Keyboard shortcuts for the previous button */\n  previousKeys?: Key[];\n  /** Tooltip for the next button */\n  nextTooltip?: string;\n  /** Tooltip for the previous button */\n  previousTooltip?: string;\n  /** The URL of the next page */\n  nextURL?: string;\n  /** The URL of the previous page */\n  previousURL?: string;\n  /** Whether there is a next page to show */\n  hasNext?: boolean;\n  /** Whether there is a previous page to show */\n  hasPrevious?: boolean;\n  /** Accessible label for the pagination */\n  accessibilityLabel?: string;\n  /** Accessible labels for the buttons and UnstyledLinks */\n  accessibilityLabels?: AccessibilityLabels;\n  /** Callback when next button is clicked */\n  onNext?(): void;\n  /** Callback when previous button is clicked */\n  onPrevious?(): void;\n  /** Text to provide more context in between the arrow buttons */\n  label?: React.ReactNode;\n  /** Layout structure of the component */\n  type?: 'page' | 'table';\n}"},"Key":{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"EnumDeclaration","name":"Key","value":"export enum Key {\n  Backspace = 8,\n  Tab = 9,\n  Enter = 13,\n  Shift = 16,\n  Ctrl = 17,\n  Alt = 18,\n  Pause = 19,\n  CapsLock = 20,\n  Escape = 27,\n  Space = 32,\n  PageUp = 33,\n  PageDown = 34,\n  End = 35,\n  Home = 36,\n  LeftArrow = 37,\n  UpArrow = 38,\n  RightArrow = 39,\n  DownArrow = 40,\n  Insert = 45,\n  Delete = 46,\n  Key0 = 48,\n  Key1 = 49,\n  Key2 = 50,\n  Key3 = 51,\n  Key4 = 52,\n  Key5 = 53,\n  Key6 = 54,\n  Key7 = 55,\n  Key8 = 56,\n  Key9 = 57,\n  KeyA = 65,\n  KeyB = 66,\n  KeyC = 67,\n  KeyD = 68,\n  KeyE = 69,\n  KeyF = 70,\n  KeyG = 71,\n  KeyH = 72,\n  KeyI = 73,\n  KeyJ = 74,\n  KeyK = 75,\n  KeyL = 76,\n  KeyM = 77,\n  KeyN = 78,\n  KeyO = 79,\n  KeyP = 80,\n  KeyQ = 81,\n  KeyR = 82,\n  KeyS = 83,\n  KeyT = 84,\n  KeyU = 85,\n  KeyV = 86,\n  KeyW = 87,\n  KeyX = 88,\n  KeyY = 89,\n  KeyZ = 90,\n  LeftMeta = 91,\n  RightMeta = 92,\n  Select = 93,\n  Numpad0 = 96,\n  Numpad1 = 97,\n  Numpad2 = 98,\n  Numpad3 = 99,\n  Numpad4 = 100,\n  Numpad5 = 101,\n  Numpad6 = 102,\n  Numpad7 = 103,\n  Numpad8 = 104,\n  Numpad9 = 105,\n  Multiply = 106,\n  Add = 107,\n  Subtract = 109,\n  Decimal = 110,\n  Divide = 111,\n  F1 = 112,\n  F2 = 113,\n  F3 = 114,\n  F4 = 115,\n  F5 = 116,\n  F6 = 117,\n  F7 = 118,\n  F8 = 119,\n  F9 = 120,\n  F10 = 121,\n  F11 = 122,\n  F12 = 123,\n  NumLock = 144,\n  ScrollLock = 145,\n  Semicolon = 186,\n  Equals = 187,\n  Comma = 188,\n  Dash = 189,\n  Period = 190,\n  ForwardSlash = 191,\n  GraveAccent = 192,\n  OpenBracket = 219,\n  BackSlash = 220,\n  CloseBracket = 221,\n  SingleQuote = 222,\n}","members":[{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Backspace","value":8},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Tab","value":9},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Enter","value":13},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Shift","value":16},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Ctrl","value":17},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Alt","value":18},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Pause","value":19},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"CapsLock","value":20},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Escape","value":27},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Space","value":32},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"PageUp","value":33},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"PageDown","value":34},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"End","value":35},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Home","value":36},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"LeftArrow","value":37},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"UpArrow","value":38},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"RightArrow","value":39},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"DownArrow","value":40},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Insert","value":45},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Delete","value":46},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Key0","value":48},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Key1","value":49},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Key2","value":50},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Key3","value":51},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Key4","value":52},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Key5","value":53},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Key6","value":54},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Key7","value":55},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Key8","value":56},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Key9","value":57},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"KeyA","value":65},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"KeyB","value":66},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"KeyC","value":67},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"KeyD","value":68},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"KeyE","value":69},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"KeyF","value":70},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"KeyG","value":71},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"KeyH","value":72},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"KeyI","value":73},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"KeyJ","value":74},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"KeyK","value":75},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"KeyL","value":76},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"KeyM","value":77},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"KeyN","value":78},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"KeyO","value":79},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"KeyP","value":80},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"KeyQ","value":81},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"KeyR","value":82},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"KeyS","value":83},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"KeyT","value":84},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"KeyU","value":85},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"KeyV","value":86},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"KeyW","value":87},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"KeyX","value":88},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"KeyY","value":89},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"KeyZ","value":90},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"LeftMeta","value":91},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"RightMeta","value":92},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Select","value":93},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Numpad0","value":96},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Numpad1","value":97},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Numpad2","value":98},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Numpad3","value":99},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Numpad4","value":100},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Numpad5","value":101},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Numpad6","value":102},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Numpad7","value":103},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Numpad8","value":104},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Numpad9","value":105},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Multiply","value":106},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Add","value":107},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Subtract","value":109},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Decimal","value":110},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Divide","value":111},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"F1","value":112},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"F2","value":113},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"F3","value":114},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"F4","value":115},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"F5","value":116},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"F6","value":117},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"F7","value":118},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"F8","value":119},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"F9","value":120},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"F10","value":121},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"F11","value":122},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"F12","value":123},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"NumLock","value":144},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"ScrollLock","value":145},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Semicolon","value":186},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Equals","value":187},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Comma","value":188},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Dash","value":189},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Period","value":190},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"ForwardSlash","value":191},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"GraveAccent","value":192},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"OpenBracket","value":219},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"BackSlash","value":220},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"CloseBracket","value":221},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"SingleQuote","value":222}]},"AccessibilityLabels":{"filePath":"polaris-react/src/components/Pagination/Pagination.tsx","name":"AccessibilityLabels","description":"","members":[{"filePath":"polaris-react/src/components/Pagination/Pagination.tsx","syntaxKind":"PropertySignature","name":"previous","value":"string","description":""},{"filePath":"polaris-react/src/components/Pagination/Pagination.tsx","syntaxKind":"PropertySignature","name":"next","value":"string","description":""}],"value":"interface AccessibilityLabels {\n  previous: string;\n  next: string;\n}"}},"editPageLinkPath":"polaris.shopify.com/content/components/tables/index-table.mdx"},"__N_SSG":true}