{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    hr: \"hr\",\n    h3: \"h3\",\n    h4: \"h4\",\n    a: \"a\",\n    code: \"code\"\n  }, _provideComponents(), props.components), {Lede, Examples, Props, DoDont} = _components;\n  if (!DoDont) _missingMdxReference(\"DoDont\", true);\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"Popovers are small overlays that open on demand. They let merchants access additional content and actions without cluttering the page.\"\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Popovers should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Always be positioned next to the button or other interface element that triggers them\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Be used for secondary or less important information and actions since they’re hidden until merchants hit the trigger\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Contain navigation or actions that share a relationships to each other\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Be triggered by a clearly labeled button\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"content-guidelines\",\n      children: \"Content guidelines\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"popover-content\",\n      children: \"Popover content\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If a popover contains actions, they should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Be clear and predictable: merchants should be able to anticipate what will happen when they click on an action item. Never deceive merchants by mislabeling an action.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Create order\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Buy shipping label\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"New order\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Buy\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Be action-led: buttons should always lead with a strong verb that encourages action. To provide enough context to merchants use the {verb}+{noun} format on buttons except in the case of common actions like Save, Close, Cancel, or OK.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-1\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Rename\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Edit HTML\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Duplicate\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont-1\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"HTML editing options\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"File name changes\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Duplicate this order so that you can make edits, updates, or changes\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Be scannable, especially when the popover contains a list of actions or options. Avoid unnecessary words and articles such as “the”, “an”, or “a”.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-2\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Add menu item\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont-2\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Add a menu item\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If the popover includes a series of navigational links, each item should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Be concise but still give merchants enough information so they can easily find and accurately navigate to the path they want.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-3\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Online store\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Messenger\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Facebook\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Buy Button\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont-3\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Sales channel\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"related-components\",\n      children: \"Related components\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"To put a list of actions in a popover, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/action-list\",\n          children: \"use the action list component\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To let merchants select simple options from a list, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/select\",\n          children: \"use the select component\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"accessibility\",\n      children: \"Accessibility\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Popovers usually contain an \", _jsx(_components.a, {\n        href: \"https://polaris.shopify.com/components/option-list\",\n        children: \"option list\"\n      }), \" or an \", _jsx(_components.a, {\n        href: \"https://polaris.shopify.com/components/action-list\",\n        children: \"action list\"\n      }), \", but can also contain other controls or content.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To assist screen readers with sending focus to an \", _jsx(_components.a, {\n        href: \"https://polaris.shopify.com/components/action-list\",\n        children: \"action list\"\n      }), \", pass \", _jsx(_components.code, {\n        children: \"autofocusTarget='first-node'\"\n      }), \" to \", _jsx(_components.code, {\n        children: \"Popover\"\n      }), \". This will avoid known issues a screen reader may have with keyboard support once focus is moved off the activator.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Web browsers assign a default value of 'menu' to the \", _jsx(_components.code, {\n        children: \"aria-haspopup\"\n      }), \" role. You can use the prop \", _jsx(_components.code, {\n        children: \"ariaHaspopup\"\n      }), \" to specify a value. Screen readers may fail to send focus to the \", _jsx(_components.code, {\n        children: \"Popover\"\n      }), \" content when they expect the content to be adjacent to the element with \", _jsx(_components.code, {\n        children: \"aria-haspopup\"\n      }), \" in the DOM tree. In this scenario, it is recommended not to provide the \", _jsx(_components.code, {\n        children: \"ariaHaspopup\"\n      }), \" prop.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"keyboard-support\",\n      children: \"Keyboard support\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"When a popover opens, focus moves to the first focusable element or to the popover container\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Once focus is in the popover, merchants can access controls in the popover using the \", _jsx(\"kbd\", {\n          children: \"tab\"\n        }), \" key (and \", _jsx(\"kbd\", {\n          children: \"shift\"\n        }), \" + \", _jsx(\"kbd\", {\n          children: \"tab\"\n        }), \" backwards) and standard keystrokes for interacting\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Merchants can dismiss the popover by tabbing out of it, pressing the \", _jsx(\"kbd\", {\n          children: \"esc\"\n        }), \" key, or clicking outside of it\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"When the popover is closed, focus returns to the element that launched it\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Popover","shortDescription":"Small overlays that open on demand and close when the merchant interacts with any other part of Shopify. Used to surface secondary information or actions.","category":"Overlays","keywords":["interactive","container","dropdown","drop down","drop-down","popover","pop over","menu","fly out","select","action list","menu","context menu","popover with form components","popover with action list","popover with content and actions","action sheet"],"examples":[{"fileName":"popover-with-action-list.tsx","title":"With action list","description":"Use when presenting a set of actions in a disclosable menu."},{"fileName":"popover-with-content-and-actions.tsx","title":"With content and actions","description":"Use to present a combination of content, instructions, and actions in a panel for tasks that are of low or secondary importance to the current page. When used this way, popovers provide useful entry points to related features without overwhelming merchants."},{"fileName":"popover-with-form-components.tsx","title":"With form components","description":"Use to present secondary input tasks on demand."},{"fileName":"popover-with-lazy-loaded-list.tsx","title":"With lazy loaded list","description":"Use to present merchants with a list that dynamically loads more items on scroll or arrow down."},{"fileName":"popover-with-searchable-listbox.tsx","title":"With searchable listbox","description":"Use to help merchants browse, filter, and choose from a list of options."}],"previewImg":"/images/components/overlays/popover.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"popover-with-action-list.tsx","title":"With action list","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when presenting a set of actions in a disclosable menu.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Button, Popover, ActionList} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction PopoverWithActionListExample() {\n  const [popoverActive, setPopoverActive] = useState(true);\n\n  const togglePopoverActive = useCallback(\n    () => setPopoverActive((popoverActive) => !popoverActive),\n    [],\n  );\n\n  const activator = (\n    <Button onClick={togglePopoverActive} disclosure>\n      More actions\n    </Button>\n  );\n\n  return (\n    <div style={{height: '250px'}}>\n      <Popover\n        active={popoverActive}\n        activator={activator}\n        autofocusTarget=\"first-node\"\n        onClose={togglePopoverActive}\n      >\n        <ActionList\n          actionRole=\"menuitem\"\n          items={[{content: 'Import'}, {content: 'Export'}]}\n        />\n      </Popover>\n    </div>\n  );\n}\n\n"},{"fileName":"popover-with-content-and-actions.tsx","title":"With content and actions","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to present a combination of content, instructions, and actions in a panel for tasks that are of low or secondary importance to the current page. When used this way, popovers provide useful entry points to related features without overwhelming merchants.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Button, Popover, ActionList} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction PopoverContentExample() {\n  const [popoverActive, setPopoverActive] = useState(true);\n\n  const togglePopoverActive = useCallback(\n    () => setPopoverActive((popoverActive) => !popoverActive),\n    [],\n  );\n\n  const activator = (\n    <Button onClick={togglePopoverActive} disclosure>\n      Sales channels\n    </Button>\n  );\n\n  return (\n    <div style={{height: '250px'}}>\n      <Popover\n        active={popoverActive}\n        activator={activator}\n        autofocusTarget=\"first-node\"\n        onClose={togglePopoverActive}\n      >\n        <Popover.Pane fixed>\n          <Popover.Section>\n            <p>Available sales channels</p>\n          </Popover.Section>\n        </Popover.Pane>\n        <Popover.Pane>\n          <ActionList\n            actionRole=\"menuitem\"\n            items={[\n              {content: 'Online store'},\n              {content: 'Facebook'},\n              {content: 'Shopify POS'},\n            ]}\n          />\n        </Popover.Pane>\n      </Popover>\n    </div>\n  );\n}\n\n"},{"fileName":"popover-with-form-components.tsx","title":"With form components","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to present secondary input tasks on demand.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Button, Popover, FormLayout, Select, TextField} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction PopoverFormExample() {\n  const [popoverActive, setPopoverActive] = useState(true);\n  const [tagValue, setTagValue] = useState('');\n\n  const togglePopoverActive = useCallback(\n    () => setPopoverActive((popoverActive) => !popoverActive),\n    [],\n  );\n\n  const handleTagValueChange = useCallback(\n    (value: string) => setTagValue(value),\n    [],\n  );\n\n  const activator = (\n    <Button onClick={togglePopoverActive} disclosure>\n      Filter\n    </Button>\n  );\n\n  return (\n    <div style={{height: '280px'}}>\n      <Popover\n        active={popoverActive}\n        activator={activator}\n        onClose={togglePopoverActive}\n        ariaHaspopup={false}\n        sectioned\n      >\n        <FormLayout>\n          <Select label=\"Show all customers where:\" options={['Tagged with']} />\n          <TextField\n            label=\"Tags\"\n            value={tagValue}\n            onChange={handleTagValueChange}\n            autoComplete=\"off\"\n          />\n          <Button size=\"slim\">Add filter</Button>\n        </FormLayout>\n      </Popover>\n    </div>\n  );\n}\n\n"},{"fileName":"popover-with-lazy-loaded-list.tsx","title":"With lazy loaded list","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to present merchants with a list that dynamically loads more items on scroll or arrow down.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  Button,\n  LegacyCard,\n  Popover,\n  ResourceList,\n  Avatar,\n} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction PopoverLazyLoadExample() {\n  const [popoverActive, setPopoverActive] = useState(true);\n  const [visibleStaffIndex, setVisibleStaffIndex] = useState(5);\n  const staff = [\n    'Abbey Mayert',\n    'Abbi Senger',\n    'Abdul Goodwin',\n    'Abdullah Borer',\n    'Abe Nader',\n    'Abigayle Smith',\n    'Abner Torphy',\n    'Abraham Towne',\n    'Abraham Vik',\n    'Ada Fisher',\n    'Adah Pouros',\n    'Adam Waelchi',\n    'Adan Zemlak',\n    'Addie Wehner',\n    'Addison Wexler',\n    'Alex Hernandez',\n  ];\n\n  const togglePopoverActive = useCallback(\n    () => setPopoverActive((popoverActive) => !popoverActive),\n    [],\n  );\n\n  const handleScrolledToBottom = useCallback(() => {\n    const totalIndexes = staff.length;\n    const interval =\n      visibleStaffIndex + 3 < totalIndexes\n        ? 3\n        : totalIndexes - visibleStaffIndex;\n\n    if (interval > 0) {\n      setVisibleStaffIndex(visibleStaffIndex + interval);\n    }\n  }, [staff.length, visibleStaffIndex]);\n\n  const handleResourceListItemClick = useCallback(() => {}, []);\n\n  const activator = (\n    <Button onClick={togglePopoverActive} disclosure>\n      View staff\n    </Button>\n  );\n\n  const staffList = staff.slice(0, visibleStaffIndex).map((name) => ({\n    name,\n    initials: getInitials(name),\n  }));\n\n  return (\n    <LegacyCard sectioned>\n      <div style={{height: '280px'}}>\n        <Popover\n          sectioned\n          active={popoverActive}\n          activator={activator}\n          onClose={togglePopoverActive}\n          ariaHaspopup={false}\n        >\n          <Popover.Pane onScrolledToBottom={handleScrolledToBottom}>\n            <ResourceList items={staffList} renderItem={renderItem} />\n          </Popover.Pane>\n        </Popover>\n      </div>\n    </LegacyCard>\n  );\n\n  function renderItem({name, initials}: {name: string; initials: string}) {\n    return (\n      <ResourceList.Item\n        id={name}\n        media={<Avatar size=\"md\" name={name} initials={initials} />}\n        onClick={handleResourceListItemClick}\n      >\n        {name}\n      </ResourceList.Item>\n    );\n  }\n\n  function getInitials(name: string) {\n    return name\n      .split(' ')\n      .map((surnameOrFamilyName) => surnameOrFamilyName.slice(0, 1))\n      .join('');\n  }\n}\n\n"},{"fileName":"popover-with-searchable-listbox.tsx","title":"With searchable listbox","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to help merchants browse, filter, and choose from a list of options.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import React, {useState} from 'react';\nimport {\n  Listbox,\n  TextField,\n  Icon,\n  Link,\n  Popover,\n  AutoSelection,\n  Scrollable,\n  EmptySearchResult,\n  Text,\n} from '@shopify/polaris';\nimport {SearchMinor} from '@shopify/polaris-icons';\n\n\nconst actionValue = '__ACTION__';\n\nconst segments = [\n  {\n    label: 'All customers',\n    id: 'gid://shopify/CustomerSegment/1',\n    value: '0',\n  },\n  {\n    label: 'VIP customers',\n    id: 'gid://shopify/CustomerSegment/2',\n    value: '1',\n  },\n  {\n    label: 'New customers',\n    id: 'gid://shopify/CustomerSegment/3',\n    value: '2',\n  },\n  {\n    label: 'Abandoned carts - last 30 days',\n    id: 'gid://shopify/CustomerSegment/4',\n    value: '3',\n  },\n  {\n    label: 'Wholesale customers',\n    id: 'gid://shopify/CustomerSegment/5',\n    value: '4',\n  },\n  {\n    label: 'Email subscribers',\n    id: 'gid://shopify/CustomerSegment/6',\n    value: '5',\n  },\n  {\n    label: 'From New York',\n    id: 'gid://shopify/CustomerSegment/7',\n    value: '6',\n  },\n  {\n    label: 'Repeat buyers',\n    id: 'gid://shopify/CustomerSegment/8',\n    value: '7',\n  },\n  {\n    label: 'First time buyers',\n    id: 'gid://shopify/CustomerSegment/9',\n    value: '8',\n  },\n  {\n    label: 'From Canada',\n    id: 'gid://shopify/CustomerSegment/10',\n    value: '9',\n  },\n  {\n    label: 'Bought in last 60 days',\n    id: 'gid://shopify/CustomerSegment/11',\n    value: '10',\n  },\n  {\n    label: 'Bought last BFCM',\n    id: 'gid://shopify/CustomerSegment/12',\n    value: '11',\n  },\n];\n\nconst lazyLoadSegments = Array.from(Array(100)).map((_, index) => ({\n  label: `Other customers ${index + 13}`,\n  id: `gid://shopify/CustomerSegment/${index + 13}`,\n  value: `${index + 12}`,\n}));\n\nsegments.push(...lazyLoadSegments);\n\nconst interval = 25;\n\nfunction PopoverWithSearchableListboxExample() {\n  const [pickerOpen, setPickerOpen] = useState(false);\n  const [showFooterAction, setShowFooterAction] = useState(true);\n  const [query, setQuery] = useState('');\n  const [lazyLoading, setLazyLoading] = useState(false);\n  const [willLoadMoreResults, setWillLoadMoreResults] = useState(true);\n  const [visibleOptionIndex, setVisibleOptionIndex] = useState(6);\n  const [activeOptionId, setActiveOptionId] = useState(segments[0].id);\n  const [selectedSegmentIndex, setSelectedSegmentIndex] = useState(0);\n  const [filteredSegments, setFilteredSegments] = useState<\n    typeof segments[number][]\n  >([]);\n\n  const handleClickShowAll = () => {\n    setShowFooterAction(false);\n    setVisibleOptionIndex(interval);\n  };\n\n  const handleFilterSegments = (query: string) => {\n    const nextFilteredSegments = segments.filter((segment) => {\n      return segment.label\n        .toLocaleLowerCase()\n        .includes(query.toLocaleLowerCase().trim());\n    });\n\n    setFilteredSegments(nextFilteredSegments);\n  };\n\n  const handleQueryChange = (query: string) => {\n    setQuery(query);\n\n    if (query.length >= 2) handleFilterSegments(query);\n  };\n\n  const handleQueryClear = () => {\n    handleQueryChange('');\n  };\n\n  const handleOpenPicker = () => {\n    setPickerOpen(true);\n  };\n\n  const handleClosePicker = () => {\n    setPickerOpen(false);\n    handleQueryChange('');\n  };\n\n  const handleSegmentSelect = (segmentIndex: string) => {\n    if (segmentIndex === actionValue) {\n      return handleClickShowAll();\n    }\n\n    setSelectedSegmentIndex(Number(segmentIndex));\n    handleClosePicker();\n  };\n\n  const handleActiveOptionChange = (_: string, domId: string) => {\n    setActiveOptionId(domId);\n  };\n\n  /* This is just to illustrate lazy loading state vs loading state. This is an example, so we aren't fetching from GraphQL. You'd use `pageInfo.hasNextPage` from your GraphQL query data instead of this fake \"willLoadMoreResults\" state along with setting `first` your GraphQL query's variables to your app's default max edges limit (e.g., 250). */\n\n  const handleLazyLoadSegments = () => {\n    if (willLoadMoreResults && !showFooterAction) {\n      setLazyLoading(true);\n\n      const options = query ? filteredSegments : segments;\n\n      setTimeout(() => {\n        const remainingOptionCount = options.length - visibleOptionIndex;\n        const nextVisibleOptionIndex =\n          remainingOptionCount >= interval\n            ? visibleOptionIndex + interval\n            : visibleOptionIndex + remainingOptionCount;\n\n        setLazyLoading(false);\n        setVisibleOptionIndex(nextVisibleOptionIndex);\n\n        if (remainingOptionCount <= interval) {\n          setWillLoadMoreResults(false);\n        }\n      }, 1000);\n    }\n  };\n\n  const listboxId = 'SearchableListboxInPopover';\n\n  /* Your app's feature/context specific activator here */\n  const activator = (\n    <div\n      style={{\n        fontSize: 'var(--p-font-size-500)',\n        color: 'var(--p-color-text)',\n        borderBottom: '1px dashed var(--p-color-border)',\n      }}\n    >\n      <Link monochrome removeUnderline onClick={handleOpenPicker}>\n        <Text as=\"h1\" variant=\"headingXl\">\n          {segments[selectedSegmentIndex].label}\n        </Text>\n      </Link>\n    </div>\n  );\n\n  const textFieldMarkup = (\n    <div style={{padding: '12px'}}>\n      <StopPropagation>\n        <TextField\n          focused={showFooterAction}\n          clearButton\n          labelHidden\n          label=\"Customer segments\"\n          placeholder=\"Search segments\"\n          autoComplete=\"off\"\n          value={query}\n          prefix={<Icon source={SearchMinor} />}\n          ariaActiveDescendant={activeOptionId}\n          ariaControls={listboxId}\n          onChange={handleQueryChange}\n          onClearButtonClick={handleQueryClear}\n        />\n      </StopPropagation>\n    </div>\n  );\n\n  const segmentOptions = query ? filteredSegments : segments;\n\n  const segmentList =\n    segmentOptions.length > 0\n      ? segmentOptions\n          .slice(0, visibleOptionIndex)\n          .map(({label, id, value}) => {\n            const selected = segments[selectedSegmentIndex].id === id;\n\n            return (\n              <Listbox.Option key={id} value={value} selected={selected}>\n                <Listbox.TextOption selected={selected}>\n                  {label}\n                </Listbox.TextOption>\n              </Listbox.Option>\n            );\n          })\n      : null;\n\n  const showAllMarkup = showFooterAction ? (\n    <Listbox.Action value={actionValue}>\n      <span style={{color: 'var(--p-color-text-emphasis)'}}>\n        Show all 111 segments\n      </span>\n    </Listbox.Action>\n  ) : null;\n\n  const lazyLoadingMarkup = lazyLoading ? (\n    <Listbox.Loading\n      accessibilityLabel={`${\n        query ? 'Filtering' : 'Loading'\n      } customer segments`}\n    />\n  ) : null;\n\n  const noResultsMarkup =\n    segmentOptions.length === 0 ? (\n      <EmptySearchResult\n        title=\"\"\n        description={`No segments found matching \"${query}\"`}\n      />\n    ) : null;\n\n  const listboxMarkup = (\n    <Listbox\n      enableKeyboardControl\n      autoSelection={AutoSelection.FirstSelected}\n      accessibilityLabel=\"Search for and select a customer segment\"\n      customListId={listboxId}\n      onSelect={handleSegmentSelect}\n      onActiveOptionChange={handleActiveOptionChange}\n    >\n      {segmentList}\n      {showAllMarkup}\n      {noResultsMarkup}\n      {lazyLoadingMarkup}\n    </Listbox>\n  );\n\n  return (\n    <div style={{height: '400px'}}>\n      <Popover\n        active={pickerOpen}\n        activator={activator}\n        ariaHaspopup=\"listbox\"\n        preferredAlignment=\"left\"\n        autofocusTarget=\"first-node\"\n        onClose={handleClosePicker}\n      >\n        <Popover.Pane fixed>\n          <div\n            style={{\n              alignItems: 'stretch',\n              borderTop: '1px solid #DFE3E8',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'stretch',\n              position: 'relative',\n              width: '100%',\n              height: '100%',\n              overflow: 'hidden',\n            }}\n          >\n            {textFieldMarkup}\n\n            <Scrollable\n              shadow\n              style={{\n                position: 'relative',\n                width: '310px',\n                height: '292px',\n                padding: 'var(--p-space-200) 0',\n                borderBottomLeftRadius: 'var(--p-border-radius-200)',\n                borderBottomRightRadius: 'var(--p-border-radius-200)',\n              }}\n              onScrolledToBottom={handleLazyLoadSegments}\n            >\n              {listboxMarkup}\n            </Scrollable>\n          </div>\n        </Popover.Pane>\n      </Popover>\n    </div>\n  );\n}\n\nconst StopPropagation = ({children}: React.PropsWithChildren<any>) => {\n  const stopEventPropagation = (event: React.MouseEvent | React.TouchEvent) => {\n    event.stopPropagation();\n  };\n\n  return (\n    <div onClick={stopEventPropagation} onTouchStart={stopEventPropagation}>\n      {children}\n    </div>\n  );\n};\n\n"}],"seoDescription":"Popovers are small overlays that open on demand. They let merchants access additional content and actions without cluttering the page.","type":{"PopoverProps":{"filePath":"polaris-react/src/components/Popover/Popover.tsx","name":"PopoverProps","description":"","members":[{"filePath":"polaris-react/src/components/Popover/Popover.tsx","syntaxKind":"PropertySignature","name":"children","value":"React.ReactNode","description":"The content to display inside the popover","isOptional":true},{"filePath":"polaris-react/src/components/Popover/Popover.tsx","syntaxKind":"PropertySignature","name":"preferredPosition","value":"PreferredPosition","description":"The preferred direction to open the popover","isOptional":true},{"filePath":"polaris-react/src/components/Popover/Popover.tsx","syntaxKind":"PropertySignature","name":"preferredAlignment","value":"PreferredAlignment","description":"The preferred alignment of the popover relative to its activator","isOptional":true},{"filePath":"polaris-react/src/components/Popover/Popover.tsx","syntaxKind":"PropertySignature","name":"active","value":"boolean","description":"Show or hide the Popover"},{"filePath":"polaris-react/src/components/Popover/Popover.tsx","syntaxKind":"PropertySignature","name":"activator","value":"React.ReactElement","description":"The element to activate the Popover"},{"filePath":"polaris-react/src/components/Popover/Popover.tsx","syntaxKind":"PropertySignature","name":"preferInputActivator","value":"boolean","description":"Use the activator's input element to calculate the Popover position","isOptional":true,"defaultValue":"true"},{"filePath":"polaris-react/src/components/Popover/Popover.tsx","syntaxKind":"PropertySignature","name":"activatorWrapper","value":"string","description":"The element type to wrap the activator with","isOptional":true,"defaultValue":"'div'"},{"filePath":"polaris-react/src/components/Popover/Popover.tsx","syntaxKind":"PropertySignature","name":"zIndexOverride","value":"number","description":"Override on the default z-index of 400","isOptional":true},{"filePath":"polaris-react/src/components/Popover/Popover.tsx","syntaxKind":"PropertySignature","name":"preventFocusOnClose","value":"boolean","description":"Prevents focusing the activator or the next focusable element when the popover is deactivated","isOptional":true},{"filePath":"polaris-react/src/components/Popover/Popover.tsx","syntaxKind":"PropertySignature","name":"sectioned","value":"boolean","description":"Automatically add wrap content in a section","isOptional":true},{"filePath":"polaris-react/src/components/Popover/Popover.tsx","syntaxKind":"PropertySignature","name":"fullWidth","value":"boolean","description":"Allow popover to stretch to the full width of its activator","isOptional":true},{"filePath":"polaris-react/src/components/Popover/Popover.tsx","syntaxKind":"PropertySignature","name":"fullHeight","value":"boolean","description":"Allow popover to stretch to fit content vertically","isOptional":true},{"filePath":"polaris-react/src/components/Popover/Popover.tsx","syntaxKind":"PropertySignature","name":"fluidContent","value":"boolean","description":"Allow popover content to determine the overlay width and height","isOptional":true},{"filePath":"polaris-react/src/components/Popover/Popover.tsx","syntaxKind":"PropertySignature","name":"fixed","value":"boolean","description":"Remains in a fixed position","isOptional":true},{"filePath":"polaris-react/src/components/Popover/Popover.tsx","syntaxKind":"PropertySignature","name":"ariaHaspopup","value":"boolean | \"false\" | \"true\" | \"menu\" | \"dialog\" | \"grid\" | \"listbox\" | \"tree\"","description":"Used to illustrate the type of popover element","isOptional":true},{"filePath":"polaris-react/src/components/Popover/Popover.tsx","syntaxKind":"PropertySignature","name":"hideOnPrint","value":"boolean","description":"Allow the popover overlay to be hidden when printing","isOptional":true},{"filePath":"polaris-react/src/components/Popover/Popover.tsx","syntaxKind":"MethodSignature","name":"onClose","value":"(source: PopoverCloseSource) => void","description":"Callback when popover is closed"},{"filePath":"polaris-react/src/components/Popover/Popover.tsx","syntaxKind":"PropertySignature","name":"autofocusTarget","value":"PopoverAutofocusTarget","description":"The preferred auto focus target defaulting to the popover container","isOptional":true,"defaultValue":"'container'"},{"filePath":"polaris-react/src/components/Popover/Popover.tsx","syntaxKind":"PropertySignature","name":"preventCloseOnChildOverlayClick","value":"boolean","description":"Prevents closing the popover when other overlays are clicked","isOptional":true},{"filePath":"polaris-react/src/components/Popover/Popover.tsx","syntaxKind":"PropertySignature","name":"captureOverscroll","value":"boolean","description":"Prevents page scrolling when the end of the scrollable Popover overlay content is reached - applied to Pane subcomponent","isOptional":true,"defaultValue":"false"}],"value":"export interface PopoverProps {\n  /** The content to display inside the popover */\n  children?: React.ReactNode;\n  /** The preferred direction to open the popover */\n  preferredPosition?: PopoverOverlayProps['preferredPosition'];\n  /** The preferred alignment of the popover relative to its activator */\n  preferredAlignment?: PopoverOverlayProps['preferredAlignment'];\n  /** Show or hide the Popover */\n  active: boolean;\n  /** The element to activate the Popover */\n  activator: React.ReactElement;\n  /**\n   * Use the activator's input element to calculate the Popover position\n   * @default true\n   */\n  preferInputActivator?: PopoverOverlayProps['preferInputActivator'];\n  /**\n   * The element type to wrap the activator with\n   * @default 'div'\n   */\n  activatorWrapper?: string;\n  /** Override on the default z-index of 400 */\n  zIndexOverride?: number;\n  /** Prevents focusing the activator or the next focusable element when the popover is deactivated */\n  preventFocusOnClose?: boolean;\n  /** Automatically add wrap content in a section */\n  sectioned?: boolean;\n  /** Allow popover to stretch to the full width of its activator */\n  fullWidth?: boolean;\n  /** Allow popover to stretch to fit content vertically */\n  fullHeight?: boolean;\n  /** Allow popover content to determine the overlay width and height */\n  fluidContent?: boolean;\n  /** Remains in a fixed position */\n  fixed?: boolean;\n  /** Used to illustrate the type of popover element */\n  ariaHaspopup?: AriaAttributes['aria-haspopup'];\n  /** Allow the popover overlay to be hidden when printing */\n  hideOnPrint?: boolean;\n  /** Callback when popover is closed */\n  onClose(source: PopoverCloseSource): void;\n  /**\n   * The preferred auto focus target defaulting to the popover container\n   * @default 'container'\n   */\n  autofocusTarget?: PopoverAutofocusTarget;\n  /** Prevents closing the popover when other overlays are clicked */\n  preventCloseOnChildOverlayClick?: boolean;\n  /**\n   * Prevents page scrolling when the end of the scrollable Popover overlay content is reached - applied to Pane subcomponent\n   * @default false\n   */\n  captureOverscroll?: boolean;\n}"},"PreferredPosition":{"filePath":"polaris-react/src/components/PositionedOverlay/utilities/math.ts","syntaxKind":"TypeAliasDeclaration","name":"PreferredPosition","value":"'above' | 'below' | 'mostSpace'","description":""},"PreferredAlignment":{"filePath":"polaris-react/src/components/PositionedOverlay/utilities/math.ts","syntaxKind":"TypeAliasDeclaration","name":"PreferredAlignment","value":"'left' | 'center' | 'right'","description":""},"PopoverCloseSource":{"filePath":"polaris-react/src/components/Popover/components/PopoverOverlay/PopoverOverlay.tsx","syntaxKind":"EnumDeclaration","name":"PopoverCloseSource","value":"export enum PopoverCloseSource {\n  Click,\n  EscapeKeypress,\n  FocusOut,\n  ScrollOut,\n}","members":[{"filePath":"polaris-react/src/components/Popover/components/PopoverOverlay/PopoverOverlay.tsx","name":"Click","value":0},{"filePath":"polaris-react/src/components/Popover/components/PopoverOverlay/PopoverOverlay.tsx","name":"EscapeKeypress","value":1},{"filePath":"polaris-react/src/components/Popover/components/PopoverOverlay/PopoverOverlay.tsx","name":"FocusOut","value":2},{"filePath":"polaris-react/src/components/Popover/components/PopoverOverlay/PopoverOverlay.tsx","name":"ScrollOut","value":3}]},"PopoverAutofocusTarget":{"filePath":"polaris-react/src/components/Popover/components/PopoverOverlay/PopoverOverlay.tsx","syntaxKind":"TypeAliasDeclaration","name":"PopoverAutofocusTarget","value":"'none' | 'first-node' | 'container'","description":""}},"editPageLinkPath":"polaris.shopify.com/content/components/overlays/popover.mdx"},"__N_SSG":true}