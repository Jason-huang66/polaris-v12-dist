{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    code: \"code\",\n    h4: \"h4\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    pre: \"pre\",\n    hr: \"hr\"\n  }, _provideComponents(), props.components), {Lede, Examples, Props, DoDont} = _components;\n  if (!DoDont) _missingMdxReference(\"DoDont\", true);\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"Icons are used to visually communicate core parts of the product and available actions. They can act as wayfinding tools to help merchants more easily understand where they are in the product, and common interaction patterns that are available.\"\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"accessibility\",\n      children: \"Accessibility\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Using icons can be a great help to merchants who have difficulties with reading, language, attention, and low vision.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If the icon appears without text, then use the \", _jsx(_components.code, {\n        children: \"accessibilityLabel\"\n      }), \" prop to give the icon a text alternative. This adds an \", _jsx(_components.code, {\n        children: \"aria-label\"\n      }), \" that’s conveyed to screen reader users.\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Pair text and icons for clarity\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Give the icon a text equivalent if its purpose isn’t conveyed in another way\"\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Review our \", _jsx(_components.a, {\n            href: \"https://polaris.shopify.com/content/alternative-text\",\n            children: \"alternative text\"\n          }), \" guidelines to make sure your use of icon works for all merchants\"]\n        }), \"\\n\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-jsx\",\n          children: \"<Icon source={OrdersMajor} />\\n<p>No orders yet</p>\\n\"\n        })\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-jsx\",\n          children: \"<Button icon={CirclePlusMinor}>Add a product</Button>\\n\"\n        })\n      }), _jsx(_components.h4, {\n        id: \"dont\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Describe what the icon looks like\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Include “icon” in the text equivalent\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Duplicate adjacent text in the alternative text\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Duplicate information provided programmatically\"\n        }), \"\\n\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-jsx\",\n          children: \"<Icon source={CirclePlusMinor} accessibilityLabel=\\\"Circle plus icon\\\" />\\n\"\n        })\n      })]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"related-guidelines\",\n      children: \"Related guidelines\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"To learn about implementing Polaris icons with \", _jsx(_components.a, {\n          href: \"https://github.com/Shopify/polaris-react\",\n          children: \"Polaris React\"\n        }), \" in your projects, see the \", _jsxs(_components.a, {\n          href: \"https://www.npmjs.com/package/@shopify/polaris-icons\",\n          children: [_jsx(_components.code, {\n            children: \"@shopify/polaris-icons\"\n          }), \" documentation\"]\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To learn about the best practices for designing and using icons in your projects, see the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/design/icons\",\n          children: \"icon design guidelines\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To learn how to name icons, see the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/content/naming#icons\",\n          children: \"icon naming guidelines\"\n        })]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Icon","shortDescription":"Used to visually communicate core parts of the product and available actions, acting as wayfinding tools.","category":"Images and icons","keywords":["iconography","visual indicator","svg","icon background","accessible icons","icon alternative text","alt text","alternative text","wayfinding","alert"],"examples":[{"fileName":"icon-default.tsx","title":"Default","description":"Use to visually communicate core parts of the product and available actions."},{"fileName":"icon-colored.tsx","title":"Colored","description":"Apply a color to the icon."},{"fileName":"icon-with-custom-svg.tsx","title":"With custom SVG","description":"Specify an SVG as a string to render it in an image tag, instead of an inline SVG to prevent script injection."},{"fileName":"icon-with-custom-svg-and-color.tsx","title":"With custom SVG and color","description":"When using changing color of an svg and it uses currentColor, the white color is applied."}],"previewImg":"/images/components/images-and-icons/icon.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"icon-default.tsx","title":"Default","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to visually communicate core parts of the product and available actions.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Icon} from '@shopify/polaris';\nimport {CirclePlusMinor} from '@shopify/polaris-icons';\nimport React from 'react';\n\nfunction IconExample() {\n  return <Icon source={CirclePlusMinor} />;\n}\n\n"},{"fileName":"icon-colored.tsx","title":"Colored","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Apply a color to the icon.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Icon} from '@shopify/polaris';\nimport {CirclePlusMinor} from '@shopify/polaris-icons';\nimport React from 'react';\n\nfunction IconExample() {\n  return (\n    <div>\n      <Icon source={CirclePlusMinor} tone=\"base\" />\n      <Icon source={CirclePlusMinor} tone=\"subdued\" />\n      <Icon source={CirclePlusMinor} tone=\"primary\" />\n      <Icon source={CirclePlusMinor} tone=\"info\" />\n      <Icon source={CirclePlusMinor} tone=\"success\" />\n      <Icon source={CirclePlusMinor} tone=\"caution\" />\n      <Icon source={CirclePlusMinor} tone=\"warning\" />\n      <Icon source={CirclePlusMinor} tone=\"critical\" />\n    </div>\n  );\n}\n\n"},{"fileName":"icon-with-custom-svg.tsx","title":"With custom SVG","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Specify an SVG as a string to render it in an image tag, instead of an inline SVG to prevent script injection.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Icon} from '@shopify/polaris';\nimport React from 'react';\n\nfunction IconExample() {\n  return (\n    <Icon source=\"<svg viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'><path d='M10.707 17.707l5-5a.999.999 0 1 0-1.414-1.414L11 14.586V3a1 1 0 1 0-2 0v11.586l-3.293-3.293a.999.999 0 1 0-1.414 1.414l5 5a.999.999 0 0 0 1.414 0' /></svg>\" />\n  );\n}\n\n"},{"fileName":"icon-with-custom-svg-and-color.tsx","title":"With custom SVG and color","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"When using changing color of an svg and it uses currentColor, the white color is applied.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Icon} from '@shopify/polaris';\nimport React from 'react';\n\nfunction IconWithReactChild() {\n  const iconContent = () => {\n    return (\n      <svg viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n        <circle cx=\"10\" cy=\"10\" r=\"10\" fill=\"rebeccapurple\" />\n        <circle cx=\"10\" cy=\"10\" r=\"6\" fill=\"currentColor\" />\n        <circle cx=\"10\" cy=\"10\" r=\"3\" />\n      </svg>\n    );\n  };\n\n  return <Icon source={iconContent} tone=\"warning\" />;\n}\n\n"}],"seoDescription":"Icons are used to visually communicate core parts of the product and available actions. They can act as wayfinding tools to help merchants more easily understand where they are in the product, and common interaction patterns that are available.","type":{"IconProps":{"filePath":"polaris-react/src/components/Icon/Icon.tsx","name":"IconProps","description":"","members":[{"filePath":"polaris-react/src/components/Icon/Icon.tsx","syntaxKind":"PropertySignature","name":"source","value":"any","description":"The SVG contents to display in the icon (icons should fit in a 20 × 20 pixel viewBox)"},{"filePath":"polaris-react/src/components/Icon/Icon.tsx","syntaxKind":"PropertySignature","name":"tone","value":"Tone","description":"Set the color for the SVG fill","isOptional":true},{"filePath":"polaris-react/src/components/Icon/Icon.tsx","syntaxKind":"PropertySignature","name":"accessibilityLabel","value":"string","description":"Descriptive text to be read to screenreaders","isOptional":true}],"value":"export interface IconProps {\n  /** The SVG contents to display in the icon (icons should fit in a 20 × 20 pixel viewBox) */\n  source: IconSource;\n  /** Set the color for the SVG fill */\n  tone?: Tone;\n  /** Descriptive text to be read to screenreaders */\n  accessibilityLabel?: string;\n}"},"Tone":{"filePath":"polaris-react/src/components/Icon/Icon.tsx","syntaxKind":"TypeAliasDeclaration","name":"Tone","value":"'base' | 'subdued' | 'caution' | 'warning' | 'critical' | 'interactive' | 'info' | 'success' | 'primary' | 'emphasis' | 'magic' | 'textCaution' | 'textWarning' | 'textCritical' | 'textInfo' | 'textSuccess' | 'textPrimary' | 'textMagic'","description":""}},"editPageLinkPath":"polaris.shopify.com/content/components/images-and-icons/icon.mdx"},"__N_SSG":true}