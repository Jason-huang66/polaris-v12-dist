{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    hr: \"hr\"\n  }, _provideComponents(), props.components), {Lede, Examples, Props} = _components;\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsxs(_components.p, {\n        children: [\"The frame component, while not visible in the user interface itself, provides the structure for an application. It wraps the main elements and houses the primary \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/navigation/navigation\",\n          children: \"navigation\"\n        }), \", \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/top-bar\",\n          children: \"top bar\"\n        }), \", \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/feedback-indicators/toast\",\n          children: \"toast\"\n        }), \", and \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/contextual-save-bar\",\n          children: \"contextual save bar\"\n        }), \" components.\"]\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For the best experience when creating an application frame, use the following components:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/top-bar\",\n          children: \"Top bar\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/navigation/navigation\",\n          children: \"Navigation\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/contextual-save-bar\",\n          children: \"Contextual save bar\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/feedback-indicators/toast\",\n          children: \"Toast\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/loading\",\n          children: \"Loading\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"related-components\",\n      children: \"Related components\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"To display the navigation component on small screens, to provide search and a user menu, or to style the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/frame\",\n          children: \"frame\"\n        }), \" component to reflect an applicationâ€™s brand, use the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/top-bar\",\n          children: \"top bar\"\n        }), \" component.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To display the primary navigation within the frame of an application, use the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/navigation/navigation\",\n          children: \"navigation\"\n        }), \" component.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To tell merchants their options once they have made changes to a form on the page use the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/contextual-save-bar\",\n          children: \"contextual save bar\"\n        }), \" component.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To provide quick, at-a-glance feedback on the outcome of an action, use the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/feedback-indicators/toast\",\n          children: \"toast\"\n        }), \" component.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To indicate to merchants that a page is loading or an upload is processing use the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/loading\",\n          children: \"loading\"\n        }), \" component.\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Frame","shortDescription":"Creates the structure of the Shopify admin. All of the main sections of the admin are nested in the frame.","category":"Utilities","keywords":["navigation","nav","links","primary navigation","main navigation","global","frame","sidebar","side bar","loading","top bar","menu","toast"],"examples":[{"fileName":"frame-in-an-application.tsx","title":"In an application","description":"Use to present the frame structure and all of its elements."},{"fileName":"frame-with-an-offset.tsx","title":"With an offset","description":"Use to present the frame structure and all of its elements with an offset provided to the theme."}],"previewImg":"/images/components/utilities/frame.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"frame-in-an-application.tsx","title":"In an application","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to present the frame structure and all of its elements.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  ActionList,\n  AppProvider,\n  LegacyCard,\n  ContextualSaveBar,\n  FormLayout,\n  Frame,\n  Layout,\n  Loading,\n  Modal,\n  Navigation,\n  Page,\n  SkeletonBodyText,\n  SkeletonDisplayText,\n  SkeletonPage,\n  TextContainer,\n  TextField,\n  Toast,\n  TopBar,\n} from '@shopify/polaris';\nimport {\n  ArrowLeftMinor,\n  HomeMajor,\n  OrdersMajor,\n  ConversationMinor,\n} from '@shopify/polaris-icons';\nimport {useState, useCallback, useRef} from 'react';\n\nfunction FrameExample() {\n  const defaultState = useRef({\n    emailFieldValue: 'dharma@jadedpixel.com',\n    nameFieldValue: 'Jaded Pixel',\n  });\n  const skipToContentRef = useRef<HTMLAnchorElement>(null);\n\n  const [toastActive, setToastActive] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDirty, setIsDirty] = useState(false);\n  const [searchActive, setSearchActive] = useState(false);\n  const [searchValue, setSearchValue] = useState('');\n  const [userMenuActive, setUserMenuActive] = useState(false);\n  const [mobileNavigationActive, setMobileNavigationActive] = useState(false);\n  const [modalActive, setModalActive] = useState(false);\n  const [nameFieldValue, setNameFieldValue] = useState(\n    defaultState.current.nameFieldValue,\n  );\n  const [emailFieldValue, setEmailFieldValue] = useState(\n    defaultState.current.emailFieldValue,\n  );\n  const [storeName, setStoreName] = useState(\n    defaultState.current.nameFieldValue,\n  );\n  const [supportSubject, setSupportSubject] = useState('');\n  const [supportMessage, setSupportMessage] = useState('');\n\n  const handleSubjectChange = useCallback(\n    (value: string) => setSupportSubject(value),\n    [],\n  );\n  const handleMessageChange = useCallback(\n    (value: string) => setSupportMessage(value),\n    [],\n  );\n  const handleDiscard = useCallback(() => {\n    setEmailFieldValue(defaultState.current.emailFieldValue);\n    setNameFieldValue(defaultState.current.nameFieldValue);\n    setIsDirty(false);\n  }, []);\n  const handleSave = useCallback(() => {\n    defaultState.current.nameFieldValue = nameFieldValue;\n    defaultState.current.emailFieldValue = emailFieldValue;\n\n    setIsDirty(false);\n    setToastActive(true);\n    setStoreName(defaultState.current.nameFieldValue);\n  }, [emailFieldValue, nameFieldValue]);\n  const handleNameFieldChange = useCallback((value: string) => {\n    setNameFieldValue(value);\n    value && setIsDirty(true);\n  }, []);\n  const handleEmailFieldChange = useCallback((value: string) => {\n    setEmailFieldValue(value);\n    value && setIsDirty(true);\n  }, []);\n  const handleSearchResultsDismiss = useCallback(() => {\n    setSearchActive(false);\n    setSearchValue('');\n  }, []);\n  const handleSearchFieldChange = useCallback((value: string) => {\n    setSearchValue(value);\n    setSearchActive(value.length > 0);\n  }, []);\n  const toggleToastActive = useCallback(\n    () => setToastActive((toastActive) => !toastActive),\n    [],\n  );\n  const toggleUserMenuActive = useCallback(\n    () => setUserMenuActive((userMenuActive) => !userMenuActive),\n    [],\n  );\n  const toggleMobileNavigationActive = useCallback(\n    () =>\n      setMobileNavigationActive(\n        (mobileNavigationActive) => !mobileNavigationActive,\n      ),\n    [],\n  );\n  const toggleIsLoading = useCallback(\n    () => setIsLoading((isLoading) => !isLoading),\n    [],\n  );\n  const toggleModalActive = useCallback(\n    () => setModalActive((modalActive) => !modalActive),\n    [],\n  );\n\n  const toastMarkup = toastActive ? (\n    <Toast onDismiss={toggleToastActive} content=\"Changes saved\" />\n  ) : null;\n\n  const userMenuActions = [\n    {\n      items: [{content: 'Community forums'}],\n    },\n  ];\n\n  const contextualSaveBarMarkup = isDirty ? (\n    <ContextualSaveBar\n      message=\"Unsaved changes\"\n      saveAction={{\n        onAction: handleSave,\n      }}\n      discardAction={{\n        onAction: handleDiscard,\n      }}\n    />\n  ) : null;\n\n  const userMenuMarkup = (\n    <TopBar.UserMenu\n      actions={userMenuActions}\n      name=\"Dharma\"\n      detail={storeName}\n      initials=\"D\"\n      open={userMenuActive}\n      onToggle={toggleUserMenuActive}\n    />\n  );\n\n  const searchResultsMarkup = (\n    <ActionList\n      items={[{content: 'Shopify help center'}, {content: 'Community forums'}]}\n    />\n  );\n\n  const searchFieldMarkup = (\n    <TopBar.SearchField\n      onChange={handleSearchFieldChange}\n      value={searchValue}\n      placeholder=\"Search\"\n    />\n  );\n\n  const topBarMarkup = (\n    <TopBar\n      showNavigationToggle\n      userMenu={userMenuMarkup}\n      searchResultsVisible={searchActive}\n      searchField={searchFieldMarkup}\n      searchResults={searchResultsMarkup}\n      onSearchResultsDismiss={handleSearchResultsDismiss}\n      onNavigationToggle={toggleMobileNavigationActive}\n    />\n  );\n\n  const navigationMarkup = (\n    <Navigation location=\"/\">\n      <Navigation.Section\n        items={[\n          {\n            label: 'Back to Shopify',\n            icon: ArrowLeftMinor,\n          },\n        ]}\n      />\n      <Navigation.Section\n        separator\n        title=\"Jaded Pixel App\"\n        items={[\n          {\n            label: 'Dashboard',\n            icon: HomeMajor,\n            onClick: toggleIsLoading,\n          },\n          {\n            label: 'Jaded Pixel Orders',\n            icon: OrdersMajor,\n            onClick: toggleIsLoading,\n          },\n        ]}\n        action={{\n          icon: ConversationMinor,\n          accessibilityLabel: 'Contact support',\n          onClick: toggleModalActive,\n        }}\n      />\n    </Navigation>\n  );\n\n  const loadingMarkup = isLoading ? <Loading /> : null;\n\n  const skipToContentTarget = (\n    <a id=\"SkipToContentTarget\" ref={skipToContentRef} tabIndex={-1} />\n  );\n\n  const actualPageMarkup = (\n    <Page title=\"Account\">\n      <Layout>\n        {skipToContentTarget}\n        <Layout.AnnotatedSection\n          title=\"Account details\"\n          description=\"Jaded Pixel will use this as your account information.\"\n        >\n          <LegacyCard sectioned>\n            <FormLayout>\n              <TextField\n                label=\"Full name\"\n                value={nameFieldValue}\n                onChange={handleNameFieldChange}\n                autoComplete=\"name\"\n              />\n              <TextField\n                type=\"email\"\n                label=\"Email\"\n                value={emailFieldValue}\n                onChange={handleEmailFieldChange}\n                autoComplete=\"email\"\n              />\n            </FormLayout>\n          </LegacyCard>\n        </Layout.AnnotatedSection>\n      </Layout>\n    </Page>\n  );\n\n  const loadingPageMarkup = (\n    <SkeletonPage>\n      <Layout>\n        <Layout.Section>\n          <LegacyCard sectioned>\n            <TextContainer>\n              <SkeletonDisplayText size=\"small\" />\n              <SkeletonBodyText lines={9} />\n            </TextContainer>\n          </LegacyCard>\n        </Layout.Section>\n      </Layout>\n    </SkeletonPage>\n  );\n\n  const pageMarkup = isLoading ? loadingPageMarkup : actualPageMarkup;\n\n  const modalMarkup = (\n    <Modal\n      open={modalActive}\n      onClose={toggleModalActive}\n      title=\"Contact support\"\n      primaryAction={{\n        content: 'Send',\n        onAction: toggleModalActive,\n      }}\n    >\n      <Modal.Section>\n        <FormLayout>\n          <TextField\n            label=\"Subject\"\n            value={supportSubject}\n            onChange={handleSubjectChange}\n            autoComplete=\"off\"\n          />\n          <TextField\n            label=\"Message\"\n            value={supportMessage}\n            onChange={handleMessageChange}\n            autoComplete=\"off\"\n            multiline\n          />\n        </FormLayout>\n      </Modal.Section>\n    </Modal>\n  );\n\n  const logo = {\n    width: 86,\n    topBarSource:\n      'https://cdn.shopify.com/s/files/1/2376/3301/files/Shopify_Secondary_Inverted.png',\n    contextualSaveBarSource:\n      'https://cdn.shopify.com/s/files/1/2376/3301/files/Shopify_Secondary_Inverted.png',\n    accessibilityLabel: 'Shopify',\n  };\n\n  return (\n    <div style={{height: '500px'}}>\n      <AppProvider\n        i18n={{\n          Polaris: {\n            Avatar: {\n              label: 'Avatar',\n              labelWithInitials: 'Avatar with initials {initials}',\n            },\n            ContextualSaveBar: {\n              save: 'Save',\n              discard: 'Discard',\n            },\n            TextField: {\n              characterCount: '{count} characters',\n            },\n            TopBar: {\n              toggleMenuLabel: 'Toggle menu',\n\n              SearchField: {\n                clearButtonLabel: 'Clear',\n                search: 'Search',\n              },\n            },\n            Modal: {\n              iFrameTitle: 'body markup',\n            },\n            Frame: {\n              skipToContent: 'Skip to content',\n              navigationLabel: 'Navigation',\n              Navigation: {\n                closeMobileNavigationLabel: 'Close navigation',\n              },\n            },\n          },\n        }}\n      >\n        <Frame\n          logo={logo}\n          topBar={topBarMarkup}\n          navigation={navigationMarkup}\n          showMobileNavigation={mobileNavigationActive}\n          onNavigationDismiss={toggleMobileNavigationActive}\n          skipToContentTarget={skipToContentRef}\n        >\n          {contextualSaveBarMarkup}\n          {loadingMarkup}\n          {pageMarkup}\n          {toastMarkup}\n          {modalMarkup}\n        </Frame>\n      </AppProvider>\n    </div>\n  );\n}\n\n"},{"fileName":"frame-with-an-offset.tsx","title":"With an offset","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to present the frame structure and all of its elements with an offset provided to the theme.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  ActionList,\n  AppProvider,\n  LegacyCard,\n  ContextualSaveBar,\n  FormLayout,\n  Frame,\n  Layout,\n  Loading,\n  Modal,\n  Navigation,\n  Page,\n  SkeletonBodyText,\n  SkeletonDisplayText,\n  SkeletonPage,\n  TextContainer,\n  TextField,\n  Toast,\n  TopBar,\n} from '@shopify/polaris';\nimport {\n  ArrowLeftMinor,\n  HomeMajor,\n  OrdersMajor,\n  ConversationMinor,\n} from '@shopify/polaris-icons';\nimport {useState, useCallback, useRef} from 'react';\n\nfunction FrameExample() {\n  const defaultState = useRef({\n    emailFieldValue: 'dharma@jadedpixel.com',\n    nameFieldValue: 'Jaded Pixel',\n  });\n  const skipToContentRef = useRef<HTMLAnchorElement>(null);\n\n  const [toastActive, setToastActive] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDirty, setIsDirty] = useState(false);\n  const [searchActive, setSearchActive] = useState(false);\n  const [searchValue, setSearchValue] = useState('');\n  const [userMenuActive, setUserMenuActive] = useState(false);\n  const [mobileNavigationActive, setMobileNavigationActive] = useState(false);\n  const [modalActive, setModalActive] = useState(false);\n  const [nameFieldValue, setNameFieldValue] = useState(\n    defaultState.current.nameFieldValue,\n  );\n  const [emailFieldValue, setEmailFieldValue] = useState(\n    defaultState.current.emailFieldValue,\n  );\n  const [storeName, setStoreName] = useState(\n    defaultState.current.nameFieldValue,\n  );\n  const [supportSubject, setSupportSubject] = useState('');\n  const [supportMessage, setSupportMessage] = useState('');\n\n  const handleSubjectChange = useCallback(\n    (value: string) => setSupportSubject(value),\n    [],\n  );\n  const handleMessageChange = useCallback(\n    (value: string) => setSupportMessage(value),\n    [],\n  );\n  const handleDiscard = useCallback(() => {\n    setEmailFieldValue(defaultState.current.emailFieldValue);\n    setNameFieldValue(defaultState.current.nameFieldValue);\n    setIsDirty(false);\n  }, []);\n  const handleSave = useCallback(() => {\n    defaultState.current.nameFieldValue = nameFieldValue;\n    defaultState.current.emailFieldValue = emailFieldValue;\n\n    setIsDirty(false);\n    setToastActive(true);\n    setStoreName(defaultState.current.nameFieldValue);\n  }, [emailFieldValue, nameFieldValue]);\n  const handleNameFieldChange = useCallback((value: string) => {\n    setNameFieldValue(value);\n    value && setIsDirty(true);\n  }, []);\n  const handleEmailFieldChange = useCallback((value: string) => {\n    setEmailFieldValue(value);\n    value && setIsDirty(true);\n  }, []);\n  const handleSearchResultsDismiss = useCallback(() => {\n    setSearchActive(false);\n    setSearchValue('');\n  }, []);\n  const handleSearchFieldChange = useCallback((value: string) => {\n    setSearchValue(value);\n    setSearchActive(value.length > 0);\n  }, []);\n  const toggleToastActive = useCallback(\n    () => setToastActive((toastActive) => !toastActive),\n    [],\n  );\n  const toggleUserMenuActive = useCallback(\n    () => setUserMenuActive((userMenuActive) => !userMenuActive),\n    [],\n  );\n  const toggleMobileNavigationActive = useCallback(\n    () =>\n      setMobileNavigationActive(\n        (mobileNavigationActive) => !mobileNavigationActive,\n      ),\n    [],\n  );\n  const toggleIsLoading = useCallback(\n    () => setIsLoading((isLoading) => !isLoading),\n    [],\n  );\n  const toggleModalActive = useCallback(\n    () => setModalActive((modalActive) => !modalActive),\n    [],\n  );\n\n  const toastMarkup = toastActive ? (\n    <Toast onDismiss={toggleToastActive} content=\"Changes saved\" />\n  ) : null;\n\n  const userMenuActions = [\n    {\n      items: [{content: 'Community forums'}],\n    },\n  ];\n\n  const contextualSaveBarMarkup = isDirty ? (\n    <ContextualSaveBar\n      message=\"Unsaved changes\"\n      saveAction={{\n        onAction: handleSave,\n      }}\n      discardAction={{\n        onAction: handleDiscard,\n      }}\n    />\n  ) : null;\n\n  const userMenuMarkup = (\n    <TopBar.UserMenu\n      actions={userMenuActions}\n      name=\"Dharma\"\n      detail={storeName}\n      initials=\"D\"\n      open={userMenuActive}\n      onToggle={toggleUserMenuActive}\n    />\n  );\n\n  const searchResultsMarkup = (\n    <ActionList\n      items={[{content: 'Shopify help center'}, {content: 'Community forums'}]}\n    />\n  );\n\n  const searchFieldMarkup = (\n    <TopBar.SearchField\n      onChange={handleSearchFieldChange}\n      value={searchValue}\n      placeholder=\"Search\"\n    />\n  );\n\n  const topBarMarkup = (\n    <TopBar\n      showNavigationToggle\n      userMenu={userMenuMarkup}\n      searchResultsVisible={searchActive}\n      searchField={searchFieldMarkup}\n      searchResults={searchResultsMarkup}\n      onSearchResultsDismiss={handleSearchResultsDismiss}\n      onNavigationToggle={toggleMobileNavigationActive}\n    />\n  );\n\n  const navigationMarkup = (\n    <Navigation location=\"/\">\n      <Navigation.Section\n        items={[\n          {\n            label: 'Back to Shopify',\n            icon: ArrowLeftMinor,\n          },\n        ]}\n      />\n      <Navigation.Section\n        separator\n        title=\"Jaded Pixel App\"\n        items={[\n          {\n            label: 'Dashboard',\n            icon: HomeMajor,\n            onClick: toggleIsLoading,\n          },\n          {\n            label: 'Jaded Pixel Orders',\n            icon: OrdersMajor,\n            onClick: toggleIsLoading,\n          },\n        ]}\n        action={{\n          icon: ConversationMinor,\n          accessibilityLabel: 'Contact support',\n          onClick: toggleModalActive,\n        }}\n      />\n    </Navigation>\n  );\n\n  const loadingMarkup = isLoading ? <Loading /> : null;\n\n  const skipToContentTarget = (\n    <a id=\"SkipToContentTarget\" ref={skipToContentRef} tabIndex={-1} />\n  );\n\n  const actualPageMarkup = (\n    <Page title=\"Account\">\n      <Layout>\n        {skipToContentTarget}\n        <Layout.AnnotatedSection\n          title=\"Account details\"\n          description=\"Jaded Pixel will use this as your account information.\"\n        >\n          <LegacyCard sectioned>\n            <FormLayout>\n              <TextField\n                label=\"Full name\"\n                value={nameFieldValue}\n                onChange={handleNameFieldChange}\n                autoComplete=\"name\"\n              />\n              <TextField\n                type=\"email\"\n                label=\"Email\"\n                value={emailFieldValue}\n                onChange={handleEmailFieldChange}\n                autoComplete=\"email\"\n              />\n            </FormLayout>\n          </LegacyCard>\n        </Layout.AnnotatedSection>\n      </Layout>\n    </Page>\n  );\n\n  const loadingPageMarkup = (\n    <SkeletonPage>\n      <Layout>\n        <Layout.Section>\n          <LegacyCard sectioned>\n            <TextContainer>\n              <SkeletonDisplayText size=\"small\" />\n              <SkeletonBodyText lines={9} />\n            </TextContainer>\n          </LegacyCard>\n        </Layout.Section>\n      </Layout>\n    </SkeletonPage>\n  );\n\n  const pageMarkup = isLoading ? loadingPageMarkup : actualPageMarkup;\n\n  const modalMarkup = (\n    <Modal\n      open={modalActive}\n      onClose={toggleModalActive}\n      title=\"Contact support\"\n      primaryAction={{\n        content: 'Send',\n        onAction: toggleModalActive,\n      }}\n    >\n      <Modal.Section>\n        <FormLayout>\n          <TextField\n            label=\"Subject\"\n            value={supportSubject}\n            onChange={handleSubjectChange}\n            autoComplete=\"off\"\n          />\n          <TextField\n            label=\"Message\"\n            value={supportMessage}\n            onChange={handleMessageChange}\n            autoComplete=\"off\"\n            multiline\n          />\n        </FormLayout>\n      </Modal.Section>\n    </Modal>\n  );\n\n  const logo = {\n    width: 86,\n    topBarSource:\n      'https://cdn.shopify.com/s/files/1/2376/3301/files/Shopify_Secondary_Inverted.png',\n    contextualSaveBarSource:\n      'https://cdn.shopify.com/s/files/1/2376/3301/files/Shopify_Secondary_Inverted.png',\n    accessibilityLabel: 'Shopify',\n  };\n\n  return (\n    <div style={{height: '500px', background: '#DE1373'}}>\n      <AppProvider\n        i18n={{\n          Polaris: {\n            Avatar: {\n              label: 'Avatar',\n              labelWithInitials: 'Avatar with initials {initials}',\n            },\n            ContextualSaveBar: {\n              save: 'Save',\n              discard: 'Discard',\n            },\n            TextField: {\n              characterCount: '{count} characters',\n            },\n            TopBar: {\n              toggleMenuLabel: 'Toggle menu',\n\n              SearchField: {\n                clearButtonLabel: 'Clear',\n                search: 'Search',\n              },\n            },\n            Modal: {\n              iFrameTitle: 'body markup',\n            },\n            Frame: {\n              skipToContent: 'Skip to content',\n              navigationLabel: 'Navigation',\n              Navigation: {\n                closeMobileNavigationLabel: 'Close navigation',\n              },\n            },\n          },\n        }}\n      >\n        <Frame\n          logo={logo}\n          offset=\"60px\"\n          globalRibbon={\n            <div style={{background: '#C0FFEE', padding: '30px'}}>\n              Global ribbon\n            </div>\n          }\n          topBar={topBarMarkup}\n          navigation={navigationMarkup}\n          showMobileNavigation={mobileNavigationActive}\n          onNavigationDismiss={toggleMobileNavigationActive}\n          skipToContentTarget={skipToContentRef}\n        >\n          {contextualSaveBarMarkup}\n          {loadingMarkup}\n          {pageMarkup}\n          {toastMarkup}\n          {modalMarkup}\n        </Frame>\n      </AppProvider>\n    </div>\n  );\n}\n\n"}],"seoDescription":"The frame component, while not visible in the user interface itself, provides the structure for an application. It wraps the main elements and houses the primary navigation, top bar, toast, and contextual save bar components.","type":{"FrameProps":{"filePath":"polaris-react/src/components/Frame/Frame.tsx","name":"FrameProps","description":"","members":[{"filePath":"polaris-react/src/components/Frame/Frame.tsx","syntaxKind":"PropertySignature","name":"logo","value":"Logo","description":"Sets the logo for the TopBar, Navigation, and ContextualSaveBar components","isOptional":true},{"filePath":"polaris-react/src/components/Frame/Frame.tsx","syntaxKind":"PropertySignature","name":"offset","value":"string","description":"A horizontal offset that pushes the frame to the right, leaving empty space on the left","isOptional":true},{"filePath":"polaris-react/src/components/Frame/Frame.tsx","syntaxKind":"PropertySignature","name":"children","value":"React.ReactNode","description":"The content to display inside the frame.","isOptional":true},{"filePath":"polaris-react/src/components/Frame/Frame.tsx","syntaxKind":"PropertySignature","name":"topBar","value":"React.ReactNode","description":"Accepts a top bar component that will be rendered at the top-most portion of an application frame","isOptional":true},{"filePath":"polaris-react/src/components/Frame/Frame.tsx","syntaxKind":"PropertySignature","name":"navigation","value":"React.ReactNode","description":"Accepts a navigation component that will be rendered in the left sidebar of an application frame","isOptional":true},{"filePath":"polaris-react/src/components/Frame/Frame.tsx","syntaxKind":"PropertySignature","name":"globalRibbon","value":"React.ReactNode","description":"Accepts a global ribbon component that will be rendered fixed to the bottom of an application frame","isOptional":true},{"filePath":"polaris-react/src/components/Frame/Frame.tsx","syntaxKind":"PropertySignature","name":"showMobileNavigation","value":"boolean","description":"A boolean property indicating whether the mobile navigation is currently visible","isOptional":true,"defaultValue":"false"},{"filePath":"polaris-react/src/components/Frame/Frame.tsx","syntaxKind":"PropertySignature","name":"skipToContentTarget","value":"React.RefObject<HTMLAnchorElement>","description":"Accepts a ref to the html anchor element you wish to focus when clicking the skip to content link","isOptional":true},{"filePath":"polaris-react/src/components/Frame/Frame.tsx","syntaxKind":"MethodSignature","name":"onNavigationDismiss","value":"() => void","description":"A callback function to handle clicking the mobile navigation dismiss button","isOptional":true},{"filePath":"polaris-react/src/components/Frame/Frame.tsx","syntaxKind":"PropertySignature","name":"sidebar","value":"boolean","description":"A boolean property indicating whether there should be space for a sidebar","isOptional":true,"defaultValue":"false"}],"value":"export interface FrameProps {\n  /** Sets the logo for the TopBar, Navigation, and ContextualSaveBar components */\n  logo?: Logo;\n  /** A horizontal offset that pushes the frame to the right, leaving empty space on the left */\n  offset?: string;\n  /** The content to display inside the frame. */\n  children?: React.ReactNode;\n  /** Accepts a top bar component that will be rendered at the top-most portion of an application frame */\n  topBar?: React.ReactNode;\n  /** Accepts a navigation component that will be rendered in the left sidebar of an application frame */\n  navigation?: React.ReactNode;\n  /** Accepts a global ribbon component that will be rendered fixed to the bottom of an application frame */\n  globalRibbon?: React.ReactNode;\n  /** A boolean property indicating whether the mobile navigation is currently visible\n   * @default false\n   */\n  showMobileNavigation?: boolean;\n  /** Accepts a ref to the html anchor element you wish to focus when clicking the skip to content link */\n  skipToContentTarget?: React.RefObject<HTMLAnchorElement>;\n  /** A callback function to handle clicking the mobile navigation dismiss button */\n  onNavigationDismiss?(): void;\n  /** A boolean property indicating whether there should be space for a sidebar\n   * @default false\n   */\n  sidebar?: boolean;\n}"},"Logo":{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/utilities/frame/types.ts","name":"Logo","description":"","members":[{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/utilities/frame/types.ts","syntaxKind":"PropertySignature","name":"topBarSource","value":"string","description":"Provides a path for a logo used on a dark background","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/utilities/frame/types.ts","syntaxKind":"PropertySignature","name":"contextualSaveBarSource","value":"string","description":"Provides a path for a logo used on a light background","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/utilities/frame/types.ts","syntaxKind":"PropertySignature","name":"url","value":"string","description":"Destination the merchant will navigate to when clicking the logo","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/utilities/frame/types.ts","syntaxKind":"PropertySignature","name":"accessibilityLabel","value":"string","description":"Accessible label the logo image","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/utilities/frame/types.ts","syntaxKind":"PropertySignature","name":"width","value":"number","description":"Number of pixels wide the logo image is","isOptional":true}],"value":"export interface Logo {\n  /** Provides a path for a logo used on a dark background */\n  topBarSource?: string;\n  /** Provides a path for a logo used on a light background */\n  contextualSaveBarSource?: string;\n  /** Destination the merchant will navigate to when clicking the logo */\n  url?: string;\n  /** Accessible label the logo image */\n  accessibilityLabel?: string;\n  /** Number of pixels wide the logo image is */\n  width?: number;\n}"}},"editPageLinkPath":"polaris.shopify.com/content/components/utilities/frame.mdx"},"__N_SSG":true}