{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    h3: \"h3\",\n    h4: \"h4\",\n    img: \"img\",\n    hr: \"hr\",\n    code: \"code\"\n  }, _provideComponents(), props.components), {Lede, StatusBanner, Examples, Props, DoDont} = _components;\n  if (!DoDont) _missingMdxReference(\"DoDont\", true);\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  if (!StatusBanner) _missingMdxReference(\"StatusBanner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"Use to give merchants control over a feature or option that can be turned on or off.\"\n      })\n    }), \"\\n\", _jsx(StatusBanner, {\n      status: frontmatter.status,\n      children: _jsx(_components.p, {\n        children: \"The SettingToggle is a simple layout component that composes its children with\\na button in a card. This pattern should be built using the primitive layout\\nand typography components. See the \\\"With primitive components\\\" example to\\nlearn how to build setting toggles with primitive components.\"\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Settings toggles should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Include a title\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Include body content describing the experience when the setting is turned on\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Use a badge to clearly indicate whether the setting is turned on or off\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Use a default button for both states. A primary button can be misinterpreted as the setting being turned on.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If more information is needed to explain setting details or functionality, include the \", _jsx(_components.a, {\n        href: \"https://polaris.shopify.com/icons?icon=InfoMinor&q=\",\n        children: \"Info\"\n      }), \" icon and link to help content or related documentation.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"usage\",\n      children: \"Usage\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The setting toggle component should only be used when:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"The setting is stand alone\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"There are two binary options that are “On”/“Off”\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If the setting is dependent on other settings, uses progressive disclosure, or has options that are not a simple “On”/“Off”, use a different UI element such as \", _jsx(_components.a, {\n        href: \"https://polaris.shopify.com/components/selection-and-input/checkbox\",\n        children: \"Checkbox\"\n      }), \" or \", _jsx(_components.a, {\n        href: \"https://polaris.shopify.com/components/selection-and-input/radio-button\",\n        children: \"Radio button\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do\",\n        children: \"Do\"\n      }), _jsx(_components.p, {\n        children: \"Only include the actions Turn on/ Turn off.\"\n      }), _jsx(_components.img, {\n        src: \"/images/components/deprecated/setting-toggle/Do.png\",\n        alt: \"Setting toggle do\"\n      }), _jsx(_components.h4, {\n        id: \"dont\",\n        children: \"Don’t\"\n      }), _jsx(_components.p, {\n        children: \"Don't include additional settings or inputs.\"\n      }), _jsx(_components.img, {\n        src: \"/images/components/deprecated/setting-toggle/Dont.png\",\n        alt: \"Setting toggle dont\"\n      })]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"content-guidelines\",\n      children: \"Content guidelines\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"card-title\",\n      children: \"Card title\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The setting toggle title should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Be the setting name, written as a noun or gerund (-ing) phrase (“Test mode” or “Automatic order archiving”)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Represent the experience when the setting is turned on—even if the setting restricts, limits, removes, or hides functionality\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-1\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Test mode\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Order archiving\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Self-serve returns\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont-1\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Simulate test payments\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Automatically archive the order\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Allow customers to manage returns\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"onoff-button\",\n      children: \"On/Off button\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The button for the setting toggle should always say either “Turn on” or “Turn off” depending on whether the setting can be turned on or off.\"\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-2\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Turn on\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Turn off\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont-2\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Enable\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Disable\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Activate\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Deactivate\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"supporting-content\",\n      children: \"Supporting content\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In addition to the setting description, supporting content can dynamically display based on state. This should be used sparingly and included only if it adds significant clarity or value. For example, “Your customers won’t receive automatic shipping updates.”\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"related-components\",\n      children: \"Related components\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To let merchants connect or disconnect third-party services and apps, use the \", _jsx(_components.a, {\n        href: \"https://polaris.shopify.com/components/account-connection\",\n        children: \"account connection\"\n      }), \" component.\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"accessibility\",\n      children: \"Accessibility\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"SettingToggle\"\n      }), \" component is implemented as an HTML \", _jsx(_components.code, {\n        children: \"<button>\"\n      }), \" with the \", _jsx(_components.code, {\n        children: \"switch\"\n      }), \" \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/switch_role\",\n        children: \"ARIA role\"\n      }), \".\\nThe components passed as children will automatically be wrapped in a label element describing the \", _jsx(_components.code, {\n        children: \"<button>\"\n      }), \". Enabling and disabling \", _jsx(_components.code, {\n        children: \"SettingToggle\"\n      }), \" will update the \", _jsx(_components.code, {\n        children: \"aria-checked\"\n      }), \" attribute to \", _jsx(_components.code, {\n        children: \"\\\"true\\\"\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"\\\"false\\\"\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To learn more about button accessibility, check out the \", _jsx(_components.a, {\n        href: \"https://polaris.shopify.com/components/actions/button\",\n        children: \"button\"\n      }), \" component documentation.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Setting toggle","shortDescription":"Used to control a feature or option that can be turned on or off.","category":"Deprecated","keywords":["SettingToggle","settings buttons","setting buttons","enable buttons","disable buttons","setting switches","turn on button","turn off button","option button","on off","switch","adjuster"],"status":"Deprecated","examples":[{"fileName":"setting-toggle-with-primitive-components.tsx","title":"With primitive components","description":"Use to allow merchants to toggle a setting that has an on or off state. Display the name of the setting and provide a description so merchants have the context needed to decide whether or not to enable the setting. This pattern is built using the layout and typography components, instead of the deprecated `SettingToggle` component."},{"fileName":"setting-toggle-deprecated.tsx","title":"With deprecated component","description":"The setting toggle component is deprecated. The \"With primitive components\" example is the recommended way to build the setting toggle pattern."}],"previewImg":"/images/components/deprecated/setting-toggle.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"setting-toggle-with-primitive-components.tsx","title":"With primitive components","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_components.p, {\n    children: [\"Use to allow merchants to toggle a setting that has an on or off state. Display the name of the setting and provide a description so merchants have the context needed to decide whether or not to enable the setting. This pattern is built using the layout and typography components, instead of the deprecated \", _jsx(_components.code, {\n      children: \"SettingToggle\"\n    }), \" component.\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  Text,\n  InlineStack,\n  Box,\n  Card,\n  Button,\n  Badge,\n  BlockStack,\n  useBreakpoints,\n} from '@shopify/polaris';\nimport {CircleInformationMajor} from '@shopify/polaris-icons';\nimport {useState, useCallback} from 'react';\n\nexport function WithPrimitiveComponents() {\n  const [enabled, setEnabled] = useState(true);\n\n  const handleToggle = useCallback(() => setEnabled((enabled) => !enabled), []);\n\n  const contentStatus = enabled ? 'Turn off' : 'Turn on';\n\n  const toggleId = 'setting-toggle-uuid';\n  const descriptionId = 'setting-toggle-description-uuid';\n\n  const {mdDown} = useBreakpoints();\n\n  const badgeStatus = enabled ? 'success' : undefined;\n\n  const badgeContent = enabled ? 'On' : 'Off';\n\n  const title = 'Test mode';\n  const description =\n    'Simulate transactions to test your checkout and order flows. When test mode is on, checkout does not accept real credit cards.';\n\n  const settingStatusMarkup = (\n    <Badge\n      tone={badgeStatus}\n      toneAndProgressLabelOverride={`Setting is ${badgeContent}`}\n    >\n      {badgeContent}\n    </Badge>\n  );\n\n  const helpLink = (\n    <Button\n      variant=\"plain\"\n      icon={CircleInformationMajor}\n      accessibilityLabel=\"Learn more\"\n    />\n  );\n\n  const settingTitle = title ? (\n    <InlineStack gap=\"200\" wrap={false}>\n      <InlineStack gap=\"200\" align=\"start\" blockAlign=\"baseline\">\n        <label htmlFor={toggleId}>\n          <Text variant=\"headingMd\" as=\"h6\">\n            {title}\n          </Text>\n        </label>\n        <InlineStack gap=\"200\" align=\"center\" blockAlign=\"center\">\n          {settingStatusMarkup}\n          {helpLink}\n        </InlineStack>\n      </InlineStack>\n    </InlineStack>\n  ) : null;\n\n  const actionMarkup = (\n    <Button\n      role=\"switch\"\n      id={toggleId}\n      ariaChecked={enabled ? 'true' : 'false'}\n      onClick={handleToggle}\n      size=\"slim\"\n    >\n      {contentStatus}\n    </Button>\n  );\n\n  const headerMarkup = (\n    <Box width=\"100%\">\n      <InlineStack\n        gap=\"1200\"\n        align=\"space-between\"\n        blockAlign=\"start\"\n        wrap={false}\n      >\n        {settingTitle}\n        {!mdDown ? (\n          <Box minWidth=\"fit-content\">\n            <InlineStack align=\"end\">{actionMarkup}</InlineStack>\n          </Box>\n        ) : null}\n      </InlineStack>\n    </Box>\n  );\n\n  const descriptionMarkup = (\n    <BlockStack gap=\"400\">\n      <Text id={descriptionId} variant=\"bodyMd\" as=\"p\" tone=\"subdued\">\n        {description}\n      </Text>\n      {mdDown ? (\n        <Box width=\"100%\">\n          <InlineStack align=\"start\">{actionMarkup}</InlineStack>\n        </Box>\n      ) : null}\n    </BlockStack>\n  );\n\n  return (\n    <Card>\n      <BlockStack gap={{xs: '400', sm: '500'}}>\n        <Box width=\"100%\">\n          <BlockStack gap={{xs: '200', sm: '400'}}>\n            {headerMarkup}\n            {descriptionMarkup}\n          </BlockStack>\n        </Box>\n        <Text variant=\"bodyMd\" as=\"p\">\n          Your checkout is only accepting test payments.\n        </Text>\n      </BlockStack>\n    </Card>\n  );\n}\n\n"},{"fileName":"setting-toggle-deprecated.tsx","title":"With deprecated component","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"The setting toggle component is deprecated. The \\\"With primitive components\\\" example is the recommended way to build the setting toggle pattern.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  Text,\n  // eslint-disable-next-line import/no-deprecated\n  SettingToggle,\n} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction WithDeprecatedComponent() {\n  const [enabled, setEnabled] = useState(false);\n\n  const contentStatus = enabled ? 'Turn off' : 'Turn on';\n\n  const handleToggle = useCallback(() => setEnabled((enabled) => !enabled), []);\n\n  return (\n    <SettingToggle\n      enabled={enabled}\n      action={{\n        content: contentStatus,\n        onAction: handleToggle,\n      }}\n    >\n      <Text as=\"p\">\n        Simulate transactions to test your checkout and order flows. When test\n        mode is on, checkout does not accept real credit cards.\n      </Text>\n    </SettingToggle>\n  );\n}\n\n"}],"seoDescription":"Use to give merchants control over a feature or option that can be turned on or off.","type":{},"editPageLinkPath":"polaris.shopify.com/content/components/deprecated/setting-toggle.mdx"},"__N_SSG":true}