{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components), {Lede, Examples, Props} = _components;\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsxs(_components.p, {\n        children: [\"Create complex layouts based on \", _jsx(_components.a, {\n          href: \"https://developer.mozilla.org/en-US/docs/Web/CSS/grid\",\n          children: \"CSS Grid\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"related-components\",\n      children: \"Related components\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"To lay out a set of smaller components in a row, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/layout-and-structure/vertical-stack\",\n          children: \"use the vertical stack component\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To lay out form fields, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/form-layout\",\n          children: \"use the form layout component\"\n        })]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Grid","category":"Layout and structure","keywords":["one column","two column","three column","column","row","column layouts","grid layouts","containers","full width containers","css grid"],"examples":[{"fileName":"grid-two-column.tsx","title":"Two column","description":"Use to create a two column layout that wraps at a breakpoint and aligns to a twelve column grid."},{"fileName":"grid-two-thirds-and-one-third-column.tsx","title":"Two-thirds and one-third column","description":"Use to create a two-thirds, one-third column layout that wraps at a breakpoint and aligns to a twelve column grid."},{"fileName":"grid-three-one-third-column.tsx","title":"Three one-third column","description":"Use to create a three column layout that wrap at a breakpoint and aligns to a twelve column grid."},{"fileName":"grid-custom-layout.tsx","title":"Custom layout","description":"Use to create a layout that can be customized at specific breakpoints."}],"previewImg":"/images/components/layout-and-structure/grid.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"grid-two-column.tsx","title":"Two column","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to create a two column layout that wraps at a breakpoint and aligns to a twelve column grid.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Page, Grid, LegacyCard} from '@shopify/polaris';\nimport React from 'react';\n\nfunction GridExample() {\n  return (\n    <Page fullWidth>\n      <Grid>\n        <Grid.Cell columnSpan={{xs: 6, sm: 3, md: 3, lg: 6, xl: 6}}>\n          <LegacyCard title=\"Sales\" sectioned>\n            <p>View a summary of your online store’s sales.</p>\n          </LegacyCard>\n        </Grid.Cell>\n        <Grid.Cell columnSpan={{xs: 6, sm: 3, md: 3, lg: 6, xl: 6}}>\n          <LegacyCard title=\"Orders\" sectioned>\n            <p>View a summary of your online store’s orders.</p>\n          </LegacyCard>\n        </Grid.Cell>\n      </Grid>\n    </Page>\n  );\n}\n\n"},{"fileName":"grid-two-thirds-and-one-third-column.tsx","title":"Two-thirds and one-third column","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to create a two-thirds, one-third column layout that wraps at a breakpoint and aligns to a twelve column grid.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Page, Grid, LegacyCard} from '@shopify/polaris';\nimport React from 'react';\n\nfunction GridExample() {\n  return (\n    <Page fullWidth>\n      <Grid columns={{sm: 3}}>\n        <Grid.Cell columnSpan={{xs: 6, sm: 4, md: 4, lg: 8, xl: 8}}>\n          <LegacyCard title=\"Sales\" sectioned>\n            <p>View a summary of your online store’s sales.</p>\n          </LegacyCard>\n        </Grid.Cell>\n        <Grid.Cell columnSpan={{xs: 6, sm: 2, md: 2, lg: 4, xl: 4}}>\n          <LegacyCard title=\"Orders\" sectioned>\n            <p>View a summary of your online store’s orders.</p>\n          </LegacyCard>\n        </Grid.Cell>\n      </Grid>\n    </Page>\n  );\n}\n\n"},{"fileName":"grid-three-one-third-column.tsx","title":"Three one-third column","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to create a three column layout that wrap at a breakpoint and aligns to a twelve column grid.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Page, Grid, LegacyCard} from '@shopify/polaris';\nimport React from 'react';\n\nfunction GridExample() {\n  return (\n    <Page fullWidth>\n      <Grid columns={{sm: 3}}>\n        <Grid.Cell columnSpan={{xs: 6, sm: 4, md: 4, lg: 8, xl: 8}}>\n          <LegacyCard title=\"Sales\" sectioned>\n            <p>View a summary of your online store’s sales.</p>\n          </LegacyCard>\n        </Grid.Cell>\n        <Grid.Cell columnSpan={{xs: 6, sm: 2, md: 2, lg: 4, xl: 4}}>\n          <LegacyCard title=\"Orders\" sectioned>\n            <p>View a summary of your online store’s orders.</p>\n          </LegacyCard>\n        </Grid.Cell>\n      </Grid>\n    </Page>\n  );\n}\n\n"},{"fileName":"grid-custom-layout.tsx","title":"Custom layout","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to create a layout that can be customized at specific breakpoints.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Page, Grid, LegacyCard} from '@shopify/polaris';\nimport React from 'react';\n\nfunction GridExample() {\n  return (\n    <Page fullWidth>\n      <LegacyCard sectioned>\n        <Grid\n          columns={{xs: 1, sm: 4, md: 4, lg: 6, xl: 6}}\n          areas={{\n            xs: ['product', 'sales', 'orders'],\n            sm: [\n              'product product product product',\n              'sales sales orders orders',\n            ],\n            md: ['sales product product orders'],\n            lg: ['product product product product sales orders'],\n            xl: ['product product sales sales orders orders'],\n          }}\n        >\n          <Grid.Cell area=\"product\">\n            <Placeholder height=\"60px\" />\n          </Grid.Cell>\n          <Grid.Cell area=\"sales\">\n            <Placeholder height=\"60px\" />\n          </Grid.Cell>\n          <Grid.Cell area=\"orders\">\n            <Placeholder height=\"60px\" />\n          </Grid.Cell>\n        </Grid>\n      </LegacyCard>\n    </Page>\n  );\n}\n\nconst Placeholder = ({height = 'auto', width = 'auto'}) => {\n  return (\n    <div\n      style={{\n        background: 'var(--p-color-text-info)',\n        height: height,\n        width: width,\n      }}\n    />\n  );\n};\n\n"}],"seoDescription":"Create complex layouts based on CSS Grid.","type":{"GridProps":{"filePath":"polaris-react/src/components/Grid/Grid.tsx","name":"GridProps","description":"","members":[{"filePath":"polaris-react/src/components/Grid/Grid.tsx","syntaxKind":"PropertySignature","name":"areas","value":"Areas","description":"Set grid-template-areas","isOptional":true,"deprecationMessage":"To avoid a11y issues, nest layout components in individual grid\ncells instead. See:\nhttps://polaris.shopify.com/components/layout-and-structure"},{"filePath":"polaris-react/src/components/Grid/Grid.tsx","syntaxKind":"PropertySignature","name":"columns","value":"Columns","description":"","isOptional":true},{"filePath":"polaris-react/src/components/Grid/Grid.tsx","syntaxKind":"PropertySignature","name":"gap","value":"Gap","description":"","isOptional":true},{"filePath":"polaris-react/src/components/Grid/Grid.tsx","syntaxKind":"PropertySignature","name":"children","value":"React.ReactNode","description":"","isOptional":true}],"value":"export interface GridProps {\n  /**\n   * Set grid-template-areas\n   * @deprecated To avoid a11y issues, nest layout components in individual grid\n   * cells instead. See:\n   * https://polaris.shopify.com/components/layout-and-structure\n   */\n  areas?: Areas;\n  /* Number of columns */\n  columns?: Columns;\n  /* Grid gap */\n  gap?: Gap;\n  children?: React.ReactNode;\n}"},"Areas":{"filePath":"polaris-react/src/components/Grid/Grid.tsx","syntaxKind":"TypeAliasDeclaration","name":"Areas","value":"{\n  [Breakpoint in Breakpoints]?: string[];\n}","description":""},"Breakpoints":{"filePath":"polaris-react/src/components/Grid/Grid.tsx","syntaxKind":"TypeAliasDeclaration","name":"Breakpoints","value":"'xs' | 'sm' | 'md' | 'lg' | 'xl'","description":""},"Columns":{"filePath":"polaris-react/src/components/Grid/Grid.tsx","syntaxKind":"TypeAliasDeclaration","name":"Columns","value":"{\n  [Breakpoint in Breakpoints]?: number;\n}","description":""},"Gap":{"filePath":"polaris-react/src/components/Grid/Grid.tsx","syntaxKind":"TypeAliasDeclaration","name":"Gap","value":"{\n  [Breakpoint in Breakpoints]?: string;\n}","description":""}},"editPageLinkPath":"polaris.shopify.com/content/components/layout-and-structure/grid.mdx"},"__N_SSG":true}