{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    hr: \"hr\",\n    h3: \"h3\",\n    h4: \"h4\",\n    code: \"code\"\n  }, _provideComponents(), props.components), {Lede, Examples, Props, DoDont} = _components;\n  if (!DoDont) _missingMdxReference(\"DoDont\", true);\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsxs(_components.p, {\n        children: [\"Action lists render a list of actions or selectable options. This component is usually placed inside a \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/overlays/popover\",\n          children: \"popover container\"\n        }), \" to create a dropdown menu or to let merchants select from a list of options.\"]\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Actions lists should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Be used for secondary or less important information and actions since they’re hidden until merchants expose them by opening a popover\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Contain actions that are related to each other\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"content-guidelines\",\n      children: \"Content guidelines\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"action-lists\",\n      children: \"Action lists\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Each item in an action list should be clear and predictable. Merchants should be able to anticipate what will happen when they click on an action item.\"\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do\",\n        children: \"Do\"\n      }), _jsx(_components.p, {\n        children: \"Buy shipping label\"\n      }), _jsx(_components.h4, {\n        id: \"dont\",\n        children: \"Don’t\"\n      }), _jsx(_components.p, {\n        children: \"Buy\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Each item in an action list should always lead with a strong verb that encourages action. To provide enough context use the {verb}+{noun} format unless the action is clear with a single verb.\"\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-1\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Rename\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Edit HTML\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont-1\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"File name changes\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"HTML editing options\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Each item in an action list should be scannable avoiding unnecessary words and articles such as the, an, or a.\"\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-2\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Add menu item\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont-2\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Add a menu item\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"related-components\",\n      children: \"Related components\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"To combine more than one button in a single layout, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/actions/button-group\",\n          children: \"use the button group component\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To display a list of related content, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/lists/list\",\n          children: \"use the list component\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"accessibility\",\n      children: \"Accessibility\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Items in an action list are organized as list items (\", _jsx(_components.code, {\n        children: \"<li>\"\n      }), \") in an unordered list (\", _jsx(_components.code, {\n        children: \"<ul>\"\n      }), \") and are conveyed as a group of related elements to assistive technology users. Each item is implemented as a \", _jsx(_components.a, {\n        href: \"https://polaris.shopify.com/components/actions/button\",\n        children: \"button\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"keyboard-support\",\n      children: \"Keyboard support\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Give the action list items keyboard focus with the \", _jsx(\"kbd\", {\n          children: \"tab\"\n        }), \" key (or \", _jsx(\"kbd\", {\n          children: \"shift\"\n        }), \" + \", _jsx(\"kbd\", {\n          children: \"tab\"\n        }), \" when tabbing backwards)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"When action list items have a role of \", _jsx(_components.code, {\n          children: \"menuitem\"\n        }), \", navigate through the list with \", _jsx(\"kbd\", {\n          children: \"down arrow\"\n        }), \" (\", _jsx(\"kbd\", {\n          children: \"up arrow\"\n        }), \" to move backwards)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Activate buttons with the \", _jsx(\"kbd\", {\n          children: \"enter\"\n        }), \"/\", _jsx(\"kbd\", {\n          children: \"return\"\n        }), \" key or the \", _jsx(\"kbd\", {\n          children: \"space\"\n        }), \" key\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"high-contrast-support\",\n      children: \"High contrast support\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Each item is clearly discernible in high contrast mode\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Each item that is focused and hovered is clearly discernible in high contrast mode\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Action list","category":"Lists","keywords":["ActionList","dropdown","drop down","popover","pop over","menu","drop-down","select","options"],"examples":[{"fileName":"action-list-in-a-popover.tsx","title":"In a popover","description":"Use for the least important actions so merchants aren’t distracted by secondary tasks. Can also be used for a set of actions that won’t fit in the available screen space."},{"fileName":"action-list-with-icons-or-image.tsx","title":"With icons or image","description":"Use when the items benefit from an associated action or image, such as a list of products."},{"fileName":"action-list-with-an-icon-and-a-suffix.tsx","title":"With an icon and a suffix","description":"Use when the items benefit from an associated action or image, such as a list of products."},{"fileName":"action-list-with-sections.tsx","title":"With sections","description":"Use when the items benefit from sections to help differentiate actions."},{"fileName":"action-list-with-destructive-item.tsx","title":"With destructive item","description":"Use to visually indicate that an action list item is destructive."},{"fileName":"action-list-with-help-text.tsx","title":"With help text","description":"Use help text when the normal Verb noun syntax for the actions does not provide sufficient context for the merchant."},{"fileName":"action-list-with-a-prefix-and-a-suffix.tsx","title":"With a prefix and a suffix","description":"Use help text when the normal Verb noun syntax for the actions does not provide sufficient context for the merchant."}],"previewImg":"/images/components/lists/action-list.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"action-list-in-a-popover.tsx","title":"In a popover","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use for the least important actions so merchants aren’t distracted by secondary tasks. Can also be used for a set of actions that won’t fit in the available screen space.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Button, Popover, ActionList} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction ActionListInPopoverExample() {\n  const [active, setActive] = useState(true);\n\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n\n  const handleImportedAction = useCallback(\n    () => console.log('Imported action'),\n    [],\n  );\n\n  const handleExportedAction = useCallback(\n    () => console.log('Exported action'),\n    [],\n  );\n\n  const activator = (\n    <Button onClick={toggleActive} disclosure>\n      More actions\n    </Button>\n  );\n\n  return (\n    <div style={{height: '250px'}}>\n      <Popover\n        active={active}\n        activator={activator}\n        autofocusTarget=\"first-node\"\n        onClose={toggleActive}\n      >\n        <ActionList\n          actionRole=\"menuitem\"\n          items={[\n            {\n              content: 'Import file',\n              onAction: handleImportedAction,\n            },\n            {\n              content: 'Export file',\n              onAction: handleExportedAction,\n            },\n          ]}\n        />\n      </Popover>\n    </div>\n  );\n}\n\n"},{"fileName":"action-list-with-icons-or-image.tsx","title":"With icons or image","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when the items benefit from an associated action or image, such as a list of products.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Button, Popover, ActionList} from '@shopify/polaris';\nimport {ArchiveMinor, DuplicateMinor} from '@shopify/polaris-icons';\nimport {useState, useCallback} from 'react';\n\nfunction ActionListWithMediaExample() {\n  const [active, setActive] = useState(true);\n\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n\n  const activator = (\n    <Button onClick={toggleActive} disclosure>\n      More actions\n    </Button>\n  );\n\n  return (\n    <div style={{height: '200px'}}>\n      <Popover\n        active={active}\n        activator={activator}\n        autofocusTarget=\"first-node\"\n        onClose={toggleActive}\n      >\n        <ActionList\n          actionRole=\"menuitem\"\n          items={[\n            {content: 'Duplicate', icon: DuplicateMinor},\n            {content: 'Archive', icon: ArchiveMinor},\n          ]}\n        />\n      </Popover>\n    </div>\n  );\n}\n\n"},{"fileName":"action-list-with-an-icon-and-a-suffix.tsx","title":"With an icon and a suffix","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when the items benefit from an associated action or image, such as a list of products.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Button, Popover, ActionList, Icon} from '@shopify/polaris';\nimport {ImportMinor, TickSmallMinor, ExportMinor} from '@shopify/polaris-icons';\nimport {useState, useCallback} from 'react';\n\nfunction ActionListWithSuffixExample() {\n  const [active, setActive] = useState(true);\n\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n\n  const activator = (\n    <Button onClick={toggleActive} disclosure>\n      More actions\n    </Button>\n  );\n\n  return (\n    <div style={{height: '200px'}}>\n      <Popover\n        active={active}\n        activator={activator}\n        autofocusTarget=\"first-node\"\n        onClose={toggleActive}\n      >\n        <ActionList\n          actionRole=\"menuitem\"\n          items={[\n            {\n              active: true,\n              content: 'Import file',\n              icon: ImportMinor,\n              suffix: <Icon source={TickSmallMinor} />,\n            },\n            {content: 'Export file', icon: ExportMinor},\n          ]}\n        />\n      </Popover>\n    </div>\n  );\n}\n\n"},{"fileName":"action-list-with-sections.tsx","title":"With sections","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when the items benefit from sections to help differentiate actions.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Button, Popover, ActionList} from '@shopify/polaris';\nimport {\n  ImportMinor,\n  ExportMinor,\n  EditMinor,\n  DeleteMinor,\n} from '@shopify/polaris-icons';\nimport {useState, useCallback} from 'react';\n\nfunction SectionedActionListExample() {\n  const [active, setActive] = useState(true);\n\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n\n  const activator = (\n    <Button onClick={toggleActive} disclosure>\n      More actions\n    </Button>\n  );\n\n  return (\n    <div style={{height: '250px'}}>\n      <Popover\n        active={active}\n        activator={activator}\n        autofocusTarget=\"first-node\"\n        onClose={toggleActive}\n      >\n        <ActionList\n          actionRole=\"menuitem\"\n          sections={[\n            {\n              title: 'File options',\n              items: [\n                {content: 'Import file', icon: ImportMinor},\n                {content: 'Export file', icon: ExportMinor},\n              ],\n            },\n            {\n              title: 'Bulk actions',\n              items: [\n                {content: 'Edit', icon: EditMinor},\n                {content: 'Delete', icon: DeleteMinor},\n              ],\n            },\n          ]}\n        />\n      </Popover>\n    </div>\n  );\n}\n\n"},{"fileName":"action-list-with-destructive-item.tsx","title":"With destructive item","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to visually indicate that an action list item is destructive.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Button, Popover, ActionList} from '@shopify/polaris';\nimport {ImportMinor, ExportMinor, DeleteMinor} from '@shopify/polaris-icons';\nimport {useState, useCallback} from 'react';\n\nfunction ActionListWithDestructiveItemExample() {\n  const [active, setActive] = useState(true);\n\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n\n  const activator = (\n    <Button onClick={toggleActive} disclosure>\n      More actions\n    </Button>\n  );\n\n  return (\n    <div style={{height: '250px'}}>\n      <Popover\n        active={active}\n        activator={activator}\n        autofocusTarget=\"first-node\"\n        onClose={toggleActive}\n      >\n        <ActionList\n          actionRole=\"menuitem\"\n          sections={[\n            {\n              title: 'File options',\n              items: [\n                {\n                  active: true,\n                  content: 'Import file',\n                  icon: ImportMinor,\n                },\n                {content: 'Export file', icon: ExportMinor},\n                {\n                  destructive: true,\n                  content: 'Delete file',\n                  icon: DeleteMinor,\n                },\n              ],\n            },\n          ]}\n        />\n      </Popover>\n    </div>\n  );\n}\n\n"},{"fileName":"action-list-with-help-text.tsx","title":"With help text","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use help text when the normal Verb noun syntax for the actions does not provide sufficient context for the merchant.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Button, Popover, ActionList} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction ActionListWithHelpTextExample() {\n  const [active, setActive] = useState(true);\n\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n\n  const activator = (\n    <Button onClick={toggleActive} disclosure>\n      More actions\n    </Button>\n  );\n\n  return (\n    <div style={{height: '250px'}}>\n      <Popover\n        active={active}\n        activator={activator}\n        autofocusTarget=\"first-node\"\n        onClose={toggleActive}\n      >\n        <ActionList\n          actionRole=\"menuitem\"\n          sections={[\n            {\n              items: [\n                {\n                  content: 'Blog posts',\n                  helpText: 'Manage your blog articles',\n                },\n                {\n                  content: 'Blogs',\n                  helpText: 'Manage blogs published to your Online Store',\n                },\n              ],\n            },\n          ]}\n        />\n      </Popover>\n    </div>\n  );\n}\n\n"},{"fileName":"action-list-with-a-prefix-and-a-suffix.tsx","title":"With a prefix and a suffix","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use help text when the normal Verb noun syntax for the actions does not provide sufficient context for the merchant.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {ActionList, Thumbnail, Icon, Avatar} from '@shopify/polaris';\nimport {ChevronRightMinor} from '@shopify/polaris-icons';\nimport React from 'react';\n\nfunction ActionListWithPrefixSuffixExample() {\n  return (\n    <div style={{height: '250px', maxWidth: '350px'}}>\n      <ActionList\n        actionRole=\"menuitem\"\n        items={[\n          {\n            content: 'Go here',\n            prefix: (\n              <Thumbnail\n                source=\"https://burst.shopifycdn.com/photos/black-leather-choker-necklace_373x@2x.jpg\"\n                size=\"small\"\n                alt=\"Black leather pet collar\"\n              />\n            ),\n            suffix: <Icon source={ChevronRightMinor} />,\n          },\n          {\n            content: 'Or there',\n            prefix: <Avatar customer name=\"Farrah\" size=\"sm\" />,\n            suffix: <Icon source={ChevronRightMinor} />,\n          },\n        ]}\n      />\n    </div>\n  );\n}\n\n"}],"seoDescription":"Action lists render a list of actions or selectable options. This component is usually placed inside a popover container to create a dropdown menu or to let merchants select from a list of options.","type":{"ActionListProps":{"filePath":"polaris-react/src/components/ActionList/ActionList.tsx","name":"ActionListProps","description":"","members":[{"filePath":"polaris-react/src/components/ActionList/ActionList.tsx","syntaxKind":"PropertySignature","name":"items","value":"readonly ActionListItemDescriptor[]","description":"Collection of actions for list","isOptional":true},{"filePath":"polaris-react/src/components/ActionList/ActionList.tsx","syntaxKind":"PropertySignature","name":"sections","value":"readonly ActionListSection[]","description":"Collection of sectioned action items","isOptional":true},{"filePath":"polaris-react/src/components/ActionList/ActionList.tsx","syntaxKind":"PropertySignature","name":"actionRole","value":"string","description":"Defines a specific role attribute for each action in the list","isOptional":true},{"filePath":"polaris-react/src/components/ActionList/ActionList.tsx","syntaxKind":"PropertySignature","name":"allowFiltering","value":"boolean","description":"Allow users to filter items in the list. Will only show if more than 8 items in the list. The item content of every items must be a string for this to work","isOptional":true},{"filePath":"polaris-react/src/components/ActionList/ActionList.tsx","syntaxKind":"PropertySignature","name":"onActionAnyItem","value":"() => void","description":"Callback when any item is clicked or keypressed","isOptional":true}],"value":"export interface ActionListProps {\n  /** Collection of actions for list */\n  items?: readonly ActionListItemDescriptor[];\n  /** Collection of sectioned action items */\n  sections?: readonly ActionListSection[];\n  /** Defines a specific role attribute for each action in the list */\n  actionRole?: 'menuitem' | string;\n  /** Allow users to filter items in the list. Will only show if more than 8 items in the list. The item content of every items must be a string for this to work */\n  allowFiltering?: boolean;\n  /** Callback when any item is clicked or keypressed */\n  onActionAnyItem?: ActionListItemDescriptor['onAction'];\n}"},"ActionListItemDescriptor":{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"ActionListItemDescriptor","description":"","members":[{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"accessibilityLabel","value":"string","description":"Visually hidden text for screen readers","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"badge","value":"{ tone: \"new\"; content: string; }","description":"","isOptional":true,"deprecationMessage":"Badge component"},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"helpText","value":"React.ReactNode","description":"Additional hint text to display with item","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"icon","value":"any","description":"","isOptional":true,"deprecationMessage":"Source of the icon"},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"image","value":"string","description":"","isOptional":true,"deprecationMessage":"Image source"},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"prefix","value":"React.ReactNode","description":"Prefix source","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"suffix","value":"React.ReactNode","description":"Suffix source","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"ellipsis","value":"boolean","description":"","isOptional":true,"deprecationMessage":"Add an ellipsis suffix to action content. ellipsis appends `...` without truncating. Use truncate instead."},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"truncate","value":"boolean","description":"Truncate the action content either at the beginning or at the end","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"active","value":"boolean","description":"Whether the action is active or not","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"variant","value":"\"default\" | \"menu\" | \"indented\"","description":"The item variations","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"role","value":"string","description":"Defines a role for the action","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"disabled","value":"boolean","description":"Whether or not the action is disabled","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"id","value":"string","description":"A unique identifier for the action","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"content","value":"string","description":"Content the action displays","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"url","value":"string","description":"A destination to link to, rendered in the action","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"external","value":"boolean","description":"Forces url to open in a new tab","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"target","value":"Target","description":"Where to display the url","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"MethodSignature","name":"onAction","value":"() => void","description":"Callback when an action takes place","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"MethodSignature","name":"onMouseEnter","value":"() => void","description":"Callback when mouse enter","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"MethodSignature","name":"onTouchStart","value":"() => void","description":"Callback when element is touched","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"destructive","value":"boolean","description":"Destructive action","isOptional":true}],"value":"export interface ActionListItemDescriptor\n  extends DisableableAction,\n    DestructableAction {\n  /** Visually hidden text for screen readers */\n  accessibilityLabel?: string;\n  /** @deprecated Badge component */\n  badge?: {\n    tone: 'new';\n    content: string;\n  };\n  /** Additional hint text to display with item */\n  helpText?: React.ReactNode;\n  /** @deprecated Source of the icon */\n  icon?: IconSource;\n  /** @deprecated Image source */\n  image?: string;\n  /** Prefix source */\n  prefix?: React.ReactNode;\n  /** Suffix source */\n  suffix?: React.ReactNode;\n  /** @deprecated Add an ellipsis suffix to action content. ellipsis appends `...` without truncating. Use truncate instead. */\n  ellipsis?: boolean;\n  /** Truncate the action content either at the beginning or at the end */\n  truncate?: boolean;\n  /** Whether the action is active or not */\n  active?: boolean;\n  /** The item variations */\n  variant?: 'default' | 'menu' | 'indented';\n  /** Defines a role for the action */\n  role?: string;\n}"},"Target":{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"TypeAliasDeclaration","name":"Target","value":"'_blank' | '_self' | '_parent' | '_top'","description":""},"ActionListSection":{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"ActionListSection","description":"","members":[{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"title","value":"any","description":"Section title","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"items","value":"readonly ActionListItemDescriptor[]","description":"Collection of action items for the list"}],"value":"export interface ActionListSection {\n  /** Section title */\n  title?: string | React.ReactNode;\n  /** Collection of action items for the list */\n  items: readonly ActionListItemDescriptor[];\n}"}},"editPageLinkPath":"polaris.shopify.com/content/components/lists/action-list.mdx"},"__N_SSG":true}