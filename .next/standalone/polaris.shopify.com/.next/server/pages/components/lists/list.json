{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    hr: \"hr\",\n    h3: \"h3\",\n    h4: \"h4\",\n    a: \"a\",\n    code: \"code\"\n  }, _provideComponents(), props.components), {Lede, Examples, Props, DoDont} = _components;\n  if (!DoDont) _missingMdxReference(\"DoDont\", true);\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"Lists display a set of related text-only content. Each list item begins with a bullet or a number.\"\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Lists should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Break up chunks of related content to make the information easier for merchants to scan\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Be phrased consistently (try to start each item with a noun or a verb and be consistent with each item)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Not be used for lists where the entire item represents an action\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"content-guidelines\",\n      children: \"Content guidelines\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"list-items\",\n      children: \"List items\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Every item in a list should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Start with a capital letter\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Not use commas or semicolons at the end of each line\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Red\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Yellow\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Blue\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Red;\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Yellow;\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Blue.\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Be written in sentence case\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-1\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Item one\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Item two\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Item three\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont-1\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Item One\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Item Two\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Item Three\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"related-components\",\n      children: \"Related components\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"To create a list of checkboxes or radio buttons, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/choice-list\",\n          children: \"use the choice list component\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To present a collection of objects of the same type such as customers, products, or orders, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/resource-list\",\n          children: \"use the resource list component\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"When text labels for each item are useful for describing the content, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/description-list\",\n          children: \"use the Description List component\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"accessibility\",\n      children: \"Accessibility\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The list component outputs list items (\", _jsx(_components.code, {\n        children: \"<li>\"\n      }), \") inside a list wrapper (\", _jsx(_components.code, {\n        children: \"<ul>\"\n      }), \" for bullet lists or \", _jsx(_components.code, {\n        children: \"<ol>\"\n      }), \" for numbered lists). By default, list items are conveyed as a group of related elements to assistive technology users.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To group items for layout only, consider using the \", _jsx(_components.a, {\n        href: \"https://polaris.shopify.com/components/layout-and-structure/vertical-stack\",\n        children: \"vertical stack component\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"List","category":"Lists","keywords":["bulleted lists","numbered lists","icon lists","list items","text lists","text-only lists"],"examples":[{"fileName":"list-bulleted.tsx","title":"Bulleted","description":"Use for a text-only list of related items that don’t need to be in a specific order and don’t require an icon or other indicator."},{"fileName":"list-numbered.tsx","title":"Numbered","description":"Use for a text-only list of related items when an inherent order, priority, or sequence needs to be communicated."},{"fileName":"list-extra-tight.tsx","title":"Extra Tight","description":"Use when there is limited space for a text-only list of related items when an inherent order, priority, or sequence needs to be communicated."}],"previewImg":"/images/components/lists/list.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"list-bulleted.tsx","title":"Bulleted","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use for a text-only list of related items that don’t need to be in a specific order and don’t require an icon or other indicator.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {List} from '@shopify/polaris';\nimport React from 'react';\n\nfunction ListExample() {\n  return (\n    <List type=\"bullet\">\n      <List.Item>Yellow shirt</List.Item>\n      <List.Item>Red shirt</List.Item>\n      <List.Item>Green shirt</List.Item>\n    </List>\n  );\n}\n\n"},{"fileName":"list-numbered.tsx","title":"Numbered","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use for a text-only list of related items when an inherent order, priority, or sequence needs to be communicated.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {List} from '@shopify/polaris';\nimport React from 'react';\n\nfunction ListExample() {\n  return (\n    <List type=\"number\">\n      <List.Item>First item</List.Item>\n      <List.Item>Second item</List.Item>\n      <List.Item>Third Item</List.Item>\n    </List>\n  );\n}\n\n"},{"fileName":"list-extra-tight.tsx","title":"Extra Tight","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when there is limited space for a text-only list of related items when an inherent order, priority, or sequence needs to be communicated.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {List} from '@shopify/polaris';\nimport React from 'react';\n\nfunction ListExtraTightExample() {\n  return (\n    <List gap=\"extraTight\">\n      <List.Item>Yellow shirt</List.Item>\n      <List.Item>Red shirt</List.Item>\n      <List.Item>Green shirt</List.Item>\n    </List>\n  );\n}\n\n"}],"seoDescription":"Lists display a set of related text-only content. Each list item begins with a bullet or a number.","type":{"ListProps":{"filePath":"polaris-react/src/components/List/List.tsx","name":"ListProps","description":"","members":[{"filePath":"polaris-react/src/components/List/List.tsx","syntaxKind":"PropertySignature","name":"gap","value":"Spacing","description":"Determines the space between list items","isOptional":true,"defaultValue":"'loose'"},{"filePath":"polaris-react/src/components/List/List.tsx","syntaxKind":"PropertySignature","name":"type","value":"Type","description":"Type of list to display","isOptional":true,"defaultValue":"'bullet'"},{"filePath":"polaris-react/src/components/List/List.tsx","syntaxKind":"PropertySignature","name":"children","value":"React.ReactNode","description":"List item elements","isOptional":true}],"value":"export interface ListProps {\n  /**\n   * Determines the space between list items\n   * @default 'loose'\n   */\n  gap?: Spacing;\n  /**\n   * Type of list to display\n   * @default 'bullet'\n   */\n  type?: Type;\n  /** List item elements */\n  children?: React.ReactNode;\n}"},"Spacing":{"filePath":"polaris-react/src/components/List/List.tsx","syntaxKind":"TypeAliasDeclaration","name":"Spacing","value":"'extraTight' | 'loose'","description":""},"Type":{"filePath":"polaris-react/src/components/List/List.tsx","syntaxKind":"TypeAliasDeclaration","name":"Type","value":"'bullet' | 'number'","description":""}},"editPageLinkPath":"polaris.shopify.com/content/components/lists/list.mdx"},"__N_SSG":true}