{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    hr: \"hr\"\n  }, _provideComponents(), props.components), {Lede, Examples, Props} = _components;\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"The progress bar component is used to visually represent the completion of a task or operation. It shows how much of the task has been completed and how much is still left.\"\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Progress bar components should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Give merchants an indication of how much of the task has completed and how much is left.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Not be used for entire page loads. In this case, use the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/skeleton-page\",\n          children: \"Skeleton page\"\n        }), \" component.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"related-components\",\n      children: \"Related components\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"For tasks with a short load time, use the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/spinner\",\n          children: \"Spinner\"\n        }), \" component\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"For full page loads, use the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/skeleton-page\",\n          children: \"Skeleton page\"\n        }), \" component\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Progress bar","shortDescription":"Used to visually represent the completion of a task or operation.","category":"Feedback indicators","releasedIn":"1.8.0","keywords":["ProgressBar","progress indicator","progress bar","loading"],"examples":[{"fileName":"progress-bar-default.tsx","title":"Default","description":"Use this component to visually represent the completion of a task or operation."},{"fileName":"progress-bar-small.tsx","title":"Small","description":"Use the size option when you need to increase or decrease the visual weight of the progress bar."},{"fileName":"progress-bar-colored.tsx","title":"Colored","description":"Use the color option when you need to blend the progress bar in a context that calls for it, such as a progress toward success or where it’s the primary focus."},{"fileName":"progress-bar-non-animated.tsx","title":"Non-animated","description":"Use the animated prop when you want to show a static progress bar."}],"previewImg":"/images/components/feedback-indicators/progress-bar.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"progress-bar-default.tsx","title":"Default","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use this component to visually represent the completion of a task or operation.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {ProgressBar} from '@shopify/polaris';\nimport React from 'react';\n\nfunction ProgressBarExample() {\n  return (\n    <div style={{width: 225}}>\n      <ProgressBar progress={75} />\n    </div>\n  );\n}\n\n"},{"fileName":"progress-bar-small.tsx","title":"Small","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use the size option when you need to increase or decrease the visual weight of the progress bar.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {ProgressBar} from '@shopify/polaris';\nimport React from 'react';\n\nfunction ProgressBarExample() {\n  return (\n    <div style={{width: 225}}>\n      <ProgressBar progress={40} size=\"small\" />\n    </div>\n  );\n}\n\n"},{"fileName":"progress-bar-colored.tsx","title":"Colored","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use the color option when you need to blend the progress bar in a context that calls for it, such as a progress toward success or where it’s the primary focus.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {ProgressBar} from '@shopify/polaris';\nimport React from 'react';\n\nfunction ProgressBarExample() {\n  return (\n    <div style={{width: 225}}>\n      <ProgressBar progress={70} tone=\"primary\" />\n      <br />\n      <ProgressBar progress={30} tone=\"success\" />\n    </div>\n  );\n}\n\n"},{"fileName":"progress-bar-non-animated.tsx","title":"Non-animated","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use the animated prop when you want to show a static progress bar.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {ProgressBar} from '@shopify/polaris';\nimport React from 'react';\n\nfunction ProgressBarExample() {\n  return (\n    <div style={{width: 225}}>\n      <ProgressBar progress={80} animated={false} />\n    </div>\n  );\n}\n\n"}],"seoDescription":"The progress bar component is used to visually represent the completion of a task or operation. It shows how much of the task has been completed and how much is still left.","type":{"ProgressBarProps":{"filePath":"polaris-react/src/components/ProgressBar/ProgressBar.tsx","name":"ProgressBarProps","description":"","members":[{"filePath":"polaris-react/src/components/ProgressBar/ProgressBar.tsx","syntaxKind":"PropertySignature","name":"progress","value":"number","description":"The progression of certain tasks","isOptional":true,"defaultValue":"0"},{"filePath":"polaris-react/src/components/ProgressBar/ProgressBar.tsx","syntaxKind":"PropertySignature","name":"size","value":"Size","description":"Size of progressbar","isOptional":true,"defaultValue":"'medium'"},{"filePath":"polaris-react/src/components/ProgressBar/ProgressBar.tsx","syntaxKind":"PropertySignature","name":"animated","value":"boolean","description":"Whether the fill animation is triggered","isOptional":true,"defaultValue":"'true'"},{"filePath":"polaris-react/src/components/ProgressBar/ProgressBar.tsx","syntaxKind":"PropertySignature","name":"ariaLabelledBy","value":"string","description":"Id (ids) of element (elements) that describes progressbar","isOptional":true},{"filePath":"polaris-react/src/components/ProgressBar/ProgressBar.tsx","syntaxKind":"PropertySignature","name":"tone","value":"Tone","description":"Color of progressbar","isOptional":true,"defaultValue":"'highlight'"}],"value":"export interface ProgressBarProps {\n  /**\n   * The progression of certain tasks\n   * @default 0\n   */\n  progress?: number;\n  /**\n   * Size of progressbar\n   * @default 'medium'\n   */\n  size?: Size;\n  /**\n   * Whether the fill animation is triggered\n   * @default 'true'\n   */\n  animated?: boolean;\n  /**\n   * Id (ids) of element (elements) that describes progressbar\n   */\n  ariaLabelledBy?: string;\n  /**\n   * Color of progressbar\n   * @default 'highlight'\n   */\n  tone?: Tone;\n}"},"Size":{"filePath":"polaris-react/src/components/ProgressBar/ProgressBar.tsx","syntaxKind":"TypeAliasDeclaration","name":"Size","value":"'small' | 'medium' | 'large'","description":""},"Tone":{"filePath":"polaris-react/src/components/ProgressBar/ProgressBar.tsx","syntaxKind":"TypeAliasDeclaration","name":"Tone","value":"'highlight' | 'primary' | 'success' | 'critical'","description":""}},"editPageLinkPath":"polaris.shopify.com/content/components/feedback-indicators/progress-bar.mdx"},"__N_SSG":true}