import { containerPhrasing } from 'mdast-util-to-markdown/lib/util/container-phrasing.js';
import { containerFlow } from 'mdast-util-to-markdown/lib/util/container-flow.js';
import { indentLines } from 'mdast-util-to-markdown/lib/util/indent-lines.js';
const defListHandler = (node, _parent, context) => {
    const exit = context.enter('defList');
    const value = containerFlow(node, context);
    exit();
    return value;
};
const defListTermHandler = (node, _parent, context) => {
    const exit = context.enter('defListTerm');
    const subexit = context.enter('phrasing');
    const value = containerPhrasing(node, context, { before: '\n', after: '\n' });
    subexit();
    exit();
    return value;
};
const defListDescriptionHandler = (node, _parent, context) => {
    const exit = context.enter('defListDescription');
    const value = indentLines(containerFlow(node, context), map);
    exit();
    return value;
    function map(line, index, blank) {
        if (index) {
            return blank ? '' : ' '.repeat(4) + line;
        }
        return blank ? ':' + ' '.repeat(3) : ':' + ' '.repeat(3) + line;
    }
};
const joinDefItems = (left, right, parent, _context) => {
    if (parent.type !== 'defList') {
        return;
    }
    if (left.type === 'defListDescription' && right.type === 'defListTerm') {
        return 1;
    }
    return 'spread' in right && right.spread ? 1 : 0;
};
export const defListToMarkdown = {
    join: [joinDefItems],
    unsafe: [{ character: ':', atBreak: true, inConstruct: ['defListTerm'] }],
    handlers: {
        defList: defListHandler,
        defListTerm: defListTermHandler,
        defListDescription: defListDescriptionHandler,
    },
};
