{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    h4: \"h4\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components), {Lede, RichCardGrid, TipBanner} = _components;\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!RichCardGrid) _missingMdxReference(\"RichCardGrid\", true);\n  if (!TipBanner) _missingMdxReference(\"TipBanner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsxs(_components.p, {\n        children: [\"Layout is the arrangement of elements on a page. A good layout helps merchants understand and find information to complete their goals. To learn more, visit the \", _jsx(_components.a, {\n          href: \"/design/layout\",\n          children: \"Layout\"\n        }), \" documentation.\"]\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"layout-primitives\",\n      children: \"Layout primitives\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All layouts and spacing should be handled using layout primitives. This keeps our components simple, flexible and composable. Our component naming conventions follow web standards for \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_logical_properties_and_values\",\n        children: \"logical properties and values\"\n      }), \".\"]\n    }), \"\\n\", _jsx(RichCardGrid, {\n      cards: posts.filter(post => frontmatter.primitives.includes(post.title))\n    }), \"\\n\", _jsx(TipBanner, {\n      children: _jsx(_components.p, {\n        children: \"Layout primitives allow you to specify values for different screen sizes.\\nCheck out the layout primitives for information on how responsive props apply\\nto each component.\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"layout-compositions\",\n      children: \"Layout compositions\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Layout compositions are built with layout primitives. Use these components to build common layouts in the admin with the help of sensible defaults.\"\n    }), \"\\n\", _jsx(RichCardGrid, {\n      cards: posts.filter(post => !frontmatter.primitives.includes(post.title))\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"related-resources\",\n      children: \"Related Resources\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Read the \", _jsx(_components.a, {\n          href: \"/design/layout\",\n          children: \"Layout\"\n        }), \" guidelines for information on layout behaviors, as well as examples.\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Layout and structure","shortDescription":"The arrangement of elements on a page that helps merchants understand and find information to complete their goals.","expanded":true,"order":2,"primitives":["Bleed","Block stack","Box","Divider","Grid","Inline stack","Inline grid"],"previewImg":"/images/components/layout-and-structure.png"},"scope":{"posts":[{"url":"/components/layout-and-structure/bleed","description":"Applies negative margin to allow content to bleed out into the surrounding layout.","title":"Bleed","shortDescription":"Applies negative margin to a layout, extending it to the edge of the screen on small screens.","category":"Layout and structure","keywords":["layout"],"examples":[{"fileName":"bleed-horizontal.tsx","title":"Horizontal","description":"Content will bleed horizontally into the surrounding layout using the `marginInline` prop."},{"fileName":"bleed-vertical.tsx","title":"Vertical","description":"Content will bleed vertically into the surrounding layout using the `marginBlock` prop."},{"fileName":"bleed-specific-direction.tsx","title":"Specific direction","description":"Negative margins can be added in a specific direction using the [Space tokens](https://polaris.shopify.com/tokens/space)."}],"previewImg":"/images/components/layout-and-structure/bleed.png","order":1000},{"url":"/components/layout-and-structure/block-stack","description":"Use to display children vertically and horizontally with full width by default. Based on CSS Flexbox.","title":"Block stack","category":"Layout and structure","keywords":["layout","stack spacing","vertical centering","fill available space","fill space","equal width","right-aligned stack","stack layout"],"examples":[{"fileName":"block-stack-with-gap.tsx","title":"Gap","description":"Control the vertical space between children using the `gap` prop."},{"fileName":"block-stack-with-align.tsx","title":"Align","description":"Control the vertical alignment of children using the `align` prop."},{"fileName":"block-stack-with-inline-align.tsx","title":"Inline align","description":"Control the horizontal alignment of children using the `inlineAlign` prop."}],"previewImg":"/images/components/layout-and-structure/block-stack.png","order":1000},{"url":"/components/layout-and-structure/box","description":"Box is the most primitive layout component. It’s a way to access Polaris design tokens.","title":"Box","category":"Layout and structure","keywords":["layout","box","responsive","tokens"],"examples":[{"fileName":"box-with-color.tsx","title":"Color","description":"Background color of box and text color inside a box can be adjusted using the [Color tokens](https://polaris.shopify.com/tokens/color)."},{"fileName":"box-with-border.tsx","title":"Border width","description":"Border width can be adjusted using the [Border tokens](https://polaris.shopify.com/tokens/border), and a subset of tokens allows different types of border."},{"fileName":"box-with-border-radius.tsx","title":"Border radius","description":"Border radius can be adjusted using the [Border tokens](https://polaris.shopify.com/tokens/border)."},{"fileName":"box-with-padding.tsx","title":"Padding","description":"Padding can be added to either all sides, left, right, top, and bottom, using the [Space tokens](https://polaris.shopify.com/tokens/space). The `padding` prop supports responsive spacing with the [Breakpoints tokens](https://polaris.shopify.com/tokens/breakpoints)."},{"fileName":"box-with-shadow.tsx","title":"Shadow","description":"Shadow can be applied using the [Shadow tokens](https://polaris.shopify.com/tokens/shadow)."}],"previewImg":"/images/components/layout-and-structure/box.png","order":1000},{"url":"/components/layout-and-structure/callout-card","description":"Callout cards are used to encourage merchants to take an action related to a new feature or opportunity. They are most commonly displayed in the sales channels section of Shopify.","title":"Callout card","category":"Layout and structure","keywords":["CalloutCard","actionable","updates","new features","call out card","sales channel card","feature card","callout card heading","callout card body content","callout card text","callout card cta","callout card call to action","callout card button","callout card with secondary cta","callout card with secondary button","dismissible callout card","card with illustration","card with image","illustration card"],"examples":[{"fileName":"callout-card-default.tsx","title":"Default","description":"Use to let merchants know about a feature or opportunity where there is a clear, single action they need to take to move to the next step."},{"fileName":"callout-card-with-secondary-action.tsx","title":"With secondary action","description":"Use to let merchants know about a feature or opportunity where there are two distinct actions they can take on the information."},{"fileName":"callout-card-dismissable.tsx","title":"Dismissable","description":"Make all callout cards dismissible so merchants can get rid of cards about features they’re not interested in."}],"previewImg":"/images/components/layout-and-structure/callout-card.png","order":1000},{"url":"/components/layout-and-structure/card","description":"Cards are used to group similar concepts and tasks together for merchants to scan, read, and get things done. It displays content in a familiar and recognizable style.","title":"Card","shortDescription":"Used to group similar concepts and tasks together for easier scanning and reading.","category":"Layout and structure","keywords":["layout","card","responsive","container","box","grid","panel","card with call to action in the footer","card with call to action in the heading","card with call to action in a section","card with button in the footer","card with button in the heading","card with multiple sections","card with subsections","sectioned card","card with a subdued section","subdued card for secondary content","callout","call out"],"examples":[{"fileName":"card-default.tsx","title":"Default","description":"By default, cards have an 8px border radius and uses `--p-color-bg-surface` as the background and `--p-shadow-300` as the shadow. There is padding of `space-5` (20px) around children and `space-4` (16px) for small screens."},{"fileName":"card-with-subdued-background.tsx","title":"With subdued background","description":"Use for content that you want to deprioritize. Subdued cards don’t stand out as much as cards with white backgrounds so don’t use them for information or actions that are critical to merchants."},{"fileName":"card-with-varying-padding.tsx","title":"With varying padding","description":"Use the `padding` property to adjust the spacing within a card. You can also specify spacing values at different breakpoints."},{"fileName":"card-with-rounded-corners.tsx","title":"Rounded corners","description":"Use the `padding` property to adjust the spacing of content within a card. The `padding` prop supports responsive spacing with the [Breakpoints tokens](https://polaris.shopify.com/tokens/breakpoints)."}],"previewImg":"/images/components/layout-and-structure/card.png","order":1000},{"url":"/components/layout-and-structure/divider","description":"Use to separate or group content.","title":"Divider","category":"Layout and structure","keywords":["layout","divider","border"],"examples":[{"fileName":"divider-with-border-color.tsx","title":"Color","description":"Divider border color can be adjusted using the [Color tokens](https://polaris.shopify.com/tokens/color)."}],"previewImg":"/images/components/layout-and-structure/divider.png","order":1000},{"url":"/components/layout-and-structure/empty-state","description":"Empty states are used when a list, table, or chart has no items or data to show. This is an opportunity to provide explanation or guidance to help merchants progress. The empty state component is intended for use when a full page in the admin is empty, and not for individual elements or areas in the interface.","title":"Empty state","category":"Layout and structure","keywords":["EmptyState","lander","welcome","explain features","describe features","educate about features","merchant education","educational opportunity","educational opportunities","illustration on pages","empty layouts","empty states","starting pages","starting layouts","educating","teaching","landing pages","landing layouts"],"examples":[{"fileName":"empty-state-default.tsx","title":"Default","description":"Use to explain a single feature before merchants have used it."},{"fileName":"empty-state-with-subdued-footer-context.tsx","title":"With subdued footer context","description":"Use to provide additional but non-critical context for a new product or feature. Can also be used to include a subdued call to action for secondary or tertiary actions."},{"fileName":"empty-state-with-full-width-layout.tsx","title":"With full width layout"}],"previewImg":"/images/components/layout-and-structure/empty-state.png","order":1000},{"url":"/components/layout-and-structure/form-layout","description":"Use form layout to arrange fields within a form using standard spacing. By default it stacks fields vertically but also supports horizontal groups of fields.","title":"Form layout","shortDescription":"Manages the layout of all forms and fields within it. Used for the layout of new forms and managing the layout of all forms.","category":"Layout and structure","keywords":["FormLayout","Group","responsive","no grid","stack fields","vertical","vertically","arrange fields","form spacing","field layouts","form field layouts","field stacking","stack fields","vertical form stacking","stack form fields vertically","form layout group","field group","multiple fields in a row","condensed field groups","short inputs","short input fields","short text fields","layout forms","layout input fields"],"examples":[{"fileName":"form-layout-default.tsx","title":"Default","description":"Use to stack form fields vertically, which makes them easier to scan and complete."},{"fileName":"form-layout-field-group.tsx","title":"Field group","description":"Use field groups to arrange multiple fields in a row. Works best for familiar layouts such as a row of city, state, and zip code fields. Use caution when arranging unrelated fields next to each other as this makes fields easier to miss. Field groups will wrap automatically on smaller screens."},{"fileName":"form-layout-condensed-field-group.tsx","title":"Condensed field group","description":"For very short inputs, the width of the inputs may be reduced in order to fit more fields in the row."}],"previewImg":"/images/components/layout-and-structure/form-layout.png","order":1000},{"url":"/components/layout-and-structure/grid","description":"Create complex layouts based on CSS Grid.","title":"Grid","category":"Layout and structure","keywords":["one column","two column","three column","column","row","column layouts","grid layouts","containers","full width containers","css grid"],"examples":[{"fileName":"grid-two-column.tsx","title":"Two column","description":"Use to create a two column layout that wraps at a breakpoint and aligns to a twelve column grid."},{"fileName":"grid-two-thirds-and-one-third-column.tsx","title":"Two-thirds and one-third column","description":"Use to create a two-thirds, one-third column layout that wraps at a breakpoint and aligns to a twelve column grid."},{"fileName":"grid-three-one-third-column.tsx","title":"Three one-third column","description":"Use to create a three column layout that wrap at a breakpoint and aligns to a twelve column grid."},{"fileName":"grid-custom-layout.tsx","title":"Custom layout","description":"Use to create a layout that can be customized at specific breakpoints."}],"previewImg":"/images/components/layout-and-structure/grid.png","order":1000},{"url":"/components/layout-and-structure/inline-grid","description":"Use to lay out children horizontally with equal gap between columns. Based on CSS Grid.","title":"Inline grid","category":"Layout and structure","keywords":["layout","columns","grid","responsive"],"examples":[{"fileName":"inline-grid-with-varying-gap.tsx","title":"Gap","description":"Use the `gap` prop to set the amount of space between columns. The `gap` prop supports responsive spacing with the [Breakpoints tokens](https://polaris.shopify.com/tokens/breakpoints)."},{"fileName":"inline-grid-with-fixed-widths.tsx","title":"Column width","description":"The `columns` property accepts CSS column shorthand syntax, or an array of strings mapping to common widths in the admin such as `oneThird`, `oneHalf`, and `twoThirds`. For responsive columns, use the same syntax passed into an object with the breakpoints."},{"fileName":"inline-grid-with-set-number.tsx","title":"Number of columns","description":"Control the number of columns using the `columns` prop. Column numbers can be responsively set using the [Breakpoints tokens](https://polaris.shopify.com/tokens/breakpoints)."}],"previewImg":"/images/components/layout-and-structure/inline-grid.png","order":1000},{"url":"/components/layout-and-structure/inline-stack","description":"Use to display children horizontally in a row. Based on CSS Flexbox.","title":"Inline stack","category":"Layout and structure","keywords":["layout","inline","flexbox","flex","responsive","flexible items","row of components","rows","vertical centering","horizontal row of components","stack"],"examples":[{"fileName":"inline-stack-with-non-wrapping.tsx","title":"Non-wrapping","description":"The default wrapping behavior of children can be overridden using the `wrap` prop."},{"fileName":"inline-stack-with-gap.tsx","title":"Gap","description":"Control the horizontal and vertical space between children using the `gap` prop. The `gap` prop supports responsive spacing with the [Breakpoints tokens](https://polaris.shopify.com/tokens/breakpoints)."},{"fileName":"inline-stack-with-block-align.tsx","title":"Block align","description":"Control the vertical alignment of children using the `blockAlign` prop."},{"fileName":"inline-stack-with-align.tsx","title":"Align","description":"Control the horizontal alignment of children using the `align` prop."}],"previewImg":"/images/components/layout-and-structure/inline-stack.png","order":1000},{"url":"/components/layout-and-structure/layout","description":"The layout component is used to create the main layout on a page. Layouts sections come in three main configurations. one-column, two-column, and annotated. One and two column layouts can be combined in the same page. Annotated layouts should be used on their own and only on settings pages.","title":"Layout","shortDescription":"A structural component used to group other components. Creates consistent spacing and helps layout stack and scale responsively.","category":"Layout and structure","keywords":["one column","two column","three column","column","annotated","page","column layouts","containers","full width containers","secondary sections","setting page","grouped sections","annotated sections"],"examples":[{"fileName":"layout-one-column.tsx","title":"One-column","description":"Use to have a single section on its own in a full-width container. Use for simple pages and as a container for banners and other full-width content."},{"fileName":"layout-two-columns-with-primary-and-secondary-widths.tsx","title":"Two columns with primary and secondary widths","description":"Use to follow a normal section with a secondary section to create a 2/3 + 1/3 layout on detail pages (such as individual product or order pages). Can also be used on any page that needs to structure a lot of content. This layout stacks the columns on small screens."},{"fileName":"layout-two-columns-with-equal-width.tsx","title":"Two columns with equal width","description":"Use to create a ½ + ½ layout. Can be used to display content of equal importance. This layout will stack the columns on small screens."},{"fileName":"layout-three-columns-with-equal-width.tsx","title":"Three columns with equal width","description":"Use to create a ⅓ + ⅓ + ⅓ layout. Can be used to display content of equal importance. This layout will stack the columns on small screens."},{"fileName":"layout-annotated.tsx","title":"Annotated","description":"Use for settings pages. When settings are grouped thematically in annotated sections, the title and description on each section helps merchants quickly find the setting they’re looking for."},{"fileName":"layout-annotated-with-sections.tsx","title":"Annotated with sections","description":"Use for settings pages. When settings are grouped thematically in annotated sections, the title and description on each section helps merchants quickly find the setting they’re looking for."},{"fileName":"layout-annotated-with-banner-at-the-top.tsx","title":"Annotated with Banner at the top","description":"Use for settings pages that need a banner or other content at the top."}],"previewImg":"/images/components/layout-and-structure/layout.png","order":1000},{"url":"/components/layout-and-structure/media-card","description":"Media cards provide a consistent layout to present visual information to merchants. Visual media is used to provide additional context to the written information it's paired with.","title":"Media card","shortDescription":"Provides a container for introductory or highlight information. Often used in a grid to present related content.","category":"Layout and structure","keywords":["MediaCard","actionable","updates","new features","Media card","image card","feature card","card with thumbnail","thumbnail card"],"examples":[{"fileName":"media-card-default.tsx","title":"Default","description":"Use to surface educational information about a feature or opportunity."},{"fileName":"media-card-with-small-visual.tsx","title":"With small visual","description":"Use when there are limited vertical space, or when the card should be less prominent."},{"fileName":"media-card-with-secondary-action.tsx","title":"With secondary action","description":"Use when there are two distinct actions merchants can take on the information in the card."},{"fileName":"media-card-with-no-actions.tsx","title":"With no actions","description":"Use when media card does not require any actions."},{"fileName":"media-card-video-card.tsx","title":"Video card","description":"Use to provide a consistent layout for contextual learning content. Use to wrap thumbnails of educational videos about Shopify features in context."},{"fileName":"media-card-portrait-video-card.tsx","title":"Portrait video card","description":"Use when vertical screen space is not limited or when the video card is the page’s primary content. For example, in an empty state."}],"previewImg":"/images/components/layout-and-structure/media-card.png","order":1000},{"url":"/components/layout-and-structure/page","description":"Use to build the outer wrapper of a page, including the page title and associated actions.","title":"Page","shortDescription":"Used to build the layout of a page in the Shopify admin. A flexible container for composing pages consistently.","category":"Layout and structure","keywords":["page","breadcrumbs","view","title","titlebar","backAction","pagination","page with all header elements","page without primary action in header","page without pagination","full-width page","narrow-width page","page with action groups","outer wrapper","page actions","page layouts"],"examples":[{"fileName":"page-default.tsx","title":"Default","description":"Use for detail pages, which should have pagination and breadcrumbs, and also often have several actions."},{"fileName":"page-with-custom-primary-action.tsx","title":"With custom primary action","description":"Use to create a custom primary action."},{"fileName":"page-without-primary-action-in-header.tsx","title":"Without primary action in header","description":"Use when a primary action functions better as part of the page content instead of in the page header."},{"fileName":"page-with-destructive-secondary-action.tsx","title":"With destructive secondary action","description":"Used to visually indicate that the secondary page action is destructive."},{"fileName":"page-with-custom-secondary-action.tsx","title":"With custom secondary action","description":"Use to create a custom secondary action."},{"fileName":"page-with-tooltip-action.tsx","title":"With tooltip action","description":"Use when merchants or their staff will benefit from context on why a page action is disabled."},{"fileName":"page-with-subtitle.tsx","title":"With subtitle","description":"Use when the page title benefits from secondary content."},{"fileName":"page-with-external-link.tsx","title":"With external link","description":"Use when a secondary action links to another website. Actions marked external open in a new browser tab."},{"fileName":"page-without-pagination.tsx","title":"Without pagination","description":"Use when the page doesn’t represent a list of objects or a detail view for an object."},{"fileName":"page-full-width.tsx","title":"Full-width","description":"Use for layouts that benefit from more screen width, such as wide tables or lists."},{"fileName":"page-narrow-width.tsx","title":"Narrow width","description":"Use a narrow width layout if the page supports a single unified task. When merchants must review the entire page contents to complete their goal, this layout helps focus their attention in a single path from top to bottom."},{"fileName":"page-with-action-groups.tsx","title":"With action groups","description":"Use action groups for sets of actions that relate to one another, particularly when there are too many to display as secondary actions. Note that these groups will be further rolled up into a single action for smaller displays so that actions do not wrap or overflow the page bounds."},{"fileName":"page-with-content-after-title.tsx","title":"With content after title","description":"Title metadata appears immediately after the page’s title. Use it to communicate brief, important and non-interactive status information about an entire page."}],"previewImg":"/images/components/layout-and-structure/page.png","order":1000}],"__remarkNextMdxImporter":{}}},"seoDescription":"Layout is the arrangement of elements on a page. A good layout helps merchants understand and find information to complete their goals. To learn more, visit the Layout documentation.","editPageLinkPath":"/polaris.shopify.com/content/components/layout-and-structure/index.mdx","isContentPage":false,"showTOC":false,"collapsibleTOC":false},"__N_SSG":true}