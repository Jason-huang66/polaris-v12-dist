{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    hr: \"hr\",\n    a: \"a\",\n    code: \"code\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components), {Lede, Examples, Props} = _components;\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"Avatars are used to show a thumbnail representation of an individual or business in the interface.\"\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Avatars should be one of 5 sizes:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Extra small (20 x 20 px): use in tightly condensed layouts\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Small (24 × 24 px): use when the medium size is too big for the layout, or when the avatar has less importance\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Medium (28 × 28 px): use as the default size\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Large (32 × 32 px): use when an avatar is a focal point, such as on a single customer card\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Extra large (40 × 40 px): use when an avatar is a focal point, such as on a single customer card\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"content-guidelines\",\n      children: \"Content guidelines\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Any time you use an image to communicate a concept on Shopify, it’s important to use descriptive \", _jsx(_components.a, {\n        href: \"https://polaris.shopify.com/content/alternative-text\",\n        children: \"alt text\"\n      }), \". Doing this is important for \", _jsx(_components.a, {\n        href: \"https://polaris.shopify.com/foundations/accessibility\",\n        children: \"accessibility\"\n      }), \" because it allows screen readers to describe what’s in the image to people who may not be able to see it.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For avatars, we recommend using a format that describes what will show in the image:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"alt=\\\"Person’s name\\\"\"\n        }), \" if the avatar represents a person\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"alt=\\\"Business’s name\\\"\"\n        }), \" if the avatar represents a business\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"alt=\\\"\\\"\"\n        }), \" if the name of the person/business appears next to the avatar as text\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"related-components\",\n      children: \"Related components\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"To show a thumbnail for an object rather than a person or business, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/thumbnail\",\n          children: \"use the thumbnail component\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"accessibility\",\n      children: \"Accessibility\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"structure\",\n      children: \"Structure\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The avatar component uses a generated scalable vector graphics (SVG) file, which can cause challenges for merchants that use assistive technologies. To create a standard experience, the \", _jsx(_components.code, {\n        children: \"<img>\"\n      }), \" is hidden from assistive technologies by using an empty \", _jsx(_components.code, {\n        children: \"alt\"\n      }), \" attribute, and replaced with a \", _jsx(_components.code, {\n        children: \"<span>\"\n      }), \" that has \", _jsx(_components.code, {\n        children: \"role=”img”\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"labeling\",\n      children: \"Labeling\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The avatar component represents content, and should have a text equivalent for merchants using assistive technologies. By default, the value of the \", _jsx(_components.code, {\n        children: \"name\"\n      }), \" prop is used for the alternative text. If different text would be more accurate, use the \", _jsx(_components.code, {\n        children: \"accessibilityLabel\"\n      }), \" prop to replace the value provided by \", _jsx(_components.code, {\n        children: \"name\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Avatar","shortDescription":"Used to show a thumbnail representation of an individual or business in the interface.","category":"Images and icons","keywords":["photo","profile","picture","thumbnail","default face","face picture","customer avatar","customer face","customer picture","business face","business picture","customer avatar","business avatar","customer thumbnail","business thumbnail"],"examples":[{"fileName":"avatar-default.tsx","title":"Default","description":"Use to present an avatar for a merchant, customer, or business."},{"fileName":"avatar-initials.tsx","title":"Initials","description":"Use to present an avatar with initials for a merchant, customer, or business."},{"fileName":"avatar-extra-small.tsx","title":"Extra small","description":"Use to present an avatar in a condensed layout, such as a data table cell or an action list item."}],"previewImg":"/images/components/images-and-icons/avatar.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"avatar-default.tsx","title":"Default","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to present an avatar for a merchant, customer, or business.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Avatar} from '@shopify/polaris';\nimport React from 'react';\n\nfunction AvatarExample() {\n  return <Avatar customer name=\"Farrah\" />;\n}\n\n"},{"fileName":"avatar-initials.tsx","title":"Initials","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to present an avatar with initials for a merchant, customer, or business.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Avatar} from '@shopify/polaris';\nimport React from 'react';\n\nfunction AvatarExample() {\n  return <Avatar initials=\"WW\" name=\"Woluwayemisi Weun-Jung\" />;\n}\n\n"},{"fileName":"avatar-extra-small.tsx","title":"Extra small","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to present an avatar in a condensed layout, such as a data table cell or an action list item.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Button, Popover, ActionList, Avatar} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction ExtraSmallAvatarExample() {\n  const [active, setActive] = useState(true);\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n  const activator = (\n    <Button onClick={toggleActive} disclosure>\n      Manage staff\n    </Button>\n  );\n\n  return (\n    <div style={{height: '250px'}}>\n      <Popover active={active} activator={activator} onClose={toggleActive}>\n        <ActionList\n          items={[\n            {\n              content: 'Chet Baker',\n              prefix: <Avatar customer size=\"xs\" name=\"Chet Baker\" />,\n            },\n            {\n              content: 'Farrah Fawcett',\n              prefix: <Avatar customer size=\"xs\" name=\"Farrah Fawcett\" />,\n            },\n          ]}\n        />\n      </Popover>\n    </div>\n  );\n}\n\n"}],"seoDescription":"Avatars are used to show a thumbnail representation of an individual or business in the interface.","type":{"AvatarProps":{"filePath":"polaris-react/src/components/Avatar/Avatar.tsx","name":"AvatarProps","description":"","members":[{"filePath":"polaris-react/src/components/Avatar/Avatar.tsx","syntaxKind":"PropertySignature","name":"size","value":"Size","description":"Size of avatar","isOptional":true,"defaultValue":"'medium'"},{"filePath":"polaris-react/src/components/Avatar/Avatar.tsx","syntaxKind":"PropertySignature","name":"name","value":"string","description":"The name of the person","isOptional":true},{"filePath":"polaris-react/src/components/Avatar/Avatar.tsx","syntaxKind":"PropertySignature","name":"initials","value":"string","description":"Initials of person to display","isOptional":true},{"filePath":"polaris-react/src/components/Avatar/Avatar.tsx","syntaxKind":"PropertySignature","name":"customer","value":"boolean","description":"Whether the avatar is for a customer","isOptional":true},{"filePath":"polaris-react/src/components/Avatar/Avatar.tsx","syntaxKind":"PropertySignature","name":"source","value":"string","description":"URL of the avatar image which falls back to initials if the image fails to load","isOptional":true},{"filePath":"polaris-react/src/components/Avatar/Avatar.tsx","syntaxKind":"MethodSignature","name":"onError","value":"() => void","description":"Callback fired when the image fails to load","isOptional":true},{"filePath":"polaris-react/src/components/Avatar/Avatar.tsx","syntaxKind":"PropertySignature","name":"accessibilityLabel","value":"string","description":"Accessible label for the avatar image","isOptional":true}],"value":"export interface AvatarProps {\n  /**\n   * Size of avatar\n   * @default 'medium'\n   */\n  size?: Size;\n  /** The name of the person */\n  name?: string;\n  /** Initials of person to display */\n  initials?: string;\n  /** Whether the avatar is for a customer */\n  customer?: boolean;\n  /** URL of the avatar image which falls back to initials if the image fails to load */\n  source?: string;\n  /** Callback fired when the image fails to load  */\n  onError?(): void;\n  /** Accessible label for the avatar image */\n  accessibilityLabel?: string;\n}"},"Size":{"filePath":"polaris-react/src/components/Avatar/Avatar.tsx","syntaxKind":"TypeAliasDeclaration","name":"Size","value":"'xs' | 'sm' | 'md' | 'lg' | 'xl'","description":""}},"editPageLinkPath":"polaris.shopify.com/content/components/images-and-icons/avatar.mdx"},"__N_SSG":true}