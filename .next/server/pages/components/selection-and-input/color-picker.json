{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components), {Lede, Examples, Props} = _components;\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"The color picker is used to let merchants select a color visually. For example, merchants use the color picker to customize the accent color of the email templates for their shop.\"\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Use the alpha slider if you want to allow merchants to be able to select a transparent color\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Color picker","shortDescription":"Allows merchants to choose a color visually, or by entering a hex value.","category":"Selection and input","keywords":["ColorPicker","HuePicker","AlphaPicker","Slidable","Choose color","Select color","Pick color","color selector with transparent value","colorpicker with transparent value","alpha value picker","alpha value selector"],"examples":[{"fileName":"color-picker-default.tsx","title":"Default","description":"Use when merchants need to select a color to make the selection a visual task rather than a technical one."},{"fileName":"color-picker-with-transparent-value.tsx","title":"With transparent value","description":"Use when attached to a visual builder to allow the designated object to have a transparent background that allows underlying objects to show through."},{"fileName":"color-picker-with-transparent-value-full-width.tsx","title":"With transparent value full width","description":"Use when attached to a visual builder to allow the designated object to have a transparent background that allows underlying objects to show through."}],"previewImg":"/images/components/selection-and-input/color-picker.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"color-picker-default.tsx","title":"Default","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when merchants need to select a color to make the selection a visual task rather than a technical one.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {ColorPicker} from '@shopify/polaris';\nimport {useState} from 'react';\n\nfunction ColorPickerExample() {\n  const [color, setColor] = useState({\n    hue: 120,\n    brightness: 1,\n    saturation: 1,\n  });\n\n  return <ColorPicker onChange={setColor} color={color} />;\n}\n\n"},{"fileName":"color-picker-with-transparent-value.tsx","title":"With transparent value","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when attached to a visual builder to allow the designated object to have a transparent background that allows underlying objects to show through.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {ColorPicker} from '@shopify/polaris';\nimport {useState} from 'react';\n\nfunction ColorPickerWithTransparentValueExample() {\n  const [color, setColor] = useState({\n    hue: 300,\n    brightness: 1,\n    saturation: 0.7,\n    alpha: 0.7,\n  });\n\n  return <ColorPicker onChange={setColor} color={color} allowAlpha />;\n}\n\n"},{"fileName":"color-picker-with-transparent-value-full-width.tsx","title":"With transparent value full width","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when attached to a visual builder to allow the designated object to have a transparent background that allows underlying objects to show through.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {ColorPicker} from '@shopify/polaris';\nimport {useState} from 'react';\n\nfunction ColorPickerWithTransparentValueExample() {\n  const [color, setColor] = useState({\n    hue: 300,\n    brightness: 1,\n    saturation: 0.7,\n    alpha: 0.7,\n  });\n\n  return (\n    <div style={{width: '100%'}}>\n      <ColorPicker fullWidth onChange={setColor} color={color} allowAlpha />\n    </div>\n  );\n}\n\n"}],"seoDescription":"The color picker is used to let merchants select a color visually. For example, merchants use the color picker to customize the accent color of the email templates for their shop.","type":{"ColorPickerProps":{"filePath":"polaris-react/src/components/ColorPicker/ColorPicker.tsx","name":"ColorPickerProps","description":"","members":[{"filePath":"polaris-react/src/components/ColorPicker/ColorPicker.tsx","syntaxKind":"PropertySignature","name":"id","value":"string","description":"ID for the element","isOptional":true},{"filePath":"polaris-react/src/components/ColorPicker/ColorPicker.tsx","syntaxKind":"PropertySignature","name":"color","value":"Color","description":"The currently selected color"},{"filePath":"polaris-react/src/components/ColorPicker/ColorPicker.tsx","syntaxKind":"PropertySignature","name":"allowAlpha","value":"boolean","description":"Allow user to select an alpha value","isOptional":true},{"filePath":"polaris-react/src/components/ColorPicker/ColorPicker.tsx","syntaxKind":"PropertySignature","name":"fullWidth","value":"boolean","description":"Allow HuePicker to take the full width","isOptional":true},{"filePath":"polaris-react/src/components/ColorPicker/ColorPicker.tsx","syntaxKind":"MethodSignature","name":"onChange","value":"(color: HSBAColor) => void","description":"Callback when color is selected"}],"value":"export interface ColorPickerProps {\n  /** ID for the element */\n  id?: string;\n  /** The currently selected color */\n  color: Color;\n  /** Allow user to select an alpha value */\n  allowAlpha?: boolean;\n  /** Allow HuePicker to take the full width */\n  fullWidth?: boolean;\n  /** Callback when color is selected */\n  onChange(color: HSBAColor): void;\n}"},"Color":{"filePath":"polaris-react/src/components/ColorPicker/ColorPicker.tsx","name":"Color","description":"","members":[{"filePath":"polaris-react/src/components/ColorPicker/ColorPicker.tsx","syntaxKind":"PropertySignature","name":"alpha","value":"number","description":"Level of transparency","isOptional":true},{"filePath":"polaris-react/src/components/ColorPicker/ColorPicker.tsx","syntaxKind":"PropertySignature","name":"brightness","value":"number","description":"Brightness of the color"},{"filePath":"polaris-react/src/components/ColorPicker/ColorPicker.tsx","syntaxKind":"PropertySignature","name":"hue","value":"number","description":"The color"},{"filePath":"polaris-react/src/components/ColorPicker/ColorPicker.tsx","syntaxKind":"PropertySignature","name":"saturation","value":"number","description":"Saturation of the color"}],"value":"interface Color extends HSBColor {\n  /** Level of transparency */\n  alpha?: HSBAColor['alpha'];\n}"},"HSBAColor":{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/utilities/color-types.ts","name":"HSBAColor","description":"","members":[{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/utilities/color-types.ts","syntaxKind":"PropertySignature","name":"alpha","value":"number","description":"Level of transparency"},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/utilities/color-types.ts","syntaxKind":"PropertySignature","name":"brightness","value":"number","description":"Brightness of the color"},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/utilities/color-types.ts","syntaxKind":"PropertySignature","name":"hue","value":"number","description":"The color"},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/utilities/color-types.ts","syntaxKind":"PropertySignature","name":"saturation","value":"number","description":"Saturation of the color"}],"value":"export interface HSBAColor extends HSBColor {\n  /** Level of transparency */\n  alpha: number;\n}"}},"editPageLinkPath":"polaris.shopify.com/content/components/selection-and-input/color-picker.mdx"},"__N_SSG":true}