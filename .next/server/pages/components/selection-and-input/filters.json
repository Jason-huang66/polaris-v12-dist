{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    hr: \"hr\",\n    h2: \"h2\",\n    a: \"a\",\n    h3: \"h3\",\n    h4: \"h4\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components), {Lede, Examples, Props, DoDont} = _components;\n  if (!DoDont) _missingMdxReference(\"DoDont\", true);\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"Filters is a composite component that filters the items of a list or table.\"\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Merchants use filters to:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"view different subsets of items in a list or table\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"filter by typing into a text field\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"filter by selecting filters or promoted filters\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The way that merchants interact with filters depends on the components that you decide to incorporate. In its simplest form, filters includes a text field and a set of filters, which can be displayed in different ways. What the filters are and how they’re exposed to merchants is flexible.\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"accessibility\",\n      children: \"Accessibility\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The filters component relies on the accessibility features of multiple other components:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/selection-and-input/text-field\",\n          children: \"Text field\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/actions/button\",\n          children: \"Button\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/overlays/popover\",\n          children: \"Popover\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"maintain-accessibility-with-custom-features\",\n      children: \"Maintain accessibility with custom features\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Since custom HTML can be passed to the component for additional actions, ensure that the filtering system you build is accessible as a whole.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"All merchants must:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"be able to identify and understand labels for all controls\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"be notified of state changes\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"be able to complete all actions with the keyboard\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The filters component should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"help reduce merchant effort by promoting the filtering categories that are most commonly used\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"include no more than 2 or 3 promoted filters\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"consider small screen sizes when designing the interface for each filter and the total number filters to include\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"use children only for content that’s related or relevant to filtering\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"content-guidelines\",\n      children: \"Content guidelines\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"text-field\",\n      children: \"Text field\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The text field should be clearly labeled so it’s obvious to merchants what they should enter into the field.\"\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Filter orders\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Enter text here\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"filter-badges\",\n      children: \"Filter badges\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the name of the filter if the purpose of the name is clear on its own. For example, when you see a filter badge that reads \", _jsx(_components.strong, {\n        children: \"Fulfilled\"\n      }), \", it’s intuitive that it falls under the Fulfillment status category.\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-1\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Fulfilled, Unfulfilled\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont-1\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Fulfillment: Fulfilled, Unfulfilled\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If the filter name is ambiguous on its own, add a descriptive word related to the status. For example, \", _jsx(_components.strong, {\n        children: \"Low\"\n      }), \" doesn’t make sense out of context. Add the word “risk” so that merchants know it’s from the Risk category.\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-2\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"High risk, Low risk\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont-2\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"High, Low\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Group tags from the same category together.\"\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-3\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"(Unfulfilled, Fulfilled)\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont-3\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"(Unfulfilled) (fulfilled)\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If all tag pills selected: truncate in the middle\"\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-4\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Paid, par… unpaid\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont-4\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"All payment status filters selected, Paid, unpa…\"\n        }), \"\\n\"]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Filters","shortDescription":"A composite component that filters the items of a list or table.","category":"Selection and input","keywords":["filters","filtering","filter control","resource list","index","list filter","table"],"examples":[{"fileName":"filters-with-a-resource-list.tsx","title":"With a resource list"},{"fileName":"filters-with-a-data-table.tsx","title":"With a data table"},{"fileName":"filters-with-children-content.tsx","title":"With children content"},{"fileName":"filters-disabled.tsx","title":"Disabled"},{"fileName":"filters-with-some-disabled.tsx","title":"With some disabled"},{"fileName":"filters-with-query-field-hidden.tsx","title":"With query field hidden"},{"fileName":"filters-with-query-field-disabled.tsx","title":"With query field disabled"}],"previewImg":"/images/components/selection-and-input/filters.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"filters-with-a-resource-list.tsx","title":"With a resource list","description":null,"code":"import {\n  ChoiceList,\n  TextField,\n  RangeSlider,\n  LegacyCard,\n  ResourceList,\n  Filters,\n  Avatar,\n  Text,\n} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction FiltersWithAResourceListExample() {\n  const [accountStatus, setAccountStatus] = useState<string[] | undefined>(\n    undefined,\n  );\n  const [moneySpent, setMoneySpent] = useState<[number, number] | undefined>(\n    undefined,\n  );\n  const [taggedWith, setTaggedWith] = useState<string | undefined>(undefined);\n  const [queryValue, setQueryValue] = useState<string | undefined>(undefined);\n\n  const handleAccountStatusChange = useCallback(\n    (value: string[]) => setAccountStatus(value),\n    [],\n  );\n  const handleMoneySpentChange = useCallback(\n    (value: [number, number]) => setMoneySpent(value),\n    [],\n  );\n  const handleTaggedWithChange = useCallback(\n    (value: string) => setTaggedWith(value),\n    [],\n  );\n  const handleFiltersQueryChange = useCallback(\n    (value: string) => setQueryValue(value),\n    [],\n  );\n  const handleAccountStatusRemove = useCallback(\n    () => setAccountStatus(undefined),\n    [],\n  );\n  const handleMoneySpentRemove = useCallback(\n    () => setMoneySpent(undefined),\n    [],\n  );\n  const handleTaggedWithRemove = useCallback(\n    () => setTaggedWith(undefined),\n    [],\n  );\n  const handleQueryValueRemove = useCallback(\n    () => setQueryValue(undefined),\n    [],\n  );\n  const handleFiltersClearAll = useCallback(() => {\n    handleAccountStatusRemove();\n    handleMoneySpentRemove();\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [\n    handleAccountStatusRemove,\n    handleMoneySpentRemove,\n    handleQueryValueRemove,\n    handleTaggedWithRemove,\n  ]);\n\n  const filters = [\n    {\n      key: 'accountStatus',\n      label: 'Account status',\n      filter: (\n        <ChoiceList\n          title=\"Account status\"\n          titleHidden\n          choices={[\n            {label: 'Enabled', value: 'enabled'},\n            {label: 'Not invited', value: 'not invited'},\n            {label: 'Invited', value: 'invited'},\n            {label: 'Declined', value: 'declined'},\n          ]}\n          selected={accountStatus || []}\n          onChange={handleAccountStatusChange}\n          allowMultiple\n        />\n      ),\n      shortcut: true,\n    },\n    {\n      key: 'taggedWith',\n      label: 'Tagged with',\n      filter: (\n        <TextField\n          label=\"Tagged with\"\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=\"off\"\n          labelHidden\n        />\n      ),\n      shortcut: true,\n    },\n    {\n      key: 'moneySpent',\n      label: 'Money spent',\n      filter: (\n        <RangeSlider\n          label=\"Money spent is between\"\n          labelHidden\n          value={moneySpent || [0, 500]}\n          prefix=\"$\"\n          output\n          min={0}\n          max={2000}\n          step={1}\n          onChange={handleMoneySpentChange}\n        />\n      ),\n    },\n  ];\n\n  const appliedFilters = [];\n  if (!isEmpty(accountStatus)) {\n    const key = 'accountStatus';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, accountStatus),\n      onRemove: handleAccountStatusRemove,\n    });\n  }\n  if (!isEmpty(moneySpent)) {\n    const key = 'moneySpent';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, moneySpent),\n      onRemove: handleMoneySpentRemove,\n    });\n  }\n  if (!isEmpty(taggedWith)) {\n    const key = 'taggedWith';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, taggedWith),\n      onRemove: handleTaggedWithRemove,\n    });\n  }\n\n  return (\n    <div style={{height: '568px'}}>\n      <LegacyCard>\n        <ResourceList\n          resourceName={{singular: 'customer', plural: 'customers'}}\n          filterControl={\n            <Filters\n              queryValue={queryValue}\n              filters={filters}\n              appliedFilters={appliedFilters}\n              onQueryChange={handleFiltersQueryChange}\n              onQueryClear={handleQueryValueRemove}\n              onClearAll={handleFiltersClearAll}\n            />\n          }\n          flushFilters\n          items={[\n            {\n              id: '341',\n              url: '#',\n              name: 'Mae Jemison',\n              location: 'Decatur, USA',\n            },\n            {\n              id: '256',\n              url: '#',\n              name: 'Ellen Ochoa',\n              location: 'Los Angeles, USA',\n            },\n          ]}\n          renderItem={(item) => {\n            const {id, url, name, location} = item;\n            const media = <Avatar customer size=\"md\" name={name} />;\n\n            return (\n              <ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              >\n                <Text as=\"h3\" variant=\"bodyMd\" fontWeight=\"bold\">\n                  {name}\n                </Text>\n                <div>{location}</div>\n              </ResourceList.Item>\n            );\n          }}\n        />\n      </LegacyCard>\n    </div>\n  );\n\n  function disambiguateLabel(key: string, value: any) {\n    switch (key) {\n      case 'moneySpent':\n        return `Money spent is between $${value[0]} and $${value[1]}`;\n      case 'taggedWith':\n        return `Tagged with ${value}`;\n      case 'accountStatus':\n        return value?.map((val: string) => `Customer ${val}`).join(', ');\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(\n    value: string | string[] | [number, number] | undefined,\n  ): boolean {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === '' || value == null;\n    }\n  }\n}\n\n"},{"fileName":"filters-with-a-data-table.tsx","title":"With a data table","description":null,"code":"import {\n  ChoiceList,\n  TextField,\n  LegacyCard,\n  Filters,\n  DataTable,\n} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction FiltersWithADataTableExample() {\n  const [availability, setAvailability] = useState<string[]>([]);\n  const [productType, setProductType] = useState<string[]>([]);\n  const [taggedWith, setTaggedWith] = useState<string>('');\n  const [queryValue, setQueryValue] = useState('');\n\n  const handleAvailabilityChange = useCallback(\n    (value: string[]) => setAvailability(value),\n    [],\n  );\n  const handleProductTypeChange = useCallback(\n    (value: string[]) => setProductType(value),\n    [],\n  );\n  const handleTaggedWithChange = useCallback(\n    (value: string) => setTaggedWith(value),\n    [],\n  );\n  const handleFiltersQueryChange = useCallback(\n    (value: string) => setQueryValue(value),\n    [],\n  );\n  const handleAvailabilityRemove = useCallback(() => setAvailability([]), []);\n  const handleProductTypeRemove = useCallback(() => setProductType([]), []);\n  const handleTaggedWithRemove = useCallback(() => setTaggedWith(''), []);\n  const handleQueryValueRemove = useCallback(() => setQueryValue(''), []);\n  const handleFiltersClearAll = useCallback(() => {\n    handleAvailabilityRemove();\n    handleProductTypeRemove();\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [\n    handleAvailabilityRemove,\n    handleQueryValueRemove,\n    handleProductTypeRemove,\n    handleTaggedWithRemove,\n  ]);\n\n  const filters = [\n    {\n      key: 'availability',\n      label: 'Availability',\n      filter: (\n        <ChoiceList\n          title=\"Availability\"\n          titleHidden\n          choices={[\n            {label: 'Online Store', value: 'Online Store'},\n            {label: 'Point of Sale', value: 'Point of Sale'},\n            {label: 'Buy Button', value: 'Buy Button'},\n          ]}\n          selected={availability || []}\n          onChange={handleAvailabilityChange}\n          allowMultiple\n        />\n      ),\n      shortcut: true,\n    },\n    {\n      key: 'productType',\n      label: 'Product type',\n      filter: (\n        <ChoiceList\n          title=\"Product type\"\n          titleHidden\n          choices={[\n            {label: 'T-Shirt', value: 'T-Shirt'},\n            {label: 'Accessory', value: 'Accessory'},\n            {label: 'Gift card', value: 'Gift card'},\n          ]}\n          selected={productType || []}\n          onChange={handleProductTypeChange}\n          allowMultiple\n        />\n      ),\n    },\n    {\n      key: 'taggedWith',\n      label: 'Tagged with',\n      filter: (\n        <TextField\n          label=\"Tagged with\"\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=\"off\"\n          labelHidden\n        />\n      ),\n    },\n  ];\n\n  const appliedFilters = [];\n  if (!isEmpty(availability)) {\n    const key = 'availability';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, availability),\n      onRemove: handleAvailabilityRemove,\n    });\n  }\n  if (!isEmpty(productType)) {\n    const key = 'productType';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, productType),\n      onRemove: handleProductTypeRemove,\n    });\n  }\n  if (!isEmpty(taggedWith)) {\n    const key = 'taggedWith';\n    appliedFilters.push({\n      key,\n      label: `Tagged with ${taggedWith}`,\n      onRemove: handleTaggedWithRemove,\n    });\n  }\n\n  return (\n    <div style={{height: '568px'}}>\n      <LegacyCard>\n        <Filters\n          queryValue={queryValue}\n          queryPlaceholder=\"Search items\"\n          filters={filters}\n          appliedFilters={appliedFilters}\n          onQueryChange={handleFiltersQueryChange}\n          onQueryClear={handleQueryValueRemove}\n          onClearAll={handleFiltersClearAll}\n        />\n        <DataTable\n          columnContentTypes={[\n            'text',\n            'numeric',\n            'numeric',\n            'numeric',\n            'numeric',\n          ]}\n          headings={[\n            'Product',\n            'Price',\n            'SKU Number',\n            'Net quantity',\n            'Net sales',\n          ]}\n          rows={[\n            ['Emerald Silk Gown', '$875.00', 124689, 140, '$122,500.00'],\n            ['Mauve Cashmere Scarf', '$230.00', 124533, 83, '$19,090.00'],\n            [\n              'Navy Merino Wool Blazer with khaki chinos and yellow belt',\n              '$445.00',\n              124518,\n              32,\n              '$14,240.00',\n            ],\n          ]}\n          totals={['', '', '', 255, '$155,830.00']}\n        />\n      </LegacyCard>\n    </div>\n  );\n\n  function disambiguateLabel(key: string, value: string[]): string {\n    switch (key) {\n      case 'taggedWith':\n        return `Tagged with ${value}`;\n      case 'availability':\n        return value.map((val) => `Available on ${val}`).join(', ');\n      case 'productType':\n        return value.join(', ');\n      default:\n        return value.toString();\n    }\n  }\n\n  function isEmpty(value: string | string[]): boolean {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === '' || value == null;\n    }\n  }\n}\n\n"},{"fileName":"filters-with-children-content.tsx","title":"With children content","description":null,"code":"import {\n  TextField,\n  LegacyCard,\n  ResourceList,\n  Filters,\n  Button,\n  Avatar,\n  Text,\n} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction FiltersWithChildrenContentExample() {\n  const [taggedWith, setTaggedWith] = useState<string | undefined>(undefined);\n  const [queryValue, setQueryValue] = useState<string | undefined>(undefined);\n\n  const handleTaggedWithChange = useCallback(\n    (value: string) => setTaggedWith(value),\n    [],\n  );\n  const handleQueryValueChange = useCallback(\n    (value: string) => setQueryValue(value),\n    [],\n  );\n  const handleTaggedWithRemove = useCallback(\n    () => setTaggedWith(undefined),\n    [],\n  );\n  const handleQueryValueRemove = useCallback(\n    () => setQueryValue(undefined),\n    [],\n  );\n\n  const handleClearAll = useCallback(() => {\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [handleQueryValueRemove, handleTaggedWithRemove]);\n\n  const filters = [\n    {\n      key: 'taggedWith',\n      label: 'Tagged with',\n      filter: (\n        <TextField\n          label=\"Tagged with\"\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=\"off\"\n          labelHidden\n        />\n      ),\n      shortcut: true,\n    },\n  ];\n\n  const appliedFilters =\n    taggedWith && !isEmpty(taggedWith)\n      ? [\n          {\n            key: 'taggedWith',\n            label: disambiguateLabel('taggedWith', taggedWith),\n            onRemove: handleTaggedWithRemove,\n          },\n        ]\n      : [];\n\n  return (\n    <div style={{height: '568px'}}>\n      <LegacyCard>\n        <ResourceList\n          resourceName={{singular: 'customer', plural: 'customers'}}\n          filterControl={\n            <Filters\n              queryValue={queryValue}\n              filters={filters}\n              appliedFilters={appliedFilters}\n              onQueryChange={handleQueryValueChange}\n              onQueryClear={handleQueryValueRemove}\n              onClearAll={handleClearAll}\n            >\n              <div style={{paddingLeft: '8px'}}>\n                <Button\n                  onClick={() => console.log('New filter saved')}\n                  variant=\"tertiary\"\n                >\n                  Save\n                </Button>\n              </div>\n            </Filters>\n          }\n          flushFilters\n          items={[\n            {\n              id: '341',\n              url: '#',\n              name: 'Mae Jemison',\n              location: 'Decatur, USA',\n            },\n            {\n              id: '256',\n              url: '#',\n              name: 'Ellen Ochoa',\n              location: 'Los Angeles, USA',\n            },\n          ]}\n          renderItem={(item) => {\n            const {id, url, name, location} = item;\n            const media = <Avatar customer size=\"md\" name={name} />;\n\n            return (\n              <ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              >\n                <Text as=\"h3\" variant=\"bodyMd\" fontWeight=\"bold\">\n                  {name}\n                </Text>\n                <div>{location}</div>\n              </ResourceList.Item>\n            );\n          }}\n        />\n      </LegacyCard>\n    </div>\n  );\n\n  function disambiguateLabel(key: string, value: string): string {\n    switch (key) {\n      case 'taggedWith':\n        return `Tagged with ${value}`;\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value: string): boolean {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === '' || value == null;\n    }\n  }\n}\n\n"},{"fileName":"filters-disabled.tsx","title":"Disabled","description":null,"code":"import {\n  TextField,\n  LegacyCard,\n  ResourceList,\n  Filters,\n  Button,\n  Avatar,\n  Text,\n} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction FiltersDisabledExample() {\n  const [taggedWith, setTaggedWith] = useState<string>('');\n  const [queryValue, setQueryValue] = useState<string>('');\n\n  const handleTaggedWithChange = useCallback(\n    (value: string) => setTaggedWith(value),\n    [],\n  );\n  const handleQueryValueChange = useCallback(\n    (value: string) => setQueryValue(value),\n    [],\n  );\n  const handleTaggedWithRemove = useCallback(() => setTaggedWith(''), []);\n  const handleQueryValueRemove = useCallback(() => setQueryValue(''), []);\n\n  const handleClearAll = useCallback(() => {\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [handleQueryValueRemove, handleTaggedWithRemove]);\n\n  const filters = [\n    {\n      key: 'taggedWith',\n      label: 'Tagged with',\n      filter: (\n        <TextField\n          label=\"Tagged with\"\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=\"off\"\n          labelHidden\n        />\n      ),\n      shortcut: true,\n    },\n  ];\n\n  const appliedFilters = !isEmpty(taggedWith)\n    ? [\n        {\n          key: 'taggedWith',\n          label: disambiguateLabel('taggedWith', taggedWith),\n          onRemove: handleTaggedWithRemove,\n        },\n      ]\n    : [];\n\n  return (\n    <div style={{height: '568px'}}>\n      <LegacyCard>\n        <ResourceList\n          resourceName={{singular: 'customer', plural: 'customers'}}\n          filterControl={\n            <Filters\n              queryValue={queryValue}\n              queryPlaceholder=\"Searching customers\"\n              filters={filters}\n              appliedFilters={appliedFilters}\n              onQueryChange={handleQueryValueChange}\n              onQueryClear={handleQueryValueRemove}\n              onClearAll={handleClearAll}\n              disabled\n            >\n              <div style={{paddingLeft: '8px'}}>\n                <Button\n                  disabled\n                  variant=\"tertiary\"\n                  onClick={() => console.log('New filter saved')}\n                >\n                  Save\n                </Button>\n              </div>\n            </Filters>\n          }\n          flushFilters\n          items={[\n            {\n              id: '341',\n              url: '#',\n              name: 'Mae Jemison',\n              location: 'Decatur, USA',\n            },\n            {\n              id: '256',\n              url: '#',\n              name: 'Ellen Ochoa',\n              location: 'Los Angeles, USA',\n            },\n          ]}\n          renderItem={(item) => {\n            const {id, url, name, location} = item;\n            const media = <Avatar customer size=\"md\" name={name} />;\n\n            return (\n              <ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              >\n                <Text as=\"h3\" variant=\"bodyMd\" fontWeight=\"bold\">\n                  {name}\n                </Text>\n                <div>{location}</div>\n              </ResourceList.Item>\n            );\n          }}\n        />\n      </LegacyCard>\n    </div>\n  );\n\n  function disambiguateLabel(key: string, value: string): string {\n    switch (key) {\n      case 'taggedWith':\n        return `Tagged with ${value}`;\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value: string): boolean {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === '' || value == null;\n    }\n  }\n}\n\n"},{"fileName":"filters-with-some-disabled.tsx","title":"With some disabled","description":null,"code":"import {\n  TextField,\n  LegacyCard,\n  ResourceList,\n  Filters,\n  Button,\n  Avatar,\n  Text,\n} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction FiltersWithSomeDisabledExample() {\n  const [taggedWith, setTaggedWith] = useState<string>('');\n  const [queryValue, setQueryValue] = useState<string>('');\n  const [vendor, setVendor] = useState<string | undefined>(undefined);\n\n  const handleTaggedWithChange = useCallback(\n    (value: string) => setTaggedWith(value),\n    [],\n  );\n  const handleQueryValueChange = useCallback(\n    (value: string) => setQueryValue(value),\n    [],\n  );\n  const handleVendorChange = useCallback(\n    (value: string) => setVendor(value),\n    [],\n  );\n\n  const handleTaggedWithRemove = useCallback(() => setTaggedWith(''), []);\n  const handleQueryValueRemove = useCallback(() => setQueryValue(''), []);\n  const handleVendorRemove = useCallback(() => setVendor(undefined), []);\n\n  const handleClearAll = useCallback(() => {\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n    handleVendorRemove();\n  }, [handleQueryValueRemove, handleTaggedWithRemove, handleVendorRemove]);\n\n  const filters = [\n    {\n      key: 'taggedWith',\n      label: 'Tagged with',\n      filter: (\n        <TextField\n          label=\"Tagged with\"\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=\"off\"\n          labelHidden\n        />\n      ),\n      shortcut: true,\n    },\n    {\n      key: 'vendor',\n      label: 'Vendor',\n      filter: (\n        <TextField\n          label=\"Vendor\"\n          value={vendor}\n          onChange={handleVendorChange}\n          autoComplete=\"off\"\n          labelHidden\n        />\n      ),\n      shortcut: true,\n      disabled: true,\n    },\n  ];\n\n  const appliedFilters =\n    taggedWith && !isEmpty(taggedWith)\n      ? [\n          {\n            key: 'taggedWith',\n            label: disambiguateLabel('taggedWith', taggedWith),\n            onRemove: handleTaggedWithRemove,\n          },\n        ]\n      : [];\n\n  return (\n    <div style={{height: '568px'}}>\n      <LegacyCard>\n        <ResourceList\n          resourceName={{singular: 'customer', plural: 'customers'}}\n          filterControl={\n            <Filters\n              queryValue={queryValue}\n              queryPlaceholder=\"Searching customers\"\n              filters={filters}\n              appliedFilters={appliedFilters}\n              onQueryChange={handleQueryValueChange}\n              onQueryClear={handleQueryValueRemove}\n              onClearAll={handleClearAll}\n            >\n              <div style={{paddingLeft: '8px'}}>\n                <Button\n                  disabled\n                  variant=\"tertiary\"\n                  onClick={() => console.log('New filter saved')}\n                >\n                  Save\n                </Button>\n              </div>\n            </Filters>\n          }\n          flushFilters\n          items={[\n            {\n              id: '341',\n              url: '#',\n              name: 'Mae Jemison',\n              location: 'Decatur, USA',\n            },\n            {\n              id: '256',\n              url: '#',\n              name: 'Ellen Ochoa',\n              location: 'Los Angeles, USA',\n            },\n          ]}\n          renderItem={(item) => {\n            const {id, url, name, location} = item;\n            const media = <Avatar customer size=\"md\" name={name} />;\n\n            return (\n              <ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              >\n                <Text as=\"h3\" variant=\"bodyMd\" fontWeight=\"bold\">\n                  {name}\n                </Text>\n                <div>{location}</div>\n              </ResourceList.Item>\n            );\n          }}\n        />\n      </LegacyCard>\n    </div>\n  );\n\n  function disambiguateLabel(key: string, value: string): string {\n    switch (key) {\n      case 'taggedWith':\n        return `Tagged with ${value}`;\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value: string): boolean {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === '' || value == null;\n    }\n  }\n}\n\n"},{"fileName":"filters-with-query-field-hidden.tsx","title":"With query field hidden","description":null,"code":"import {\n  ChoiceList,\n  TextField,\n  RangeSlider,\n  LegacyCard,\n  ResourceList,\n  Filters,\n  Avatar,\n  Text,\n  Button,\n} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction ResourceListFiltersExample() {\n  const [accountStatus, setAccountStatus] = useState<string[] | undefined>(\n    undefined,\n  );\n  const [moneySpent, setMoneySpent] = useState<[number, number] | undefined>(\n    undefined,\n  );\n  const [taggedWith, setTaggedWith] = useState<string | undefined>(undefined);\n  const [queryValue, setQueryValue] = useState<string | undefined>(undefined);\n\n  const handleAccountStatusChange = useCallback(\n    (value: string[]) => setAccountStatus(value),\n    [],\n  );\n  const handleMoneySpentChange = useCallback(\n    (value: [number, number]) => setMoneySpent(value),\n    [],\n  );\n  const handleTaggedWithChange = useCallback(\n    (value: string) => setTaggedWith(value),\n    [],\n  );\n  const handleFiltersQueryChange = useCallback(\n    (value: string) => setQueryValue(value),\n    [],\n  );\n  const handleAccountStatusRemove = useCallback(\n    () => setAccountStatus(undefined),\n    [],\n  );\n  const handleMoneySpentRemove = useCallback(\n    () => setMoneySpent(undefined),\n    [],\n  );\n  const handleTaggedWithRemove = useCallback(\n    () => setTaggedWith(undefined),\n    [],\n  );\n  const handleQueryValueRemove = useCallback(\n    () => setQueryValue(undefined),\n    [],\n  );\n  const handleFiltersClearAll = useCallback(() => {\n    handleAccountStatusRemove();\n    handleMoneySpentRemove();\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [\n    handleAccountStatusRemove,\n    handleMoneySpentRemove,\n    handleQueryValueRemove,\n    handleTaggedWithRemove,\n  ]);\n\n  const filters = [\n    {\n      key: 'accountStatus',\n      label: 'Account status',\n      filter: (\n        <ChoiceList\n          title=\"Account status\"\n          titleHidden\n          choices={[\n            {label: 'Enabled', value: 'enabled'},\n            {label: 'Not invited', value: 'not invited'},\n            {label: 'Invited', value: 'invited'},\n            {label: 'Declined', value: 'declined'},\n          ]}\n          selected={accountStatus || []}\n          onChange={handleAccountStatusChange}\n          allowMultiple\n        />\n      ),\n      shortcut: true,\n    },\n    {\n      key: 'taggedWith',\n      label: 'Tagged with',\n      filter: (\n        <TextField\n          label=\"Tagged with\"\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=\"off\"\n          labelHidden\n        />\n      ),\n      shortcut: true,\n    },\n    {\n      key: 'moneySpent',\n      label: 'Money spent',\n      filter: (\n        <RangeSlider\n          label=\"Money spent is between\"\n          labelHidden\n          value={moneySpent || [0, 500]}\n          prefix=\"$\"\n          output\n          min={0}\n          max={2000}\n          step={1}\n          onChange={handleMoneySpentChange}\n        />\n      ),\n    },\n  ];\n\n  const appliedFilters = [];\n  if (!isEmpty(accountStatus)) {\n    const key = 'accountStatus';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, accountStatus),\n      onRemove: handleAccountStatusRemove,\n    });\n  }\n  if (!isEmpty(moneySpent)) {\n    const key = 'moneySpent';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, moneySpent),\n      onRemove: handleMoneySpentRemove,\n    });\n  }\n  if (!isEmpty(taggedWith)) {\n    const key = 'taggedWith';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, taggedWith),\n      onRemove: handleTaggedWithRemove,\n    });\n  }\n\n  return (\n    <div style={{height: '568px'}}>\n      <LegacyCard>\n        <ResourceList\n          resourceName={{singular: 'customer', plural: 'customers'}}\n          filterControl={\n            <Filters\n              queryValue={queryValue}\n              filters={filters}\n              appliedFilters={appliedFilters}\n              onQueryChange={handleFiltersQueryChange}\n              onQueryClear={handleQueryValueRemove}\n              onClearAll={handleFiltersClearAll}\n              hideQueryField\n            >\n              <Button\n                onClick={() => console.log('New filter saved')}\n                size=\"micro\"\n                variant=\"tertiary\"\n              >\n                Save\n              </Button>\n            </Filters>\n          }\n          flushFilters\n          items={[\n            {\n              id: '341',\n              url: '#',\n              name: 'Mae Jemison',\n              location: 'Decatur, USA',\n            },\n            {\n              id: '256',\n              url: '#',\n              name: 'Ellen Ochoa',\n              location: 'Los Angeles, USA',\n            },\n          ]}\n          renderItem={(item) => {\n            const {id, url, name, location} = item;\n            const media = <Avatar customer size=\"md\" name={name} />;\n\n            return (\n              <ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              >\n                <Text as=\"h3\" variant=\"bodyMd\" fontWeight=\"bold\">\n                  {name}\n                </Text>\n                <div>{location}</div>\n              </ResourceList.Item>\n            );\n          }}\n        />\n      </LegacyCard>\n    </div>\n  );\n\n  function disambiguateLabel(key: string, value: any) {\n    switch (key) {\n      case 'moneySpent':\n        return `Money spent is between $${value[0]} and $${value[1]}`;\n      case 'taggedWith':\n        return `Tagged with ${value}`;\n      case 'accountStatus':\n        return value.map((val: string) => `Customer ${val}`).join(', ');\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(\n    value: string | string[] | [number, number] | undefined,\n  ): boolean {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === '' || value == null;\n    }\n  }\n}\n\n"},{"fileName":"filters-with-query-field-disabled.tsx","title":"With query field disabled","description":null,"code":"import {\n  ChoiceList,\n  TextField,\n  RangeSlider,\n  LegacyCard,\n  ResourceList,\n  Filters,\n  Avatar,\n  Text,\n} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction FiltersWithQueryFieldDisabledExample() {\n  const [accountStatus, setAccountStatus] = useState<string[] | undefined>(\n    undefined,\n  );\n  const [moneySpent, setMoneySpent] = useState<[number, number] | undefined>(\n    undefined,\n  );\n  const [taggedWith, setTaggedWith] = useState<string | undefined>(undefined);\n  const [queryValue, setQueryValue] = useState<string | undefined>(undefined);\n\n  const handleAccountStatusChange = useCallback(\n    (value: string[]) => setAccountStatus(value),\n    [],\n  );\n  const handleMoneySpentChange = useCallback(\n    (value: [number, number]) => setMoneySpent(value),\n    [],\n  );\n  const handleTaggedWithChange = useCallback(\n    (value: string) => setTaggedWith(value),\n    [],\n  );\n  const handleFiltersQueryChange = useCallback(\n    (value: string) => setQueryValue(value),\n    [],\n  );\n  const handleAccountStatusRemove = useCallback(\n    () => setAccountStatus(undefined),\n    [],\n  );\n  const handleMoneySpentRemove = useCallback(\n    () => setMoneySpent(undefined),\n    [],\n  );\n  const handleTaggedWithRemove = useCallback(\n    () => setTaggedWith(undefined),\n    [],\n  );\n  const handleQueryValueRemove = useCallback(\n    () => setQueryValue(undefined),\n    [],\n  );\n  const handleFiltersClearAll = useCallback(() => {\n    handleAccountStatusRemove();\n    handleMoneySpentRemove();\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [\n    handleAccountStatusRemove,\n    handleMoneySpentRemove,\n    handleQueryValueRemove,\n    handleTaggedWithRemove,\n  ]);\n\n  const filters = [\n    {\n      key: 'accountStatus',\n      label: 'Account status',\n      filter: (\n        <ChoiceList\n          title=\"Account status\"\n          titleHidden\n          choices={[\n            {label: 'Enabled', value: 'enabled'},\n            {label: 'Not invited', value: 'not invited'},\n            {label: 'Invited', value: 'invited'},\n            {label: 'Declined', value: 'declined'},\n          ]}\n          selected={accountStatus || []}\n          onChange={handleAccountStatusChange}\n          allowMultiple\n        />\n      ),\n      shortcut: true,\n    },\n    {\n      key: 'taggedWith',\n      label: 'Tagged with',\n      filter: (\n        <TextField\n          label=\"Tagged with\"\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=\"off\"\n          labelHidden\n        />\n      ),\n      shortcut: true,\n    },\n    {\n      key: 'moneySpent',\n      label: 'Money spent',\n      filter: (\n        <RangeSlider\n          label=\"Money spent is between\"\n          labelHidden\n          value={moneySpent || [0, 500]}\n          prefix=\"$\"\n          output\n          min={0}\n          max={2000}\n          step={1}\n          onChange={handleMoneySpentChange}\n        />\n      ),\n    },\n  ];\n\n  const appliedFilters = [];\n  if (!isEmpty(accountStatus)) {\n    const key = 'accountStatus';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, accountStatus),\n      onRemove: handleAccountStatusRemove,\n    });\n  }\n  if (!isEmpty(moneySpent)) {\n    const key = 'moneySpent';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, moneySpent),\n      onRemove: handleMoneySpentRemove,\n    });\n  }\n  if (!isEmpty(taggedWith)) {\n    const key = 'taggedWith';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, taggedWith),\n      onRemove: handleTaggedWithRemove,\n    });\n  }\n\n  return (\n    <div style={{height: '568px'}}>\n      <LegacyCard>\n        <ResourceList\n          resourceName={{singular: 'customer', plural: 'customers'}}\n          filterControl={\n            <Filters\n              queryValue={queryValue}\n              filters={filters}\n              appliedFilters={appliedFilters}\n              onQueryChange={handleFiltersQueryChange}\n              onQueryClear={handleQueryValueRemove}\n              onClearAll={handleFiltersClearAll}\n              disableQueryField\n            />\n          }\n          flushFilters\n          items={[\n            {\n              id: '341',\n              url: '#',\n              name: 'Mae Jemison',\n              location: 'Decatur, USA',\n            },\n            {\n              id: '256',\n              url: '#',\n              name: 'Ellen Ochoa',\n              location: 'Los Angeles, USA',\n            },\n          ]}\n          renderItem={(item) => {\n            const {id, url, name, location} = item;\n            const media = <Avatar customer size=\"md\" name={name} />;\n\n            return (\n              <ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              >\n                <Text as=\"h3\" variant=\"bodyMd\" fontWeight=\"bold\">\n                  {name}\n                </Text>\n                <div>{location}</div>\n              </ResourceList.Item>\n            );\n          }}\n        />\n      </LegacyCard>\n    </div>\n  );\n\n  function disambiguateLabel(key: string, value: any) {\n    switch (key) {\n      case 'moneySpent':\n        return `Money spent is between $${value[0]} and $${value[1]}`;\n      case 'taggedWith':\n        return `Tagged with ${value}`;\n      case 'accountStatus':\n        return value.map((val: string) => `Customer ${val}`).join(', ');\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(\n    value: string | string[] | [number, number] | undefined,\n  ): boolean {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === '' || value == null;\n    }\n  }\n}\n\n"}],"seoDescription":"Filters is a composite component that filters the items of a list or table.","type":{"FiltersProps":{"filePath":"polaris-react/src/components/Filters/Filters.tsx","name":"FiltersProps","description":"","members":[{"filePath":"polaris-react/src/components/Filters/Filters.tsx","syntaxKind":"PropertySignature","name":"queryValue","value":"string","description":"Currently entered text in the query field","isOptional":true},{"filePath":"polaris-react/src/components/Filters/Filters.tsx","syntaxKind":"PropertySignature","name":"queryPlaceholder","value":"string","description":"Placeholder text for the query field.","isOptional":true},{"filePath":"polaris-react/src/components/Filters/Filters.tsx","syntaxKind":"PropertySignature","name":"focused","value":"boolean","description":"Whether the query field is focused.","isOptional":true},{"filePath":"polaris-react/src/components/Filters/Filters.tsx","syntaxKind":"PropertySignature","name":"filters","value":"FilterInterface[]","description":"Available filters added to the filter bar. Shortcut filters are pinned to the front of the bar."},{"filePath":"polaris-react/src/components/Filters/Filters.tsx","syntaxKind":"PropertySignature","name":"appliedFilters","value":"AppliedFilterInterface[]","description":"Applied filters which are rendered as filter pills. The remove callback is called with the respective key.","isOptional":true},{"filePath":"polaris-react/src/components/Filters/Filters.tsx","syntaxKind":"PropertySignature","name":"onQueryChange","value":"(queryValue: string) => void","description":"Callback when the query field is changed."},{"filePath":"polaris-react/src/components/Filters/Filters.tsx","syntaxKind":"PropertySignature","name":"onQueryClear","value":"() => void","description":"Callback when the clear button is triggered."},{"filePath":"polaris-react/src/components/Filters/Filters.tsx","syntaxKind":"PropertySignature","name":"onClearAll","value":"() => void","description":"Callback when the reset all button is pressed."},{"filePath":"polaris-react/src/components/Filters/Filters.tsx","syntaxKind":"PropertySignature","name":"onQueryBlur","value":"() => void","description":"Callback when the query field is blurred.","isOptional":true},{"filePath":"polaris-react/src/components/Filters/Filters.tsx","syntaxKind":"PropertySignature","name":"onQueryFocus","value":"() => void","description":"Callback when the query field is focused.","isOptional":true},{"filePath":"polaris-react/src/components/Filters/Filters.tsx","syntaxKind":"PropertySignature","name":"children","value":"ReactNode","description":"The content to display inline with the controls.","isOptional":true},{"filePath":"polaris-react/src/components/Filters/Filters.tsx","syntaxKind":"PropertySignature","name":"disabled","value":"boolean","description":"Disable all filters.","isOptional":true},{"filePath":"polaris-react/src/components/Filters/Filters.tsx","syntaxKind":"PropertySignature","name":"hideFilters","value":"boolean","description":"Hide filter bar for applied filters.","isOptional":true},{"filePath":"polaris-react/src/components/Filters/Filters.tsx","syntaxKind":"PropertySignature","name":"hideQueryField","value":"boolean","description":"Hide the query field.","isOptional":true},{"filePath":"polaris-react/src/components/Filters/Filters.tsx","syntaxKind":"PropertySignature","name":"disableQueryField","value":"boolean","description":"Disable the query field.","isOptional":true},{"filePath":"polaris-react/src/components/Filters/Filters.tsx","syntaxKind":"PropertySignature","name":"disableFilters","value":"boolean","description":"Disable the filters","isOptional":true},{"filePath":"polaris-react/src/components/Filters/Filters.tsx","syntaxKind":"PropertySignature","name":"borderlessQueryField","value":"boolean","description":"Whether the text field should be borderless. Should be true when used as part of the IndexFilters component.","isOptional":true},{"filePath":"polaris-react/src/components/Filters/Filters.tsx","syntaxKind":"PropertySignature","name":"loading","value":"boolean","description":"Whether an asyncronous task is currently being run.","isOptional":true},{"filePath":"polaris-react/src/components/Filters/Filters.tsx","syntaxKind":"PropertySignature","name":"mountedState","value":"TransitionStatus","description":"","isOptional":true},{"filePath":"polaris-react/src/components/Filters/Filters.tsx","syntaxKind":"PropertySignature","name":"onAddFilterClick","value":"() => void","description":"Callback when the add filter button is clicked.","isOptional":true},{"filePath":"polaris-react/src/components/Filters/Filters.tsx","syntaxKind":"PropertySignature","name":"closeOnChildOverlayClick","value":"boolean","description":"Whether the filter should close when clicking inside another Popover.","isOptional":true}],"value":"export interface FiltersProps {\n  /** Currently entered text in the query field */\n  queryValue?: string;\n  /** Placeholder text for the query field. */\n  queryPlaceholder?: string;\n  /** Whether the query field is focused. */\n  focused?: boolean;\n  /** Available filters added to the filter bar. Shortcut filters are pinned to the front of the bar. */\n  filters: FilterInterface[];\n  /** Applied filters which are rendered as filter pills. The remove callback is called with the respective key. */\n  appliedFilters?: AppliedFilterInterface[];\n  /** Callback when the query field is changed. */\n  onQueryChange: (queryValue: string) => void;\n  /** Callback when the clear button is triggered. */\n  onQueryClear: () => void;\n  /** Callback when the reset all button is pressed. */\n  onClearAll: () => void;\n  /** Callback when the query field is blurred. */\n  onQueryBlur?: () => void;\n  /** Callback when the query field is focused. */\n  onQueryFocus?: () => void;\n  /** The content to display inline with the controls. */\n  children?: ReactNode;\n  /** Disable all filters. */\n  disabled?: boolean;\n  /** Hide filter bar for applied filters. */\n  hideFilters?: boolean;\n  /** Hide the query field. */\n  hideQueryField?: boolean;\n  /** Disable the query field. */\n  disableQueryField?: boolean;\n  /** Disable the filters */\n  disableFilters?: boolean;\n  /** Whether the text field should be borderless. Should be true when used as part of the IndexFilters component. */\n  borderlessQueryField?: boolean;\n  /** Whether an asyncronous task is currently being run. */\n  loading?: boolean;\n  mountedState?: TransitionStatus;\n  /** Callback when the add filter button is clicked. */\n  onAddFilterClick?: () => void;\n  /** Whether the filter should close when clicking inside another Popover. */\n  closeOnChildOverlayClick?: boolean;\n}"}},"editPageLinkPath":"polaris.shopify.com/content/components/selection-and-input/filters.mdx"},"__N_SSG":true}