{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    hr: \"hr\",\n    a: \"a\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components), {Lede, Examples, Props} = _components;\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"A wrapper component that handles the submission of forms.\"\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The form component should be used to:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Wrap around all form input elements\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Emulate the native HTML \", _jsx(_components.code, {\n          children: \"form\"\n        }), \" element behavior with a custom \", _jsx(_components.code, {\n          children: \"onSubmit\"\n        }), \" callback\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"related-components\",\n      children: \"Related components\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"To arrange fields within a form using standard spacing, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/form-layout\",\n          children: \"use the form layout component\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To see all of the components that make up a form, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/checkbox#navigation\",\n          children: \"visit the form section\"\n        }), \" of the component library\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"accessibility\",\n      children: \"Accessibility\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The form component wraps content in an HTML \", _jsx(_components.code, {\n        children: \"<form>\"\n      }), \" element. This helps to support assistive technologies that use different interaction and browse modes.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Forms can have only one submit button and it must be at the end of the form. By default, buttons added to the form are given a \", _jsx(_components.code, {\n        children: \"type\"\n      }), \" attribute set to \", _jsx(_components.code, {\n        children: \"button\"\n      }), \" to avoid conflicts. To make a button the submit button instead (\", _jsx(_components.code, {\n        children: \"type=\\\"submit\\\"\"\n      }), \"), set the \", _jsx(_components.code, {\n        children: \"submit\"\n      }), \" prop on the button.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"keyboard-support\",\n      children: \"Keyboard support\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, the \", _jsx(_components.code, {\n        children: \"implicitSubmit\"\n      }), \" prop is set to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \". This allows merchants to submit the form with the \", _jsx(\"kbd\", {\n        children: \"enter\"\n      }), \"/\", _jsx(\"kbd\", {\n        children: \"return\"\n      }), \" key when focus is in any text field inside the form. This provides a shortcut for keyboard users. If this behavior doesn’t fit the form, then set the prop to \", _jsx(_components.code, {\n        children: \"false\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Form","category":"Selection and input","keywords":["form","forms","input","checkbox","check box","textfield","text field","post","get"],"examples":[{"fileName":"form-custom-on-submit.tsx","title":"Custom onSubmit","description":"Use onSubmit as a callback for when your form is submitted."},{"fileName":"form-without-native-validation.tsx","title":"Without native validation","description":"Use in forms to toggle native form validation."}],"previewImg":"/images/components/selection-and-input/form.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"form-custom-on-submit.tsx","title":"Custom onSubmit","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use onSubmit as a callback for when your form is submitted.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Form, FormLayout, Checkbox, TextField, Button} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction FormOnSubmitExample() {\n  const [newsletter, setNewsletter] = useState(false);\n  const [email, setEmail] = useState('');\n\n  const handleSubmit = useCallback(() => {\n    setEmail('');\n    setNewsletter(false);\n  }, []);\n\n  const handleNewsLetterChange = useCallback(\n    (value: boolean) => setNewsletter(value),\n    [],\n  );\n\n  const handleEmailChange = useCallback((value: string) => setEmail(value), []);\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <FormLayout>\n        <Checkbox\n          label=\"Sign up for the Polaris newsletter\"\n          checked={newsletter}\n          onChange={handleNewsLetterChange}\n        />\n\n        <TextField\n          value={email}\n          onChange={handleEmailChange}\n          label=\"Email\"\n          type=\"email\"\n          autoComplete=\"email\"\n          helpText={\n            <span>\n              We’ll use this email address to inform you on future changes to\n              Polaris.\n            </span>\n          }\n        />\n\n        <Button submit>Submit</Button>\n      </FormLayout>\n    </Form>\n  );\n}\n\n"},{"fileName":"form-without-native-validation.tsx","title":"Without native validation","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use in forms to toggle native form validation.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Form, FormLayout, TextField, Button} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction FormWithoutNativeValidationExample() {\n  const [url, setUrl] = useState('');\n\n  const handleSubmit = useCallback(() => setUrl(''), []);\n\n  const handleUrlChange = useCallback((value: string) => setUrl(value), []);\n\n  return (\n    <Form noValidate onSubmit={handleSubmit}>\n      <FormLayout>\n        <TextField\n          value={url}\n          onChange={handleUrlChange}\n          label=\"App URL\"\n          type=\"url\"\n          autoComplete=\"off\"\n        />\n\n        <Button submit>Submit</Button>\n      </FormLayout>\n    </Form>\n  );\n}\n\n"}],"seoDescription":"A wrapper component that handles the submission of forms.","type":{"FormProps":{"filePath":"polaris-react/src/components/Form/Form.tsx","name":"FormProps","description":"","members":[{"filePath":"polaris-react/src/components/Form/Form.tsx","syntaxKind":"PropertySignature","name":"acceptCharset","value":"string","description":"Space separated list of character encodings","isOptional":true},{"filePath":"polaris-react/src/components/Form/Form.tsx","syntaxKind":"PropertySignature","name":"action","value":"string","description":"Where to send form-data on submittal","isOptional":true},{"filePath":"polaris-react/src/components/Form/Form.tsx","syntaxKind":"PropertySignature","name":"autoComplete","value":"boolean","description":"Grants the browser the ability to autocomplete input elements","isOptional":true},{"filePath":"polaris-react/src/components/Form/Form.tsx","syntaxKind":"PropertySignature","name":"children","value":"React.ReactNode","description":"The content to display inside the form.","isOptional":true},{"filePath":"polaris-react/src/components/Form/Form.tsx","syntaxKind":"PropertySignature","name":"encType","value":"Enctype","description":"Media type when submitting content to server","isOptional":true},{"filePath":"polaris-react/src/components/Form/Form.tsx","syntaxKind":"PropertySignature","name":"implicitSubmit","value":"boolean","description":"Toggles if form submits on Enter keypress. Defaults to true.","isOptional":true},{"filePath":"polaris-react/src/components/Form/Form.tsx","syntaxKind":"PropertySignature","name":"method","value":"Method","description":"Method used to submit form","isOptional":true},{"filePath":"polaris-react/src/components/Form/Form.tsx","syntaxKind":"PropertySignature","name":"name","value":"string","description":"A unique name for the form","isOptional":true},{"filePath":"polaris-react/src/components/Form/Form.tsx","syntaxKind":"PropertySignature","name":"noValidate","value":"boolean","description":"Whether or not form is validated when submitting","isOptional":true},{"filePath":"polaris-react/src/components/Form/Form.tsx","syntaxKind":"PropertySignature","name":"preventDefault","value":"boolean","description":"Blocks the default form action","isOptional":true},{"filePath":"polaris-react/src/components/Form/Form.tsx","syntaxKind":"PropertySignature","name":"target","value":"string","description":"Where to display response after form submittal","isOptional":true},{"filePath":"polaris-react/src/components/Form/Form.tsx","syntaxKind":"MethodSignature","name":"onSubmit","value":"(event: React.FormEvent<HTMLFormElement>) => unknown","description":"Callback when form is submitted"}],"value":"export interface FormProps {\n  /** Space separated list of character encodings */\n  acceptCharset?: string;\n  /** Where to send form-data on submittal */\n  action?: string;\n  /** Grants the browser the ability to autocomplete input elements */\n  autoComplete?: boolean;\n  /** The content to display inside the form. */\n  children?: React.ReactNode;\n  /** Media type when submitting content to server */\n  encType?: Enctype;\n  /** Toggles if form submits on Enter keypress. Defaults to true. */\n  implicitSubmit?: boolean;\n  /** Method used to submit form */\n  method?: Method;\n  /** A unique name for the form */\n  name?: string;\n  /** Whether or not form is validated when submitting */\n  noValidate?: boolean;\n  /** Blocks the default form action */\n  preventDefault?: boolean;\n  /** Where to display response after form submittal */\n  target?: Target;\n  /** Callback when form is submitted */\n  onSubmit(event: React.FormEvent<HTMLFormElement>): unknown;\n}"},"Enctype":{"filePath":"polaris-react/src/components/Form/Form.tsx","syntaxKind":"TypeAliasDeclaration","name":"Enctype","value":"'application/x-www-form-urlencoded' | 'multipart/form-data' | 'text/plain'","description":""},"Method":{"filePath":"polaris-react/src/components/Form/Form.tsx","syntaxKind":"TypeAliasDeclaration","name":"Method","value":"'post' | 'get' | 'action'","description":""}},"editPageLinkPath":"polaris.shopify.com/content/components/selection-and-input/form.mdx"},"__N_SSG":true}