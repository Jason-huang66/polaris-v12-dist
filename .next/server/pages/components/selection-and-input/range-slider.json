{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    hr: \"hr\",\n    h3: \"h3\",\n    h4: \"h4\",\n    a: \"a\"\n  }, _provideComponents(), props.components), {Lede, Examples, Props, DoDont} = _components;\n  if (!DoDont) _missingMdxReference(\"DoDont\", true);\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"A range slider is an input field that merchants can use to select a numeric value within a given range (minimum and maximum values).\"\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Range sliders should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Always be used with a label, even if that label is \", _jsx(_components.code, {\n          children: \"hidden\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"When a label is visible, it should clearly communicate the purpose of the range input and its values (min, max, step, value)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Be labeled as “Optional” when you need to request input that’s not required\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Validate input as soon as merchants have finished interacting with a field (but not before)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Always be used with two text field components when range slider has dual thumbs, to provide accessible alternatives to both the lower and upper thumbs\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"content-guidelines\",\n      children: \"Content guidelines\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"range-label\",\n      children: \"Range label\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A label is a short description of the requested input. Labels are not instructional text but they should be meaningful and clearly indicate what is expected. Labels should be:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Placed above the form field\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Short and succinct (1–3 words)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Written in sentence case (the first word capitalized, the rest lowercase)\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Saturation percentage\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Banner width\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"What is the saturation value?\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"The banner width is:\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"designating-optional-fields\",\n      children: \"Designating optional fields\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Try to only ask for information that’s required. If you need to ask merchants to provide optional information, mark the field optional by placing the text “(optional)” at the end of the field’s label. Don’t mark required fields with asterisks.\"\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-1\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Banner width (optional)\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont-1\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Banner width\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"help-text\",\n      children: \"Help text\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Help text provides extra guidance or instruction to people filling out a form field. It can also be used to clarify how the information will be used. As with all form content, help text should be succinct and easy to read.\"\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-2\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Video duration is calculated in seconds\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont-2\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Example: 134 seconds\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"validation-error-messages\",\n      children: \"Validation error messages\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Error messages should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Clearly explain what went wrong and how to fix it\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Be short and concise, no more than a single sentence\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Use \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/content/grammar-and-mechanics\",\n          children: \"passive voice\"\n        }), \" so merchants don’t feel like they’re being blamed for the error\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-3\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Video duration is required\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont-3\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"You didn’t enter a duration\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"related-components\",\n      children: \"Related components\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"To collect a number value as a text input, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/selection-and-input/text-field\",\n          children: \"use the text field component\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"accessibility\",\n      children: \"Accessibility\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The range slider provides a large click and tap target for the slider thumbs. Merchants can also tap or click on the slider track to move the closest slider thumb.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"single-thumb-slider\",\n      children: \"Single-thumb slider\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The default range slider component uses the \", _jsx(_components.a, {\n        href: \"https://www.w3.org/TR/wai-aria-practices-1.1/#slider\",\n        children: \"ARIA 1.1 slider pattern\"\n      }), \" to build upon the default HTML \", _jsx(_components.code, {\n        children: \"<input type=\\\"range\\\">\"\n      }), \". The required \", _jsx(_components.code, {\n        children: \"label\"\n      }), \" prop provides a label for the field that’s conveyed to assistive technologies when it receives focus. When the slider is used, the \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" prop should update visually and programmatically to reflect the current value.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To consistently provide the current value to assistive technologies, use the \", _jsx(_components.code, {\n        children: \"min\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"max\"\n      }), \" props to provide the minimum and maximum values for the slider.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"dual-thumb-slider\",\n      children: \"Dual-thumb slider\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The dual-thumb range slider component uses the \", _jsx(_components.a, {\n        href: \"https://www.w3.org/TR/wai-aria-practices-1.1/#slidertwothumb\",\n        children: \"ARIA 1.1 slider (multi-thumb) pattern\"\n      }), \". However, the pattern isn’t consistently supported by screen readers, especially on mobile devices. Because of this, it’s best to pair the dual-thumb slider with a set of text fields for each value, or to provide another accessible method for entering information.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"keyboard\",\n      children: \"Keyboard\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"To move focus to a slider thumb, press the \", _jsx(\"kbd\", {\n          children: \"tab\"\n        }), \" key to move forward and or \", _jsx(\"kbd\", {\n          children: \"shift\"\n        }), \" + \", _jsx(\"kbd\", {\n          children: \"tab\"\n        }), \" to move backward\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"When a thumb has focus, use the up and down or left and right arrow keys to move the thumb and update the associated value.\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Range slider","category":"Selection and input","keywords":["RangeSlider","input","range","slider","percent","number","range form"],"examples":[{"fileName":"range-slider-default.tsx","title":"Default","description":"Use when a single value between `0 and 100` needs to be selected."},{"fileName":"range-slider-with-min-and-max.tsx","title":"With min and max","description":"Use when a single value needs to be selected from a number range with a specific minimum and maximum."},{"fileName":"range-slider-with-steps.tsx","title":"With steps","description":"Use when a single value of a specific increment needs to be selected from a range of numbers."},{"fileName":"range-slider-with-prefix-and-suffix.tsx","title":"With prefix and suffix","description":"Use when the start or end of the range input benefits from additional content. The height of the range slider component varies based on the presence or absence of props like `label` and `helpText`. Setting a React element on the `prefix` and `suffix` props is supported to enable control of spacing and alignment."},{"fileName":"range-slider-with-dual-thumb.tsx","title":"With dual thumb","description":"Use when two values need to be selected from a range of numbers."}],"previewImg":"/images/components/selection-and-input/range-slider.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"range-slider-default.tsx","title":"Default","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_components.p, {\n    children: [\"Use when a single value between \", _jsx(_components.code, {\n      children: \"0 and 100\"\n    }), \" needs to be selected.\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyCard, RangeSlider} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction RangeSliderExample() {\n  const [rangeValue, setRangeValue] = useState(32);\n\n  const handleRangeSliderChange = useCallback(\n    (value: number) => setRangeValue(value),\n    [],\n  );\n\n  return (\n    <LegacyCard sectioned title=\"Background color\">\n      <RangeSlider\n        label=\"Opacity percentage\"\n        value={rangeValue}\n        onChange={handleRangeSliderChange}\n        output\n      />\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"range-slider-with-min-and-max.tsx","title":"With min and max","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when a single value needs to be selected from a number range with a specific minimum and maximum.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyCard, RangeSlider} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction RangeSliderWithPreciseRangeControlExample() {\n  const [rangeValue, setRangeValue] = useState(0);\n\n  const handleRangeSliderChange = useCallback(\n    (value: number) => setRangeValue(value),\n    [],\n  );\n\n  return (\n    <LegacyCard sectioned title=\"Navigation branding\">\n      <RangeSlider\n        output\n        label=\"Logo offset\"\n        min={-20}\n        max={20}\n        value={rangeValue}\n        onChange={handleRangeSliderChange}\n      />\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"range-slider-with-steps.tsx","title":"With steps","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when a single value of a specific increment needs to be selected from a range of numbers.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyCard, RangeSlider} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction RangeSliderWithPreciseRangeControlExample() {\n  const [rangeValue, setRangeValue] = useState(4);\n\n  const handleRangeSliderChange = useCallback(\n    (value: number) => setRangeValue(value),\n    [],\n  );\n\n  return (\n    <LegacyCard sectioned title=\"Navigation branding\">\n      <RangeSlider\n        output\n        label=\"Logo offset\"\n        min={-20}\n        max={20}\n        step={4}\n        value={rangeValue}\n        onChange={handleRangeSliderChange}\n      />\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"range-slider-with-prefix-and-suffix.tsx","title":"With prefix and suffix","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_components.p, {\n    children: [\"Use when the start or end of the range input benefits from additional content. The height of the range slider component varies based on the presence or absence of props like \", _jsx(_components.code, {\n      children: \"label\"\n    }), \" and \", _jsx(_components.code, {\n      children: \"helpText\"\n    }), \". Setting a React element on the \", _jsx(_components.code, {\n      children: \"prefix\"\n    }), \" and \", _jsx(_components.code, {\n      children: \"suffix\"\n    }), \" props is supported to enable control of spacing and alignment.\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyCard, RangeSlider} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction RangeSliderWithPrefixAndSuffixExample() {\n  const [rangeValue, setRangeValue] = useState(100);\n\n  const handleRangeSliderChange = useCallback(\n    (value: number) => setRangeValue(value),\n    [],\n  );\n\n  return (\n    <LegacyCard sectioned title=\"Text color\">\n      <RangeSlider\n        output\n        label=\"Hue color mix\"\n        min={0}\n        max={360}\n        value={rangeValue}\n        onChange={handleRangeSliderChange}\n        prefix={<p>Hue</p>}\n        suffix={\n          <p\n            style={{\n              minWidth: '24px',\n              textAlign: 'right',\n            }}\n          >\n            {rangeValue}\n          </p>\n        }\n      />\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"range-slider-with-dual-thumb.tsx","title":"With dual thumb","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when two values need to be selected from a range of numbers.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  LegacyCard,\n  RangeSlider,\n  LegacyStack,\n  TextField,\n} from '@shopify/polaris';\nimport {useState, useCallback, KeyboardEventHandler} from 'react';\n\nfunction DualThumbRangeSliderExample() {\n  const initialValue: [number, number] = [900, 1000];\n  const prefix = '$';\n  const min = 0;\n  const max = 2000;\n  const step = 10;\n\n  const [intermediateTextFieldValue, setIntermediateTextFieldValue] =\n    useState(initialValue);\n  const [rangeValue, setRangeValue] = useState(initialValue);\n\n  const handleRangeSliderChange = useCallback((value: [number, number]) => {\n    setRangeValue(value);\n    setIntermediateTextFieldValue(value);\n  }, []);\n\n  const handleLowerTextFieldChange = useCallback(\n    (value: string) => {\n      const upperValue = rangeValue[1];\n      setIntermediateTextFieldValue([parseInt(value, 10), upperValue]);\n    },\n    [rangeValue],\n  );\n\n  const handleUpperTextFieldChange = useCallback(\n    (value: string) => {\n      const lowerValue = rangeValue[0];\n      setIntermediateTextFieldValue([lowerValue, parseInt(value, 10)]);\n    },\n    [rangeValue],\n  );\n\n  const handleLowerTextFieldBlur = useCallback(() => {\n    const upperValue = rangeValue[1];\n    const value = intermediateTextFieldValue[0];\n\n    setRangeValue([value, upperValue]);\n  }, [intermediateTextFieldValue, rangeValue]);\n\n  const handleUpperTextFieldBlur = useCallback(() => {\n    const lowerValue = rangeValue[0];\n    const value = intermediateTextFieldValue[1];\n\n    setRangeValue([lowerValue, value]);\n  }, [intermediateTextFieldValue, rangeValue]);\n\n  const handleEnterKeyPress = useCallback<KeyboardEventHandler>(\n    (event) => {\n      const newValue = intermediateTextFieldValue;\n      const oldValue = rangeValue;\n\n      if (event.key === 'Enter' && newValue !== oldValue) {\n        setRangeValue(newValue);\n      }\n    },\n    [intermediateTextFieldValue, rangeValue],\n  );\n\n  const lowerTextFieldValue =\n    intermediateTextFieldValue[0] === rangeValue[0]\n      ? rangeValue[0]\n      : intermediateTextFieldValue[0];\n\n  const upperTextFieldValue =\n    intermediateTextFieldValue[1] === rangeValue[1]\n      ? rangeValue[1]\n      : intermediateTextFieldValue[1];\n\n  return (\n    <LegacyCard sectioned title=\"Minimum requirements\">\n      <div onKeyDown={handleEnterKeyPress}>\n        <RangeSlider\n          output\n          label=\"Money spent is between\"\n          value={rangeValue}\n          prefix={prefix}\n          min={min}\n          max={max}\n          step={step}\n          onChange={handleRangeSliderChange}\n        />\n        <LegacyStack distribution=\"equalSpacing\" spacing=\"extraLoose\">\n          <TextField\n            label=\"Min money spent\"\n            type=\"number\"\n            value={`${lowerTextFieldValue}`}\n            prefix={prefix}\n            min={min}\n            max={max}\n            step={step}\n            onChange={handleLowerTextFieldChange}\n            onBlur={handleLowerTextFieldBlur}\n            autoComplete=\"off\"\n          />\n          <TextField\n            label=\"Max money spent\"\n            type=\"number\"\n            value={`${upperTextFieldValue}`}\n            prefix={prefix}\n            min={min}\n            max={max}\n            step={step}\n            onChange={handleUpperTextFieldChange}\n            onBlur={handleUpperTextFieldBlur}\n            autoComplete=\"off\"\n          />\n        </LegacyStack>\n      </div>\n    </LegacyCard>\n  );\n}\n\n"}],"seoDescription":"A range slider is an input field that merchants can use to select a numeric value within a given range (minimum and maximum values).","type":{"RangeSliderProps":{"filePath":"polaris-react/src/components/RangeSlider/types.ts","name":"RangeSliderProps","description":"","members":[{"filePath":"polaris-react/src/components/RangeSlider/types.ts","syntaxKind":"PropertySignature","name":"label","value":"ReactNode","description":"Label for the range input"},{"filePath":"polaris-react/src/components/RangeSlider/types.ts","syntaxKind":"PropertySignature","name":"labelAction","value":"Action","description":"Adds an action to the label","isOptional":true},{"filePath":"polaris-react/src/components/RangeSlider/types.ts","syntaxKind":"PropertySignature","name":"labelHidden","value":"boolean","description":"Visually hide the label","isOptional":true},{"filePath":"polaris-react/src/components/RangeSlider/types.ts","syntaxKind":"PropertySignature","name":"id","value":"string","description":"ID for range input","isOptional":true},{"filePath":"polaris-react/src/components/RangeSlider/types.ts","syntaxKind":"PropertySignature","name":"value","value":"RangeSliderValue","description":"Initial value for range input"},{"filePath":"polaris-react/src/components/RangeSlider/types.ts","syntaxKind":"PropertySignature","name":"min","value":"number","description":"Minimum possible value for range input","isOptional":true},{"filePath":"polaris-react/src/components/RangeSlider/types.ts","syntaxKind":"PropertySignature","name":"max","value":"number","description":"Maximum possible value for range input","isOptional":true},{"filePath":"polaris-react/src/components/RangeSlider/types.ts","syntaxKind":"PropertySignature","name":"step","value":"number","description":"Increment value for range input changes","isOptional":true},{"filePath":"polaris-react/src/components/RangeSlider/types.ts","syntaxKind":"PropertySignature","name":"output","value":"boolean","description":"Provide a tooltip while sliding, indicating the current value","isOptional":true},{"filePath":"polaris-react/src/components/RangeSlider/types.ts","syntaxKind":"PropertySignature","name":"helpText","value":"ReactNode","description":"Additional text to aid in use","isOptional":true},{"filePath":"polaris-react/src/components/RangeSlider/types.ts","syntaxKind":"PropertySignature","name":"error","value":"any","description":"Display an error message","isOptional":true},{"filePath":"polaris-react/src/components/RangeSlider/types.ts","syntaxKind":"PropertySignature","name":"disabled","value":"boolean","description":"Disable input","isOptional":true},{"filePath":"polaris-react/src/components/RangeSlider/types.ts","syntaxKind":"PropertySignature","name":"prefix","value":"ReactNode","description":"Element to display before the input","isOptional":true},{"filePath":"polaris-react/src/components/RangeSlider/types.ts","syntaxKind":"PropertySignature","name":"suffix","value":"ReactNode","description":"Element to display after the input","isOptional":true},{"filePath":"polaris-react/src/components/RangeSlider/types.ts","syntaxKind":"MethodSignature","name":"onChange","value":"(value: RangeSliderValue, id: string) => void","description":"Callback when the range input is changed"},{"filePath":"polaris-react/src/components/RangeSlider/types.ts","syntaxKind":"MethodSignature","name":"onFocus","value":"() => void","description":"Callback when range input is focused","isOptional":true},{"filePath":"polaris-react/src/components/RangeSlider/types.ts","syntaxKind":"MethodSignature","name":"onBlur","value":"() => void","description":"Callback when focus is removed","isOptional":true}],"value":"export interface RangeSliderProps {\n  /** Label for the range input */\n  label: React.ReactNode;\n  /** Adds an action to the label */\n  labelAction?: LabelledProps['action'];\n  /** Visually hide the label */\n  labelHidden?: boolean;\n  /** ID for range input */\n  id?: string;\n  /** Initial value for range input */\n  value: RangeSliderValue;\n  /** Minimum possible value for range input */\n  min?: number;\n  /** Maximum possible value for range input */\n  max?: number;\n  /** Increment value for range input changes */\n  step?: number;\n  /** Provide a tooltip while sliding, indicating the current value */\n  output?: boolean;\n  /** Additional text to aid in use */\n  helpText?: React.ReactNode;\n  /** Display an error message */\n  error?: Error;\n  /** Disable input */\n  disabled?: boolean;\n  /** Element to display before the input */\n  prefix?: React.ReactNode;\n  /** Element to display after the input */\n  suffix?: React.ReactNode;\n  /** Callback when the range input is changed */\n  onChange(value: RangeSliderValue, id: string): void;\n  /** Callback when range input is focused */\n  onFocus?(): void;\n  /** Callback when focus is removed */\n  onBlur?(): void;\n}"},"Action":{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Action","description":"","members":[{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"id","value":"string","description":"A unique identifier for the action","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"content","value":"string","description":"Content the action displays","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"accessibilityLabel","value":"string","description":"Visually hidden text for screen readers","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"url","value":"string","description":"A destination to link to, rendered in the action","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"external","value":"boolean","description":"Forces url to open in a new tab","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"target","value":"Target","description":"Where to display the url","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"MethodSignature","name":"onAction","value":"() => void","description":"Callback when an action takes place","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"MethodSignature","name":"onMouseEnter","value":"() => void","description":"Callback when mouse enter","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"MethodSignature","name":"onTouchStart","value":"() => void","description":"Callback when element is touched","isOptional":true}],"value":"export interface Action {\n  /** A unique identifier for the action */\n  id?: string;\n  /** Content the action displays */\n  content?: string;\n  /** Visually hidden text for screen readers */\n  accessibilityLabel?: string;\n  /** A destination to link to, rendered in the action */\n  url?: string;\n  /** Forces url to open in a new tab */\n  external?: boolean;\n  /** Where to display the url */\n  target?: Target;\n  /** Callback when an action takes place */\n  onAction?(): void;\n  /** Callback when mouse enter */\n  onMouseEnter?(): void;\n  /** Callback when element is touched */\n  onTouchStart?(): void;\n}"},"Target":{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"TypeAliasDeclaration","name":"Target","value":"'_blank' | '_self' | '_parent' | '_top'","description":""},"RangeSliderValue":{"filePath":"polaris-react/src/components/RangeSlider/types.ts","syntaxKind":"TypeAliasDeclaration","name":"RangeSliderValue","value":"number | DualValue","description":""},"DualValue":{"filePath":"polaris-react/src/components/RangeSlider/types.ts","syntaxKind":"TypeAliasDeclaration","name":"DualValue","value":"[number, number]","description":""}},"editPageLinkPath":"polaris.shopify.com/content/components/selection-and-input/range-slider.mdx"},"__N_SSG":true}