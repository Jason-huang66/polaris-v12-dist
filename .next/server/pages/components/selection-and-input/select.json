{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    hr: \"hr\",\n    h3: \"h3\",\n    a: \"a\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components), {Lede, Examples, Props, DoDont} = _components;\n  if (!DoDont) _missingMdxReference(\"DoDont\", true);\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"Select lets merchants choose one option from an options menu. Consider select when you have 4 or more options, to avoid cluttering the interface.\"\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The select component should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Be used for selecting between 4 or more pre-defined options\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Have a default option selected whenever possible\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Use “Select” as a placeholder option only if there’s no logical default option\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"content-guidelines\",\n      children: \"Content guidelines\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"select-label\",\n      children: \"Select label\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Labels should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Give a short description (1–3 words) of the requested input.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Be written in sentence case (the first word capitalized, the rest lowercase).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Avoid punctuation and articles (“the”, “an”, “a”).\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Be independent sentences. To support \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/foundations/internationalization\",\n          children: \"internationalization\"\n        }), \", they should not act as the first part of a sentence that is finished by the component’s options.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Be descriptive, not instructional. If the selection needs more explanation, use help text below the field.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Email address\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"What is your email address?\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-1\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Phone number\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont-1\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"My phone number is:\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"select-options\",\n      children: \"Select options\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Options should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Start with “Select” as a placeholder if there isn’t a default option\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Be listed alphabetically or in another logical order so merchants can easily find the option they need\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Be written in sentence case (the first word capitalized, the rest lowercase) and avoid using commas or semicolons at the end of each option\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Be clearly labelled based on what the option will do\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"related-components\",\n      children: \"Related components\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"To let merchants select one option from a list with less than 4 options, use \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/choice-list\",\n          children: \"the choice list component\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To create a select where merchants can make multiple selections, or to allow advanced formatting of option text, use an \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/option-list\",\n          children: \"option list\"\n        }), \" inside a \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/overlays/popover\",\n          children: \"popover\"\n        })]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Select","category":"Selection and input","keywords":["on off","switch","adjuster","dropdown menu","drop-down menu","menu","form","combobox","combo box","choice list","choicelist","list","disabled select","field label","long list of options","long option list","separate error message"],"examples":[{"fileName":"select-default.tsx","title":"Default","description":"Presents a classic dropdown menu or equivalent picker as determined by merchants’ browsers."},{"fileName":"select-with-inline-label.tsx","title":"With inline label","description":"Use only for cases where the select must fit on a single line, such as in a toolbar."},{"fileName":"select-disabled.tsx","title":"Disabled","description":"Use for selections that aren’t currently available. The surrounding interface should make it clear why the select box is disabled and how to activate it."},{"fileName":"select-with-prefix.tsx","title":"With prefix","description":"Renders any React element to the left of individual select options. Does not show in the dropdown."},{"fileName":"select-with-validation-error.tsx","title":"With validation error","description":"Use to let merchants know if there’s a problem with their selection. For selects, a selection is typically invalid only when using a placeholder option (“Select”) and no other selection has been made."},{"fileName":"select-with-separate-validation-error.tsx","title":"With separate validation error","description":"Use to let merchants know when their select input is invalid in the context of a group of form inputs that the select depends on."}],"previewImg":"/images/components/selection-and-input/select.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"select-default.tsx","title":"Default","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Presents a classic dropdown menu or equivalent picker as determined by merchants’ browsers.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Select} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction SelectExample() {\n  const [selected, setSelected] = useState('today');\n\n  const handleSelectChange = useCallback(\n    (value: string) => setSelected(value),\n    [],\n  );\n\n  const options = [\n    {label: 'Today', value: 'today'},\n    {label: 'Yesterday', value: 'yesterday'},\n    {label: 'Last 7 days', value: 'lastWeek'},\n  ];\n\n  return (\n    <Select\n      label=\"Date range\"\n      options={options}\n      onChange={handleSelectChange}\n      value={selected}\n    />\n  );\n}\n\n"},{"fileName":"select-with-inline-label.tsx","title":"With inline label","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use only for cases where the select must fit on a single line, such as in a toolbar.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Select} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction InlineLabelExample() {\n  const [selected, setSelected] = useState('newestUpdate');\n\n  const handleSelectChange = useCallback(\n    (value: string) => setSelected(value),\n    [],\n  );\n\n  const options = [\n    {label: 'Newest update', value: 'newestUpdate'},\n    {label: 'Oldest update', value: 'oldestUpdate'},\n    {label: 'Most spent', value: 'mostSpent'},\n    {label: 'Most orders', value: 'mostOrders'},\n    {label: 'Last name A–Z', value: 'lastNameAlpha'},\n    {label: 'Last name Z–A', value: 'lastNameReverseAlpha'},\n  ];\n\n  return (\n    <Select\n      label=\"Sort by\"\n      labelInline\n      options={options}\n      onChange={handleSelectChange}\n      value={selected}\n    />\n  );\n}\n\n"},{"fileName":"select-disabled.tsx","title":"Disabled","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use for selections that aren’t currently available. The surrounding interface should make it clear why the select box is disabled and how to activate it.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Select} from '@shopify/polaris';\nimport React from 'react';\n\nfunction SelectExample() {\n  return (\n    <Select\n      label=\"Date range\"\n      disabled\n      options={[\n        {label: 'Today', value: 'today'},\n        {label: 'Yesterday', value: 'yesterday'},\n        {label: 'Last 7 days', value: 'lastWeek'},\n      ]}\n    />\n  );\n}\n\n"},{"fileName":"select-with-prefix.tsx","title":"With prefix","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Renders any React element to the left of individual select options. Does not show in the dropdown.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Icon, Select} from '@shopify/polaris';\nimport {CaretUpMinor, CaretDownMinor} from '@shopify/polaris-icons';\nimport {useState, useCallback} from 'react';\n\nfunction PrefixExample() {\n  const [selected, setSelected] = useState('enabled');\n\n  const handleSelectChange = useCallback(\n    (value: string) => setSelected(value),\n    [],\n  );\n\n  const options = [\n    {\n      label: 'Increase',\n      value: 'Increase',\n      prefix: <Icon source={CaretUpMinor} />,\n    },\n    {\n      label: 'Decrease',\n      value: 'Decrease',\n      prefix: <Icon source={CaretDownMinor} />,\n    },\n  ];\n\n  return (\n    <Select\n      label=\"Permission\"\n      options={options}\n      onChange={handleSelectChange}\n      value={selected}\n    />\n  );\n}\n\n"},{"fileName":"select-with-validation-error.tsx","title":"With validation error","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to let merchants know if there’s a problem with their selection. For selects, a selection is typically invalid only when using a placeholder option (“Select”) and no other selection has been made.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Select} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction ValidationErrorExample() {\n  const [selected, setSelected] = useState('');\n\n  const handleSelectChange = useCallback(\n    (value: string) => setSelected(value),\n    [],\n  );\n\n  return (\n    <Select\n      label=\"Province\"\n      options={['Alberta']}\n      value={selected}\n      onChange={handleSelectChange}\n      error=\"Province is required\"\n    />\n  );\n}\n\n"},{"fileName":"select-with-separate-validation-error.tsx","title":"With separate validation error","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to let merchants know when their select input is invalid in the context of a group of form inputs that the select depends on.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  LegacyStack,\n  FormLayout,\n  TextField,\n  Select,\n  InlineError,\n  LegacyCard,\n  Link,\n  Text,\n} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction SeparateValidationErrorExample() {\n  const [weight, setWeight] = useState('12');\n  const [unit, setUnit] = useState('');\n\n  const handleWeightChange = useCallback(\n    (value: string) => setWeight(value),\n    [],\n  );\n  const handleUnitChange = useCallback((value: string) => setUnit(value), []);\n\n  const unitSelectID = 'unit';\n  const errorMessage = generateErrorMessage();\n  const formGroupMarkup = (\n    <LegacyStack vertical spacing=\"extraTight\">\n      <FormLayout>\n        <FormLayout.Group condensed>\n          <TextField\n            label=\"Product weight\"\n            type=\"number\"\n            value={weight}\n            onChange={handleWeightChange}\n            error={Boolean(!weight && unit)}\n            autoComplete=\"off\"\n          />\n          <Select\n            id={unitSelectID}\n            label=\"Unit of measure\"\n            placeholder=\"Select\"\n            options={['oz', 'g', 'kg', 'lb']}\n            value={unit}\n            onChange={handleUnitChange}\n            error={Boolean(!unit && weight)}\n          />\n        </FormLayout.Group>\n      </FormLayout>\n      <InlineError message={errorMessage} fieldID={unitSelectID} />\n    </LegacyStack>\n  );\n\n  return <LegacyCard sectioned>{formGroupMarkup}</LegacyCard>;\n\n  function generateErrorMessage() {\n    const weightError =\n      !weight && unit ? 'The numeric weight of the product ' : '';\n    const unitError =\n      !unit && weight ? 'The unit of measure for the product weight' : '';\n\n    if (!weightError && !unitError) {\n      return '';\n    }\n\n    return (\n      <span>\n        <Text tone=\"critical\" as=\"span\">\n          <p>\n            {`${weightError}${unitError} is required when weight based shipping rates are enabled. `}\n            <Link>Manage shipping</Link>\n          </p>\n        </Text>\n      </span>\n    );\n  }\n}\n\n"}],"seoDescription":"Select lets merchants choose one option from an options menu. Consider select when you have 4 or more options, to avoid cluttering the interface.","type":{"SelectProps":{"filePath":"polaris-react/src/components/Select/Select.tsx","name":"SelectProps","description":"","members":[{"filePath":"polaris-react/src/components/Select/Select.tsx","syntaxKind":"PropertySignature","name":"options","value":"(SelectOption | SelectGroup)[]","description":"List of options or option groups to choose from","isOptional":true},{"filePath":"polaris-react/src/components/Select/Select.tsx","syntaxKind":"PropertySignature","name":"label","value":"React.ReactNode","description":"Label for the select"},{"filePath":"polaris-react/src/components/Select/Select.tsx","syntaxKind":"PropertySignature","name":"labelAction","value":"Action","description":"Adds an action to the label","isOptional":true},{"filePath":"polaris-react/src/components/Select/Select.tsx","syntaxKind":"PropertySignature","name":"labelHidden","value":"boolean","description":"Visually hide the label","isOptional":true},{"filePath":"polaris-react/src/components/Select/Select.tsx","syntaxKind":"PropertySignature","name":"labelInline","value":"boolean","description":"Show the label to the left of the value, inside the control","isOptional":true},{"filePath":"polaris-react/src/components/Select/Select.tsx","syntaxKind":"PropertySignature","name":"disabled","value":"boolean","description":"Disable input","isOptional":true},{"filePath":"polaris-react/src/components/Select/Select.tsx","syntaxKind":"PropertySignature","name":"helpText","value":"React.ReactNode","description":"Additional text to aide in use","isOptional":true},{"filePath":"polaris-react/src/components/Select/Select.tsx","syntaxKind":"PropertySignature","name":"placeholder","value":"string","description":"Example text to display as placeholder","isOptional":true},{"filePath":"polaris-react/src/components/Select/Select.tsx","syntaxKind":"PropertySignature","name":"id","value":"string","description":"ID for form input","isOptional":true},{"filePath":"polaris-react/src/components/Select/Select.tsx","syntaxKind":"PropertySignature","name":"name","value":"string","description":"Name for form input","isOptional":true},{"filePath":"polaris-react/src/components/Select/Select.tsx","syntaxKind":"PropertySignature","name":"value","value":"string","description":"Value for form input","isOptional":true},{"filePath":"polaris-react/src/components/Select/Select.tsx","syntaxKind":"PropertySignature","name":"error","value":"any","description":"Display an error state","isOptional":true},{"filePath":"polaris-react/src/components/Select/Select.tsx","syntaxKind":"MethodSignature","name":"onChange","value":"(selected: string, id: string) => void","description":"Callback when selection is changed","isOptional":true},{"filePath":"polaris-react/src/components/Select/Select.tsx","syntaxKind":"MethodSignature","name":"onFocus","value":"() => void","description":"Callback when select is focused","isOptional":true},{"filePath":"polaris-react/src/components/Select/Select.tsx","syntaxKind":"MethodSignature","name":"onBlur","value":"() => void","description":"Callback when focus is removed","isOptional":true},{"filePath":"polaris-react/src/components/Select/Select.tsx","syntaxKind":"PropertySignature","name":"requiredIndicator","value":"boolean","description":"Visual required indicator, add an asterisk to label","isOptional":true}],"value":"export interface SelectProps {\n  /** List of options or option groups to choose from */\n  options?: (SelectOption | SelectGroup)[];\n  /** Label for the select */\n  label: React.ReactNode;\n  /** Adds an action to the label */\n  labelAction?: LabelledProps['action'];\n  /** Visually hide the label */\n  labelHidden?: boolean;\n  /** Show the label to the left of the value, inside the control */\n  labelInline?: boolean;\n  /** Disable input */\n  disabled?: boolean;\n  /** Additional text to aide in use */\n  helpText?: React.ReactNode;\n  /** Example text to display as placeholder */\n  placeholder?: string;\n  /** ID for form input */\n  id?: string;\n  /** Name for form input */\n  name?: string;\n  /** Value for form input */\n  value?: string;\n  /** Display an error state */\n  error?: Error | boolean;\n  /** Callback when selection is changed */\n  onChange?(selected: string, id: string): void;\n  /** Callback when select is focused */\n  onFocus?(): void;\n  /** Callback when focus is removed */\n  onBlur?(): void;\n  /** Visual required indicator, add an asterisk to label */\n  requiredIndicator?: boolean;\n}"},"SelectOption":{"filePath":"polaris-react/src/components/Select/Select.tsx","syntaxKind":"TypeAliasDeclaration","name":"SelectOption","value":"string | StrictOption","description":""},"StrictOption":{"filePath":"polaris-react/src/components/Select/Select.tsx","name":"StrictOption","description":"","members":[{"filePath":"polaris-react/src/components/Select/Select.tsx","syntaxKind":"PropertySignature","name":"value","value":"string","description":"Machine value of the option; this is the value passed to `onChange`"},{"filePath":"polaris-react/src/components/Select/Select.tsx","syntaxKind":"PropertySignature","name":"label","value":"string","description":"Human-readable text for the option"},{"filePath":"polaris-react/src/components/Select/Select.tsx","syntaxKind":"PropertySignature","name":"disabled","value":"boolean","description":"Option will be visible, but not selectable","isOptional":true},{"filePath":"polaris-react/src/components/Select/Select.tsx","syntaxKind":"PropertySignature","name":"prefix","value":"React.ReactNode","description":"Element to display to the left of the option label. Does not show in the dropdown.","isOptional":true}],"value":"interface StrictOption {\n  /** Machine value of the option; this is the value passed to `onChange` */\n  value: string;\n  /** Human-readable text for the option */\n  label: string;\n  /** Option will be visible, but not selectable */\n  disabled?: boolean;\n  /** Element to display to the left of the option label. Does not show in the dropdown. */\n  prefix?: React.ReactNode;\n}"},"SelectGroup":{"filePath":"polaris-react/src/components/Select/Select.tsx","name":"SelectGroup","description":"","members":[{"filePath":"polaris-react/src/components/Select/Select.tsx","syntaxKind":"PropertySignature","name":"title","value":"string","description":""},{"filePath":"polaris-react/src/components/Select/Select.tsx","syntaxKind":"PropertySignature","name":"options","value":"SelectOption[]","description":""}],"value":"export interface SelectGroup {\n  title: string;\n  options: SelectOption[];\n}"},"Action":{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Action","description":"","members":[{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"id","value":"string","description":"A unique identifier for the action","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"content","value":"string","description":"Content the action displays","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"accessibilityLabel","value":"string","description":"Visually hidden text for screen readers","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"url","value":"string","description":"A destination to link to, rendered in the action","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"external","value":"boolean","description":"Forces url to open in a new tab","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"target","value":"Target","description":"Where to display the url","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"MethodSignature","name":"onAction","value":"() => void","description":"Callback when an action takes place","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"MethodSignature","name":"onMouseEnter","value":"() => void","description":"Callback when mouse enter","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"MethodSignature","name":"onTouchStart","value":"() => void","description":"Callback when element is touched","isOptional":true}],"value":"export interface Action {\n  /** A unique identifier for the action */\n  id?: string;\n  /** Content the action displays */\n  content?: string;\n  /** Visually hidden text for screen readers */\n  accessibilityLabel?: string;\n  /** A destination to link to, rendered in the action */\n  url?: string;\n  /** Forces url to open in a new tab */\n  external?: boolean;\n  /** Where to display the url */\n  target?: Target;\n  /** Callback when an action takes place */\n  onAction?(): void;\n  /** Callback when mouse enter */\n  onMouseEnter?(): void;\n  /** Callback when element is touched */\n  onTouchStart?(): void;\n}"},"Target":{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"TypeAliasDeclaration","name":"Target","value":"'_blank' | '_self' | '_parent' | '_top'","description":""}},"editPageLinkPath":"polaris.shopify.com/content/components/selection-and-input/select.mdx"},"__N_SSG":true}