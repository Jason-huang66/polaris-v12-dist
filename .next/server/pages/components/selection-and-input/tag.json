{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    hr: \"hr\",\n    a: \"a\",\n    h3: \"h3\",\n    code: \"code\"\n  }, _provideComponents(), props.components), {Lede, Examples, Props} = _components;\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"Tags represent a set of interactive, merchant-supplied keywords that help label, organize, and categorize objects. Tags can be added or removed from an object by merchants.\"\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Tags should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Be presented close to or within the input control that allows merchants to add and remove tags\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"related-components\",\n      children: \"Related components\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"To show the status of an object, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/feedback-indicators/badge\",\n          children: \"use the badge component\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To add and remove tags, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/selection-and-input/text-field\",\n          children: \"use the text field component\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"accessibility\",\n      children: \"Accessibility\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"labeling\",\n      children: \"Labeling\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The button to remove a tag is automatically given a label using \", _jsx(_components.code, {\n        children: \"aria-label\"\n      }), \" so that screen reader users can distinguish which tag will be removed.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"keyboard-support\",\n      children: \"Keyboard support\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The control to remove a tag is implemented as a button with standard keyboard support.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Give buttons keyboard focus with the \", _jsx(\"kbd\", {\n          children: \"tab\"\n        }), \" key (or \", _jsx(\"kbd\", {\n          children: \"shift\"\n        }), \" + \", _jsx(\"kbd\", {\n          children: \"tab\"\n        }), \" when tabbing backwards)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To activate a button, press the \", _jsx(\"kbd\", {\n          children: \"enter\"\n        }), \"/\", _jsx(\"kbd\", {\n          children: \"return\"\n        }), \" or \", _jsx(\"kbd\", {\n          children: \"space\"\n        }), \" key\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When a merchant uses the button to remove a tag, it is important to make sure that keyboard focus is managed. Moving focus to the next element in the page is recommended.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Tag","category":"Selection and input","keywords":["indicator","label","label objects","organize objects","categorize objects","categories","keywords"],"examples":[{"fileName":"tag-default.tsx","title":"Default","description":"Use to signify the attributes of an object."},{"fileName":"tag-removable.tsx","title":"Removable","description":"Use to allow merchants to remove attributes from an object."},{"fileName":"tag-clickable.tsx","title":"Clickable","description":"Use to allow merchants to add attributes to an object."},{"fileName":"tag-with-link.tsx","title":"With link","description":"Use to allow merchants to navigate to a resource. For example a customer segment or a smart collection"},{"fileName":"tag-with-custom-content.tsx","title":"With custom content","description":"Use when a tag needs to be visually distinguished from others, like when it's added automatically."},{"fileName":"tag-removable-with-link.tsx","title":"Removable with link","description":"A removable attribute to an object that allows merchants to navigate to a resource."}],"previewImg":"/images/components/selection-and-input/tag.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"tag-default.tsx","title":"Default","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to signify the attributes of an object.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Card, Tag} from '@shopify/polaris';\nimport React from 'react';\n\nfunction TagExample() {\n  return (\n    <Card>\n      <Tag>Wholesale</Tag>\n    </Card>\n  );\n}\n\n"},{"fileName":"tag-removable.tsx","title":"Removable","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to allow merchants to remove attributes from an object.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Tag, LegacyStack, Card} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction RemovableTagExample() {\n  const [selectedTags, setSelectedTags] = useState([\n    'Rustic',\n    'Antique',\n    'Vinyl',\n    'Refurbished',\n    'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer at ipsum quam. Aliquam fermentum bibendum vestibulum. Vestibulum condimentum luctus metus, sed sagittis magna pellentesque eget. Duis dapibus pretium nisi, et venenatis tortor dignissim ut. Quisque eget lacus ac ex eleifend ultrices. Phasellus facilisis ex sit amet leo elementum condimentum. Ut vel maximus felis. Etiam eget diam eu eros blandit interdum. Sed eu metus sed justo aliquam iaculis ac sit amet ex. Curabitur justo magna, porttitor non pulvinar eu, malesuada at leo. Cras mollis consectetur eros, quis maximus lorem dignissim at. Proin in rhoncus massa. Vivamus lectus nunc, fringilla euismod risus commodo, mattis blandit nulla.',\n  ]);\n\n  const removeTag = useCallback(\n    (tag: string) => () => {\n      setSelectedTags((previousTags) =>\n        previousTags.filter((previousTag) => previousTag !== tag),\n      );\n    },\n    [],\n  );\n\n  const tagMarkup = selectedTags.map((option) => (\n    <Card key={option}>\n      <Tag onRemove={removeTag(option)}>{option}</Tag>\n    </Card>\n  ));\n\n  return <LegacyStack spacing=\"tight\">{tagMarkup}</LegacyStack>;\n}\n\n"},{"fileName":"tag-clickable.tsx","title":"Clickable","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to allow merchants to add attributes to an object.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Card, Tag} from '@shopify/polaris';\nimport React from 'react';\n\nfunction TagExample() {\n  return (\n    <Card>\n      <Tag onClick={() => console.log('Clicked')}>Wholesale</Tag>\n    </Card>\n  );\n}\n\n"},{"fileName":"tag-with-link.tsx","title":"With link","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to allow merchants to navigate to a resource. For example a customer segment or a smart collection\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Card, Tag} from '@shopify/polaris';\nimport React from 'react';\n\nfunction TagExample() {\n  return (\n    <Card>\n      <Tag url=\"#\">Wholesale</Tag>\n    </Card>\n  );\n}\n\n"},{"fileName":"tag-with-custom-content.tsx","title":"With custom content","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when a tag needs to be visually distinguished from others, like when it's added automatically.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Tag, LegacyStack, Icon, Card} from '@shopify/polaris';\nimport {WandMinor} from '@shopify/polaris-icons';\nimport React from 'react';\n\nfunction TagExample() {\n  return (\n    <Card>\n      <Tag url=\"#\">\n        <LegacyStack spacing=\"extraTight\">\n          <Icon source={WandMinor} />\n          <span>Wholesale</span>\n        </LegacyStack>\n      </Tag>\n    </Card>\n  );\n}\n\n"},{"fileName":"tag-removable-with-link.tsx","title":"Removable with link","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"A removable attribute to an object that allows merchants to navigate to a resource.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Tag, LegacyStack, Card} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction RemovableTagWithLinkExample() {\n  const [selectedTags, setSelectedTags] = useState([\n    'Rustic',\n    'Antique',\n    'Vinyl',\n    'Refurbished',\n  ]);\n\n  const removeTag = useCallback(\n    (tag: string) => () => {\n      setSelectedTags((previousTags) =>\n        previousTags.filter((previousTag) => previousTag !== tag),\n      );\n    },\n    [],\n  );\n\n  const tagMarkup = selectedTags.map((option) => (\n    <Card key={option}>\n      <Tag onRemove={removeTag(option)} url=\"#\">\n        {option}\n      </Tag>\n    </Card>\n  ));\n\n  return <LegacyStack spacing=\"tight\">{tagMarkup}</LegacyStack>;\n}\n\n"}],"seoDescription":"Tags represent a set of interactive, merchant-supplied keywords that help label, organize, and categorize objects. Tags can be added or removed from an object by merchants.","type":{"TagProps":{"filePath":"polaris-react/src/components/Tag/Tag.tsx","syntaxKind":"TypeAliasDeclaration","name":"TagProps","value":"NonMutuallyExclusiveProps & (\n    | {onClick?(): void; onRemove?: undefined; url?: undefined}\n    | {onClick?: undefined; onRemove?(): void; url?: string}\n  )","description":""},"NonMutuallyExclusiveProps":{"filePath":"polaris-react/src/components/Tag/Tag.tsx","name":"NonMutuallyExclusiveProps","description":"","members":[{"filePath":"polaris-react/src/components/Tag/Tag.tsx","syntaxKind":"PropertySignature","name":"children","value":"React.ReactNode","description":"Content to display in the tag","isOptional":true},{"filePath":"polaris-react/src/components/Tag/Tag.tsx","syntaxKind":"PropertySignature","name":"disabled","value":"boolean","description":"Disables the tag","isOptional":true},{"filePath":"polaris-react/src/components/Tag/Tag.tsx","syntaxKind":"MethodSignature","name":"onClick","value":"() => void","description":"Callback when tag is clicked or keypressed. Renders without remove button or url when set.","isOptional":true},{"filePath":"polaris-react/src/components/Tag/Tag.tsx","syntaxKind":"MethodSignature","name":"onRemove","value":"() => void","description":"Callback when remove button is clicked or keypressed.","isOptional":true},{"filePath":"polaris-react/src/components/Tag/Tag.tsx","syntaxKind":"PropertySignature","name":"accessibilityLabel","value":"string","description":"A string to use when tag has more than textual content","isOptional":true},{"filePath":"polaris-react/src/components/Tag/Tag.tsx","syntaxKind":"PropertySignature","name":"url","value":"string","description":"Url to navigate to when tag is clicked or keypressed.","isOptional":true}],"value":"export interface NonMutuallyExclusiveProps {\n  /** Content to display in the tag */\n  children?: React.ReactNode;\n  /** Disables the tag  */\n  disabled?: boolean;\n  /** Callback when tag is clicked or keypressed. Renders without remove button or url when set. */\n  onClick?(): void;\n  /** Callback when remove button is clicked or keypressed. */\n  onRemove?(): void;\n  /** A string to use when tag has more than textual content */\n  accessibilityLabel?: string;\n  /** Url to navigate to when tag is clicked or keypressed. */\n  url?: string;\n}"}},"editPageLinkPath":"polaris.shopify.com/content/components/selection-and-input/tag.mdx"},"__N_SSG":true}