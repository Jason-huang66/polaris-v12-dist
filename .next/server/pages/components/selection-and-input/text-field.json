{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    code: \"code\",\n    ol: \"ol\",\n    strong: \"strong\",\n    a: \"a\",\n    blockquote: \"blockquote\",\n    h4: \"h4\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    img: \"img\",\n    hr: \"hr\"\n  }, _provideComponents(), props.components), {Lede, Examples, Props, DoDont} = _components;\n  if (!DoDont) _missingMdxReference(\"DoDont\", true);\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"A text field is an input field that merchants can type into. It has a range of options and supports several text formats including numbers.\"\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Text fields should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Be clearly labeled so it’s obvious to merchants what they should enter into the field\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Be labeled as “Optional” when you need to request input that’s not required\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Only ask for information that’s really needed\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Validate input as soon as merchants have finished interacting with a field (but not before)\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"autocomplete\",\n      children: \"Autocomplete\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The autocomplete attribute in an \", _jsx(_components.code, {\n        children: \"input\"\n      }), \" field controls two types of browser behavior:\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"Browser autofill\"\n          }), \": a feature that automatically populates form fields with previously-saved information, such as passwords, addresses, and credit card data.\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"Autofill is an important feature for our users. Google has found that \", _jsx(_components.a, {\n              href: \"https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill?hl=en\",\n              children: \"\\\"users complete forms up to 30% faster\\\"\"\n            }), \" when using autofill.\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"The WHATWG has a list of supported autofill values for the \", _jsx(_components.code, {\n              children: \"autocomplete\"\n            }), \" attribute. \", _jsx(_components.a, {\n              href: \"https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill\",\n              children: \"Review the section \\\"4.10.18.7 Autofill\\\"\"\n            }), \" for all the input types and their corresponding autocomplete attribute values.\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"Browser autocomplete\"\n          }), \" - a feature that displays previously submitted values for that field.\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"When this is on for a field, a user is presented a list with previously submitted values for the input\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Recommendation\"\n      })\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"Always add an autocomplete attribute and value to inputs if the type is: color, date, datetime-local, email, month, number, password, range, search, tel, text, time, url, or week.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"turning-autofillautocomplete-off\",\n      children: \"Turning autofill/autocomplete off\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Even if you do not want the browser to autofill a user's information, it is recommended you still have an autocomplete attribute with the value off or nope.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Unfortunately, \", _jsx(_components.a, {\n        href: \"https://caniuse.com/input-autocomplete-onoff\",\n        children: \"not all browsers support\"\n      }), \" or respect autocomplete=\\\"off\\\". This makes things challenging. Chrome, for example, \", _jsx(_components.a, {\n        href: \"https://bugs.chromium.org/p/chromium/issues/detail?id=468153\",\n        children: \"has a long outstanding bug\"\n      }), \" and won't add support for off for now.\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Browser\"\n          }), _jsxs(_components.th, {\n            children: [\"Support for \", _jsx(_components.code, {\n              children: \"autocomplete=\\\"off\\\"\"\n            })]\n          }), _jsx(_components.th, {\n            children: \"Details\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Chrome\"\n          }), _jsx(_components.td, {\n            children: \"Partial\"\n          }), _jsxs(_components.td, {\n            children: [\"Intentionally ignores \", _jsx(_components.code, {\n              children: \"off\"\n            }), \" value when the user uses the browser's autofill functionality. \", _jsx(_components.a, {\n              href: \"https://bugs.chromium.org/p/chromium/issues/detail?id=468153\",\n              children: \"See bug\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Safari\"\n          }), _jsx(_components.td, {\n            children: \"Partial\"\n          }), _jsxs(_components.td, {\n            children: [\"Ignores \", _jsx(_components.code, {\n              children: \"off\"\n            }), \" value for \", _jsx(_components.code, {\n              children: \"username\"\n            }), \", \", _jsx(_components.code, {\n              children: \"email\"\n            }), \" and \", _jsx(_components.code, {\n              children: \"password\"\n            }), \" fields.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Firefox\"\n          }), _jsx(_components.td, {\n            children: \"Partial\"\n          }), _jsxs(_components.td, {\n            children: [\"Ignores \", _jsx(_components.code, {\n              children: \"off\"\n            }), \" value for login forms. \", _jsx(_components.a, {\n              href: \"https://bugzilla.mozilla.org/show_bug.cgi?id=956906\",\n              children: \"See bug\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"Edge\"\n          }), _jsx(_components.td, {\n            children: \"Partial\"\n          }), _jsxs(_components.td, {\n            children: [\"Intentionally ignores \", _jsx(_components.code, {\n              children: \"off\"\n            }), \" value when the user uses the browser's autofill functionality.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Chrome does seem to turn autocomplete off when using the value nope (or any non valid string). However, we have seen some inconsistencies even with that support.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Recommendation (Chrome only)\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Turning off both \", _jsx(_components.strong, {\n          children: \"autofill\"\n        }), \" and \", _jsx(_components.strong, {\n          children: \"browser autocomplete\"\n        }), \" (previously submitted values) in Chrome\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"Use \", _jsx(_components.code, {\n              children: \"autocomplete=nope\"\n            }), \" and also \", _jsxs(_components.strong, {\n              children: [\"must have a \", _jsx(_components.code, {\n                children: \"name\"\n              }), \" attribute\"]\n            }), \".\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Turning off \", _jsx(_components.strong, {\n          children: \"browser autocomplete\"\n        }), \" (previously submitted values) in Chrome\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"If you don't have \", _jsx(_components.code, {\n              children: \"name\"\n            }), \" attribute and the field is not a typical autofill input (address, email, etc), use \", _jsx(_components.code, {\n              children: \"autocomplete=off\"\n            }), \".\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"virtual-keyboard\",\n      children: \"Virtual keyboard\"\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/images/components/selection-and-input/text-field/virtual-keyboards.png\",\n      alt: \"Examples of different number keyboards set with inputMode\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"inputMode\"\n      }), \" property should be set to select the appropriate virtual keyboard for the type of data expected to be entered by the user. Above are examples of different number keyboards set with \", _jsx(_components.code, {\n        children: \"inputMode\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"content-guidelines\",\n      children: \"Content guidelines\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For text field content guidelines, reference the \", _jsx(_components.a, {\n        href: \"https://polaris.shopify.com/patterns/text-fields\",\n        children: \"text fields experience\"\n      }), \" page.\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"related-components\",\n      children: \"Related components\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"To lay out the elements in a responsive form, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/form-layout\",\n          children: \"use the form layout component\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To describe an invalid form input with a separate validation error, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/inline-error\",\n          children: \"use the inline error component\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"It’s common to \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/select\",\n          children: \"use a select component\"\n        }), \" connected to the left or right of a text field.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"accessibility\",\n      children: \"Accessibility\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"structure\",\n      children: \"Structure\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Screen readers convey information about text fields automatically through native HTML.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Use the \", _jsx(_components.code, {\n          children: \"disabled\"\n        }), \" prop to add the HTML \", _jsx(_components.code, {\n          children: \"disabled\"\n        }), \" attribute to the text field.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Use the \", _jsx(_components.code, {\n          children: \"readOnly\"\n        }), \" prop to add the HTML \", _jsx(_components.code, {\n          children: \"readonly\"\n        }), \" attribute to the text field.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"If you use the \", _jsx(_components.code, {\n          children: \"type\"\n        }), \" prop, then some assistive technologies adapt the software keyboard to the current task. This helps merchants with mobility, vision, and cognitive issues to enter information more easily.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"id\"\n      }), \" prop to provide a unique \", _jsx(_components.code, {\n        children: \"id\"\n      }), \" attribute value for the text field. If you don't provide an \", _jsx(_components.code, {\n        children: \"id\"\n      }), \", then the component generates one automatically. All text fields need to have unique \", _jsx(_components.code, {\n        children: \"id\"\n      }), \" values.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"labeling\",\n      children: \"Labeling\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"label\"\n      }), \" prop is required to convey the purpose of the checkbox to all merchants.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If there are separate visual cues that convey the purpose of the text field to sighted merchants, then the label can be visually hidden with the \", _jsx(_components.code, {\n        children: \"labelHidden\"\n      }), \" prop.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When you provide help text via the \", _jsx(_components.code, {\n        children: \"helpText\"\n      }), \" prop or an inline error message via the \", _jsx(_components.code, {\n        children: \"error\"\n      }), \" prop, the help or error content is conveyed to screen reader users with the \", _jsx(_components.code, {\n        children: \"aria-describedby\"\n      }), \" attribute. This attribute causes the content to be read along with the label, either immediately or after a short delay.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"placeholder\"\n      }), \" prop to provide additional instructions. However, don’t rely on placeholders alone since the content isn’t always conveyed to all merchants.\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Use the label to provide instructions critical to using the text field\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Use help text and placeholder text to provide additional, non-critical instructions\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont\",\n        children: \"Don’t\"\n      }), _jsx(_components.p, {\n        children: \"Use the placeholder to provide information that’s required to use the text field.\"\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"keyboard-support\",\n      children: \"Keyboard support\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Text fields have standard keyboard support.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Merchants who rely on the keyboard expect to move focus to each text field using the \", _jsx(\"kbd\", {\n          children: \"tab\"\n        }), \" key (or \", _jsx(\"kbd\", {\n          children: \"shift\"\n        }), \" + \", _jsx(\"kbd\", {\n          children: \"tab\"\n        }), \" when tabbing backwards)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"If the \", _jsx(_components.code, {\n          children: \"type\"\n        }), \" is set to \", _jsx(_components.code, {\n          children: \"number\"\n        }), \", then merchants can use the up and down arrow keys to adjust the value typed into the field when hovering over or focusing the field to make the arrows appear\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Using the \", _jsx(_components.code, {\n          children: \"disabled\"\n        }), \" prop will prevent the text field from receive keyboard focus or inputs\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"readOnly\"\n        }), \" prop allows focus on the text field but prevents input or editing\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"inputMode\"\n        }), \" prop can be used to bring up a relevant keyboard for merchants on mobile; it’s passed down to the input as an \", _jsxs(_components.a, {\n          href: \"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode\",\n          children: [_jsx(_components.code, {\n            children: \"inputmode\"\n          }), \" attribute\"]\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"automatically-focusing\",\n      children: \"Automatically focusing\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Although you can use the \", _jsx(_components.code, {\n        children: \"autoFocus\"\n      }), \" prop to automatically move focus to the text field, it’s generally best to avoid focusing on fields automatically. The \", _jsx(_components.code, {\n        children: \"autoFocus\"\n      }), \" prop is set to \", _jsx(_components.code, {\n        children: \"false\"\n      }), \" by default and should only be used in cases where it won’t force focus to skip other controls or content of equal or greater importance.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Text field","category":"Selection and input","keywords":["TextField","input","textarea","type","add info","form field","input forms","form input","field","active state","input active state","input state","input focus","focus","textbar","text bar","forms","form inputs","form text input","placeholder text","field placeholder text","optional fields","field help text","validation error messages","field labels","number fields","email fields","multiline","hidden label","label action","placeholder text","help text","prefix or suffix","connected fields","label actions","hidden labels","separate error message","icon action"],"examples":[{"fileName":"text-field-default.tsx","title":"Default","description":"Use to allow merchants to provide text input when the expected input is short. For longer input, use the auto grow or multiline options."},{"fileName":"text-field-number.tsx","title":"Number","description":"Use when input text should be a number."},{"fileName":"text-field-email.tsx","title":"Email","description":"Use when the text input should be an email address."},{"fileName":"text-field-multiline.tsx","title":"Multiline","description":"Use when the expected input could be more than one line. The field will automatically grow to accommodate additional text."},{"fileName":"text-field-with-hidden-label.tsx","title":"With hidden label","description":"Use to visually hide the label when the text field’s purpose is clear from context. The label will remain available to screen readers. Use this option with care. In almost all cases, show the label."},{"fileName":"text-field-with-label-action.tsx","title":"With label action","description":"Use when an optional, secondary action is closely associated with a text field. For example, on a field for entering a customs tariff code, a label action might be to look up the appropriate code from a table."},{"fileName":"text-field-with-right-aligned-text.tsx","title":"With right aligned text","description":"Use when input text should be aligned right."},{"fileName":"text-field-with-placeholder-text.tsx","title":"With placeholder text","description":"Use to provide a short, non-essential hint about the expected input. Placeholder text is low-contrast, so don’t rely on it for important information."},{"fileName":"text-field-with-help-text.tsx","title":"With help text","description":"Use to show short instructional content below the text field. Help text works to help merchants understand how to fix errors that result from incorrect formatting (such as dates or passwords with specific character requirements). If more explanation is needed, link to the Shopify Help Center."},{"fileName":"text-field-with-prefix-or-suffix.tsx","title":"With prefix or suffix","description":"Use as a special form of help text that works best inline. Use a prefix for things like currency symbols (“\\$”, “¥”, “£”). Use suffix for things like units of measure (“in”, “cm”)."},{"fileName":"text-field-with-vertical-content.tsx","title":"With vertical content","description":"Use to include custom vertical content above the input value, like selected tags."},{"fileName":"text-field-with-connected-fields.tsx","title":"With connected fields","description":"Use when a text field and several related fields make up a logical unit. If inputting weight as a number and a separate unit of measurement, use a text field with a [select dropdown menu](https://polaris.shopify.com/components/select) (for example “kg”, “lb”) as a connected field."},{"fileName":"text-field-with-validation-error.tsx","title":"With validation error","description":"Use to let merchants know if their input is valid or if there’s an error. Whenever possible, validate input as soon as merchants have finished interacting with a field (but not before). If a field already has an error, validate and remove errors as merchants type so they can immediately see when an error has been fixed."},{"fileName":"text-field-with-separate-validation-error.tsx","title":"With separate validation error","description":"Use to let merchants know when their text field input is invalid in the context of a group of form inputs that the text field depends on."},{"fileName":"text-field-disabled.tsx","title":"Disabled","description":"Use to show that a textfield is not available for interaction. Most often used in forms when information is required only in a particular state. For example, the text field next to Other in a choice list when Other is not selected."},{"fileName":"text-field-with-character-count.tsx","title":"With character count","description":"Use to display the current number of characters in a text field. Use in conjunction with max length to display the current remaining number of characters in the text field."},{"fileName":"text-field-with-clear-button.tsx","title":"With clear button","description":"Use to allow merchants to clear the content from a text field."},{"fileName":"text-field-with-monospaced-font.tsx","title":"With monospaced font","description":"Use to apply a monospaced font to the TextField"},{"fileName":"text-field-with-value-selected-on-focus.tsx","title":"With value selected on focus","description":"Use to select all text inside TextField on focus."},{"fileName":"text-field-with-inline-suggestion.tsx","title":"With inline suggestion","description":"Use to provide an autocomplete suggestion inline with the input value. See the combobox component's tag multi-select example for full implementation of the inline autocomplete pattern."}],"previewImg":"/images/components/selection-and-input/text-field.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"text-field-default.tsx","title":"Default","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to allow merchants to provide text input when the expected input is short. For longer input, use the auto grow or multiline options.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {TextField} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction TextFieldExample() {\n  const [value, setValue] = useState('Jaded Pixel');\n\n  const handleChange = useCallback(\n    (newValue: string) => setValue(newValue),\n    [],\n  );\n\n  return (\n    <TextField\n      label=\"Store name\"\n      value={value}\n      onChange={handleChange}\n      autoComplete=\"off\"\n    />\n  );\n}\n\n"},{"fileName":"text-field-number.tsx","title":"Number","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when input text should be a number.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {TextField} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction NumberFieldExample() {\n  const [value, setValue] = useState('1');\n\n  const handleChange = useCallback(\n    (newValue: string) => setValue(newValue),\n    [],\n  );\n\n  return (\n    <TextField\n      label=\"Quantity\"\n      type=\"number\"\n      value={value}\n      onChange={handleChange}\n      autoComplete=\"off\"\n    />\n  );\n}\n\n"},{"fileName":"text-field-email.tsx","title":"Email","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when the text input should be an email address.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {TextField} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction EmailFieldExample() {\n  const [value, setValue] = useState('bernadette.lapresse@jadedpixel.com');\n\n  const handleChange = useCallback(\n    (newValue: string) => setValue(newValue),\n    [],\n  );\n\n  return (\n    <TextField\n      label=\"Email\"\n      type=\"email\"\n      value={value}\n      onChange={handleChange}\n      autoComplete=\"email\"\n    />\n  );\n}\n\n"},{"fileName":"text-field-multiline.tsx","title":"Multiline","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when the expected input could be more than one line. The field will automatically grow to accommodate additional text.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {TextField} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction MultilineFieldExample() {\n  const [value, setValue] = useState('1776 Barnes Street\\nOrlando, FL 32801');\n\n  const handleChange = useCallback(\n    (newValue: string) => setValue(newValue),\n    [],\n  );\n\n  return (\n    <TextField\n      label=\"Shipping address\"\n      value={value}\n      onChange={handleChange}\n      multiline={4}\n      autoComplete=\"off\"\n    />\n  );\n}\n\n"},{"fileName":"text-field-with-hidden-label.tsx","title":"With hidden label","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to visually hide the label when the text field’s purpose is clear from context. The label will remain available to screen readers. Use this option with care. In almost all cases, show the label.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {FormLayout, ChoiceList, TextField, Select} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction HiddenLabelExample() {\n  const [value, setValue] = useState('12');\n  const [selected, setSelected] = useState('yes');\n\n  const handleTextChange = useCallback(\n    (newValue: string) => setValue(newValue),\n    [],\n  );\n\n  const handleChoiceChange = useCallback(\n    (selections: string[]) => setSelected(selections[0]),\n    [],\n  );\n\n  return (\n    <FormLayout>\n      <ChoiceList\n        title=\"Gift card auto-expiration\"\n        choices={[\n          {label: 'Gift cards never expire', value: 'no'},\n          {label: 'Gift cards expire', value: 'yes'},\n        ]}\n        selected={[selected]}\n        onChange={handleChoiceChange}\n      />\n      <TextField\n        label=\"Gift cards expire after\"\n        type=\"number\"\n        labelHidden\n        value={value}\n        disabled={selected === 'no'}\n        onChange={handleTextChange}\n        autoComplete=\"off\"\n        connectedRight={\n          <Select\n            label=\"Unit of time\"\n            labelHidden\n            options={['months after purchase']}\n          />\n        }\n      />\n    </FormLayout>\n  );\n}\n\n"},{"fileName":"text-field-with-label-action.tsx","title":"With label action","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when an optional, secondary action is closely associated with a text field. For example, on a field for entering a customs tariff code, a label action might be to look up the appropriate code from a table.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {TextField} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction LabelActionExample() {\n  const [textFieldValue, setTextFieldValue] = useState('6201.11.0000');\n\n  const handleTextFieldChange = useCallback(\n    (value: string) => setTextFieldValue(value),\n    [],\n  );\n\n  return (\n    <TextField\n      label=\"Tariff code\"\n      value={textFieldValue}\n      onChange={handleTextFieldChange}\n      labelAction={{content: 'Look up codes'}}\n      autoComplete=\"off\"\n    />\n  );\n}\n\n"},{"fileName":"text-field-with-right-aligned-text.tsx","title":"With right aligned text","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when input text should be aligned right.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyStack, TextField} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction RightAlignExample() {\n  const [textFieldValue, setTextFieldValue] = useState('1');\n\n  const handleTextFieldChange = useCallback(\n    (value: string) => setTextFieldValue(value),\n    [],\n  );\n\n  return (\n    <LegacyStack>\n      <LegacyStack.Item fill>Price</LegacyStack.Item>\n      <TextField\n        label=\"Price\"\n        labelHidden\n        value={textFieldValue}\n        onChange={handleTextFieldChange}\n        autoComplete=\"off\"\n        align=\"right\"\n      />\n    </LegacyStack>\n  );\n}\n\n"},{"fileName":"text-field-with-placeholder-text.tsx","title":"With placeholder text","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to provide a short, non-essential hint about the expected input. Placeholder text is low-contrast, so don’t rely on it for important information.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {TextField} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction PlaceholderExample() {\n  const [textFieldValue, setTextFieldValue] = useState('');\n\n  const handleTextFieldChange = useCallback(\n    (value: string) => setTextFieldValue(value),\n    [],\n  );\n\n  return (\n    <TextField\n      label=\"Shipping zone name\"\n      value={textFieldValue}\n      onChange={handleTextFieldChange}\n      placeholder=\"Example: North America, Europe\"\n      autoComplete=\"off\"\n    />\n  );\n}\n\n"},{"fileName":"text-field-with-help-text.tsx","title":"With help text","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to show short instructional content below the text field. Help text works to help merchants understand how to fix errors that result from incorrect formatting (such as dates or passwords with specific character requirements). If more explanation is needed, link to the Shopify Help Center.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {TextField} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction HelpTextExample() {\n  const [textFieldValue, setTextFieldValue] = useState(\n    'bernadette.lapresse@jadedpixel.com',\n  );\n\n  const handleTextFieldChange = useCallback(\n    (value: string) => setTextFieldValue(value),\n    [],\n  );\n\n  return (\n    <TextField\n      label=\"Account email\"\n      type=\"email\"\n      value={textFieldValue}\n      onChange={handleTextFieldChange}\n      helpText=\"We’ll use this address if we need to contact you about your account.\"\n      autoComplete=\"email\"\n    />\n  );\n}\n\n"},{"fileName":"text-field-with-prefix-or-suffix.tsx","title":"With prefix or suffix","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use as a special form of help text that works best inline. Use a prefix for things like currency symbols (“$”, “¥”, “£”). Use suffix for things like units of measure (“in”, “cm”).\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {TextField} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction PrefixExample() {\n  const [textFieldValue, setTextFieldValue] = useState('2.00');\n\n  const handleTextFieldChange = useCallback(\n    (value: string) => setTextFieldValue(value),\n    [],\n  );\n\n  return (\n    <TextField\n      label=\"Price\"\n      type=\"number\"\n      value={textFieldValue}\n      onChange={handleTextFieldChange}\n      prefix=\"$\"\n      autoComplete=\"off\"\n    />\n  );\n}\n\n"},{"fileName":"text-field-with-vertical-content.tsx","title":"With vertical content","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to include custom vertical content above the input value, like selected tags.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyStack, Tag, TextField} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction VerticalContentExample() {\n  const tags = ['Rustic', 'Antique', 'Vinyl', 'Refurbished'];\n  const [textFieldValue, setTextFieldValue] = useState('');\n\n  const handleTextFieldChange = useCallback(\n    (value: string) => setTextFieldValue(value),\n    [],\n  );\n\n  const verticalContentMarkup =\n    tags.length > 0 ? (\n      <LegacyStack spacing=\"extraTight\" alignment=\"center\">\n        {tags.map((tag) => (\n          <Tag key={tag}>{tag}</Tag>\n        ))}\n      </LegacyStack>\n    ) : null;\n\n  return (\n    <TextField\n      label=\"Tags\"\n      value={textFieldValue}\n      onChange={handleTextFieldChange}\n      placeholder=\"Search tags\"\n      autoComplete=\"off\"\n      verticalContent={verticalContentMarkup}\n    />\n  );\n}\n\n"},{"fileName":"text-field-with-connected-fields.tsx","title":"With connected fields","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_components.p, {\n    children: [\"Use when a text field and several related fields make up a logical unit. If inputting weight as a number and a separate unit of measurement, use a text field with a \", _jsx(_components.a, {\n      href: \"https://polaris.shopify.com/components/select\",\n      children: \"select dropdown menu\"\n    }), \" (for example “kg”, “lb”) as a connected field.\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {TextField, Select, Button} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction ConnectedFieldsExample() {\n  const [textFieldValue, setTextFieldValue] = useState('10.6');\n  const [selectValue, setSelectValue] = useState('kg');\n\n  const handleTextFieldChange = useCallback(\n    (value: string) => setTextFieldValue(value),\n    [],\n  );\n\n  const handleSelectChange = useCallback(\n    (value: string) => setSelectValue(value),\n    [],\n  );\n\n  return (\n    <TextField\n      label=\"Weight\"\n      type=\"number\"\n      value={textFieldValue}\n      onChange={handleTextFieldChange}\n      autoComplete=\"off\"\n      connectedLeft={\n        <Select\n          value={selectValue}\n          label=\"Weight unit\"\n          onChange={handleSelectChange}\n          labelHidden\n          options={['kg', 'lb']}\n        />\n      }\n      connectedRight={<Button>Submit</Button>}\n    />\n  );\n}\n\n"},{"fileName":"text-field-with-validation-error.tsx","title":"With validation error","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to let merchants know if their input is valid or if there’s an error. Whenever possible, validate input as soon as merchants have finished interacting with a field (but not before). If a field already has an error, validate and remove errors as merchants type so they can immediately see when an error has been fixed.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {TextField} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction ValidationErrorExample() {\n  const [textFieldValue, setTextFieldValue] = useState('');\n\n  const handleTextFieldChange = useCallback(\n    (value: string) => setTextFieldValue(value),\n    [],\n  );\n\n  return (\n    <TextField\n      label=\"Store name\"\n      value={textFieldValue}\n      onChange={handleTextFieldChange}\n      error=\"Store name is required\"\n      autoComplete=\"off\"\n    />\n  );\n}\n\n"},{"fileName":"text-field-with-separate-validation-error.tsx","title":"With separate validation error","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to let merchants know when their text field input is invalid in the context of a group of form inputs that the text field depends on.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  LegacyStack,\n  FormLayout,\n  Select,\n  TextField,\n  InlineError,\n  Button,\n  LegacyCard,\n} from '@shopify/polaris';\nimport {DeleteMinor} from '@shopify/polaris-icons';\nimport {useState, useCallback} from 'react';\n\nfunction SeparateValidationErrorExample() {\n  const [textFieldValue, setTextFieldValue] = useState('');\n  const [selectTypeValue, setSelectTypeValue] = useState('Product type');\n  const [selectConditionValue, setSelectConditionValue] =\n    useState('is equal to');\n\n  const handleTextFieldValueChange = useCallback(\n    (value: string) => setTextFieldValue(value),\n    [],\n  );\n\n  const handleSelectTypeChange = useCallback(\n    (value: string) => setSelectTypeValue(value),\n    [],\n  );\n\n  const handleSelectConditionChange = useCallback(\n    (value: string) => setSelectConditionValue(value),\n    [],\n  );\n\n  const textFieldID = 'ruleContent';\n  const isInvalid = isValueInvalid(textFieldValue);\n  const errorMessage = isInvalid\n    ? 'Enter 3 or more characters for product type is equal to'\n    : '';\n\n  const formGroupMarkup = (\n    <LegacyStack wrap={false} alignment=\"leading\" spacing=\"loose\">\n      <LegacyStack.Item fill>\n        <FormLayout>\n          <FormLayout.Group condensed>\n            <Select\n              labelHidden\n              label=\"Collection rule type\"\n              options={['Product type']}\n              value={selectTypeValue}\n              onChange={handleSelectTypeChange}\n            />\n            <Select\n              labelHidden\n              label=\"Collection rule condition\"\n              options={['is equal to']}\n              value={selectConditionValue}\n              onChange={handleSelectConditionChange}\n            />\n            <TextField\n              labelHidden\n              label=\"Collection rule content\"\n              error={isInvalid}\n              id={textFieldID}\n              value={textFieldValue}\n              onChange={handleTextFieldValueChange}\n              autoComplete=\"off\"\n            />\n          </FormLayout.Group>\n        </FormLayout>\n        <div style={{marginTop: '4px'}}>\n          <InlineError message={errorMessage} fieldID={textFieldID} />\n        </div>\n      </LegacyStack.Item>\n      <Button icon={DeleteMinor} accessibilityLabel=\"Remove item\" />\n    </LegacyStack>\n  );\n\n  return (\n    <LegacyCard sectioned>\n      <FormLayout>{formGroupMarkup}</FormLayout>\n    </LegacyCard>\n  );\n\n  function isValueInvalid(content: string) {\n    if (!content) {\n      return true;\n    }\n\n    return content.length < 3;\n  }\n}\n\n"},{"fileName":"text-field-disabled.tsx","title":"Disabled","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to show that a textfield is not available for interaction. Most often used in forms when information is required only in a particular state. For example, the text field next to Other in a choice list when Other is not selected.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {TextField} from '@shopify/polaris';\nimport React from 'react';\n\nfunction TextFieldExample() {\n  return <TextField label=\"Store name\" disabled autoComplete=\"off\" />;\n}\n\n"},{"fileName":"text-field-with-character-count.tsx","title":"With character count","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to display the current number of characters in a text field. Use in conjunction with max length to display the current remaining number of characters in the text field.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {TextField} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction TextFieldWithCharacterCountExample() {\n  const [textFieldValue, setTextFieldValue] = useState('Jaded Pixel');\n\n  const handleTextFieldChange = useCallback(\n    (value: string) => setTextFieldValue(value),\n    [],\n  );\n\n  return (\n    <TextField\n      label=\"Store name\"\n      value={textFieldValue}\n      onChange={handleTextFieldChange}\n      maxLength={20}\n      autoComplete=\"off\"\n      showCharacterCount\n    />\n  );\n}\n\n"},{"fileName":"text-field-with-clear-button.tsx","title":"With clear button","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to allow merchants to clear the content from a text field.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {TextField} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction TextFieldWithClearButtonExample() {\n  const [textFieldValue, setTextFieldValue] = useState('Jaded Pixel');\n\n  const handleTextFieldChange = useCallback(\n    (value: string) => setTextFieldValue(value),\n    [],\n  );\n\n  const handleClearButtonClick = useCallback(() => setTextFieldValue(''), []);\n\n  return (\n    <TextField\n      label=\"Store name\"\n      value={textFieldValue}\n      onChange={handleTextFieldChange}\n      clearButton\n      onClearButtonClick={handleClearButtonClick}\n      autoComplete=\"off\"\n    />\n  );\n}\n\n"},{"fileName":"text-field-with-monospaced-font.tsx","title":"With monospaced font","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to apply a monospaced font to the TextField\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {TextField} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction TextFieldWithMonospacedFontExample() {\n  const [textFieldValue, setTextFieldValue] = useState('Jaded Pixel');\n\n  const handleTextFieldChange = useCallback(\n    (value: string) => setTextFieldValue(value),\n    [],\n  );\n\n  return (\n    <TextField\n      label=\"Store name\"\n      value={textFieldValue}\n      onChange={handleTextFieldChange}\n      monospaced\n      autoComplete=\"off\"\n    />\n  );\n}\n\n"},{"fileName":"text-field-with-value-selected-on-focus.tsx","title":"With value selected on focus","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to select all text inside TextField on focus.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {TextField} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction TextFieldWithSelectTextOnFocusExample() {\n  const [textFieldValue, setTextFieldValue] = useState('Jaded Pixel');\n\n  const handleTextFieldChange = useCallback(\n    (value: string) => setTextFieldValue(value),\n    [],\n  );\n\n  return (\n    <TextField\n      label=\"Store name\"\n      value={textFieldValue}\n      onChange={handleTextFieldChange}\n      selectTextOnFocus\n      autoComplete=\"off\"\n    />\n  );\n}\n\n"},{"fileName":"text-field-with-inline-suggestion.tsx","title":"With inline suggestion","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to provide an autocomplete suggestion inline with the input value. See the combobox component's tag multi-select example for full implementation of the inline autocomplete pattern.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {TextField} from '@shopify/polaris';\nimport {\n  useState,\n  useEffect,\n  useCallback,\n  useMemo,\n  KeyboardEventHandler,\n} from 'react';\n\nfunction TextFieldWithSuggestionExample() {\n  const suggestions = useMemo(\n    () => [\n      'Alabama',\n      'Alaska',\n      'American Samoa',\n      'Arizona',\n      'Arkansas',\n      'California',\n      'Colorado',\n      'Connecticut',\n      'Delaware',\n      'District of Columbia',\n      'Florida',\n      'Georgia',\n      'Guam',\n      'Hawaii',\n      'Idaho',\n      'Illinois',\n      'Indiana',\n      'Iowa',\n      'Kansas',\n      'Kentucky',\n      'Louisiana',\n      'Maine',\n      'Maryland',\n      'Massachusetts',\n      'Michigan',\n      'Minnesota',\n      'Minor Outlying Islands',\n      'Mississippi',\n      'Missouri',\n      'Montana',\n      'Nebraska',\n      'Nevada',\n      'New Hampshire',\n      'New Jersey',\n      'New Mexico',\n      'New York',\n      'North Carolina',\n      'North Dakota',\n      'Northern Mariana Islands',\n      'Ohio',\n      'Oklahoma',\n      'Oregon',\n      'Pennsylvania',\n      'Puerto Rico',\n      'Rhode Island',\n      'South Carolina',\n      'South Dakota',\n      'Tennessee',\n      'Texas',\n      'U.S. Virgin Islands',\n      'Utah',\n      'Vermont',\n      'Virginia',\n      'Washington',\n      'West Virginia',\n      'Wisconsin',\n      'Wyoming',\n    ],\n    [],\n  );\n\n  const [value, setValue] = useState('');\n  const [suggestion, setSuggestion] = useState('');\n\n  const handleSuggestion = useCallback(\n    (nextValue: string) => {\n      const nextSuggestion = suggestions.find((suggestion) =>\n        suggestion.toLowerCase().startsWith(nextValue.toLowerCase()),\n      );\n\n      if (nextSuggestion) setSuggestion(nextSuggestion);\n    },\n    [suggestions],\n  );\n\n  useEffect(() => {\n    if (value !== suggestion) handleSuggestion(value);\n  }, [handleSuggestion, suggestion, value]);\n\n  const handleChange = useCallback((value: string) => {\n    setValue(value);\n    setSuggestion('');\n  }, []);\n\n  const handleKeyDown = useCallback<KeyboardEventHandler>(\n    (event) => {\n      if (event.key === 'Enter') {\n        handleChange(suggestion);\n      }\n    },\n    [suggestion, handleChange],\n  );\n\n  return (\n    <div onKeyDown={handleKeyDown}>\n      <TextField\n        type=\"text\"\n        label=\"State\"\n        value={value}\n        onChange={handleChange}\n        suggestion={suggestion}\n        autoComplete=\"off\"\n      />\n    </div>\n  );\n}\n\n"}],"seoDescription":"A text field is an input field that merchants can type into. It has a range of options and supports several text formats including numbers.","type":{"TextFieldProps":{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"TypeAliasDeclaration","name":"TextFieldProps","value":"NonMutuallyExclusiveProps & MutuallyExclusiveInteractionProps & MutuallyExclusiveSelectionProps","description":""},"NonMutuallyExclusiveProps":{"filePath":"polaris-react/src/components/TextField/TextField.tsx","name":"NonMutuallyExclusiveProps","description":"","members":[{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"prefix","value":"React.ReactNode","description":"Text to display before value","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"suffix","value":"React.ReactNode","description":"Text to display after value","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"verticalContent","value":"React.ReactNode","description":"Content to vertically display above the input value","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"placeholder","value":"string","description":"Hint text to display","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"value","value":"string","description":"Initial value for the input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"helpText","value":"React.ReactNode","description":"Additional hint text to display","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"label","value":"React.ReactNode","description":"Label for the input"},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"labelAction","value":"Action","description":"Adds an action to the label","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"labelHidden","value":"boolean","description":"Visually hide the label","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"disabled","value":"boolean","description":"Disable the input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"clearButton","value":"boolean","description":"Show a clear text button in the input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"selectTextOnFocus","value":"boolean","description":"Indicates whether or not the entire value should be selected on focus.","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"suggestion","value":"string","description":"An inline autocomplete suggestion containing the input value. The characters that complete the input value are selected for ease of deletion on input change or keypress of Backspace/Delete. The selected substring is visually highlighted with subdued styling.","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"readOnly","value":"boolean","description":"Disable editing of the input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"autoFocus","value":"boolean","description":"Automatically focus the input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"focused","value":"boolean","description":"Force the focus state on the input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"multiline","value":"number | boolean","description":"Allow for multiple lines of input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"error","value":"any","description":"Error to display beneath the label","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"connectedRight","value":"React.ReactNode","description":"An element connected to the right of the input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"connectedLeft","value":"React.ReactNode","description":"An element connected to the left of the input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"type","value":"Type","description":"Determine type of input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"name","value":"string","description":"Name of the input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"id","value":"string","description":"ID for the input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"role","value":"string","description":"Defines a specific role attribute for the input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"step","value":"number","description":"Limit increment value for numeric and date-time inputs","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"largeStep","value":"number","description":"Increment value for numeric and date-time inputs when using Page Up or Page Down","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"autoComplete","value":"string","description":"Enable automatic completion by the browser. Set to \"off\" when you do not want the browser to fill in info"},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"max","value":"string | number","description":"Mimics the behavior of the native HTML attribute, limiting the maximum value","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"maxLength","value":"number","description":"Maximum character length for an input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"maxHeight","value":"string | number","description":"Maximum height of the input element. Only applies when `multiline` is `true`","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"min","value":"string | number","description":"Mimics the behavior of the native HTML attribute, limiting the minimum value","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"minLength","value":"number","description":"Minimum character length for an input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"pattern","value":"string","description":"A regular expression to check the value against","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"inputMode","value":"InputMode","description":"Choose the keyboard that should be used on mobile devices","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"spellCheck","value":"boolean","description":"Indicate whether value should have spelling checked","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"ariaOwns","value":"string","description":"Indicates the id of a component owned by the input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"ariaExpanded","value":"boolean","description":"Indicates whether or not a Popover is displayed","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"ariaControls","value":"string","description":"Indicates the id of a component controlled by the input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"ariaActiveDescendant","value":"string","description":"Indicates the id of a related component’s visually focused element to the input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"ariaAutocomplete","value":"string","description":"Indicates what kind of user input completion suggestions are provided","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"showCharacterCount","value":"boolean","description":"Indicates whether or not the character count should be displayed","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"align","value":"Alignment","description":"Determines the alignment of the text in the input","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"requiredIndicator","value":"boolean","description":"Visual required indicator, adds an asterisk to label","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"monospaced","value":"boolean","description":"Indicates whether or not a monospaced font should be used","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"variant","value":"\"inherit\" | \"borderless\"","description":"Visual styling options for the TextField","isOptional":true,"defaultValue":"'inherit'"},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"MethodSignature","name":"onClearButtonClick","value":"(id: string) => void","description":"Callback fired when clear button is clicked","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"MethodSignature","name":"onChange","value":"(value: string, id: string) => void","description":"Callback fired when value is changed","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"MethodSignature","name":"onSpinnerChange","value":"(value: string, id: string) => void","description":"When provided, callback fired instead of onChange when value is changed via the number step control","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"onFocus","value":"(event?: React.FocusEvent) => void","description":"Callback fired when input is focused","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"MethodSignature","name":"onBlur","value":"(event?: React.FocusEvent) => void","description":"Callback fired when input is blurred","isOptional":true},{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"tone","value":"\"magic\"","description":"Indicates the tone of the text field","isOptional":true}],"value":"interface NonMutuallyExclusiveProps {\n  /** Text to display before value */\n  prefix?: React.ReactNode;\n  /** Text to display after value */\n  suffix?: React.ReactNode;\n  /** Content to vertically display above the input value */\n  verticalContent?: React.ReactNode;\n  /** Hint text to display */\n  placeholder?: string;\n  /** Initial value for the input */\n  value?: string;\n  /** Additional hint text to display */\n  helpText?: React.ReactNode;\n  /** Label for the input */\n  label: React.ReactNode;\n  /** Adds an action to the label */\n  labelAction?: LabelledProps['action'];\n  /** Visually hide the label */\n  labelHidden?: boolean;\n  /** Disable the input */\n  disabled?: boolean;\n  /** Show a clear text button in the input */\n  clearButton?: boolean;\n  /** Indicates whether or not the entire value should be selected on focus. */\n  selectTextOnFocus?: boolean;\n  /** An inline autocomplete suggestion containing the input value. The characters that complete the input value are selected for ease of deletion on input change or keypress of Backspace/Delete. The selected substring is visually highlighted with subdued styling. */\n  suggestion?: string;\n  /** Disable editing of the input */\n  readOnly?: boolean;\n  /** Automatically focus the input */\n  autoFocus?: boolean;\n  /** Force the focus state on the input */\n  focused?: boolean;\n  /** Allow for multiple lines of input */\n  multiline?: boolean | number;\n  /** Error to display beneath the label */\n  error?: Error | boolean;\n  /** An element connected to the right of the input */\n  connectedRight?: React.ReactNode;\n  /** An element connected to the left of the input */\n  connectedLeft?: React.ReactNode;\n  /** Determine type of input */\n  type?: Type;\n  /** Name of the input */\n  name?: string;\n  /** ID for the input */\n  id?: string;\n  /** Defines a specific role attribute for the input */\n  role?: string;\n  /** Limit increment value for numeric and date-time inputs */\n  step?: number;\n  /** Increment value for numeric and date-time inputs when using Page Up or Page Down */\n  largeStep?: number;\n  /** Enable automatic completion by the browser. Set to \"off\" when you do not want the browser to fill in info */\n  autoComplete: string;\n  /** Mimics the behavior of the native HTML attribute, limiting the maximum value */\n  max?: number | string;\n  /** Maximum character length for an input */\n  maxLength?: number;\n  /** Maximum height of the input element. Only applies when `multiline` is `true` */\n  maxHeight?: number | string;\n  /** Mimics the behavior of the native HTML attribute, limiting the minimum value */\n  min?: number | string;\n  /** Minimum character length for an input */\n  minLength?: number;\n  /** A regular expression to check the value against */\n  pattern?: string;\n  /** Choose the keyboard that should be used on mobile devices */\n  inputMode?: InputMode;\n  /** Indicate whether value should have spelling checked */\n  spellCheck?: boolean;\n  /** Indicates the id of a component owned by the input */\n  ariaOwns?: string;\n  /** Indicates whether or not a Popover is displayed */\n  ariaExpanded?: boolean;\n  /** Indicates the id of a component controlled by the input */\n  ariaControls?: string;\n  /** Indicates the id of a related component’s visually focused element to the input */\n  ariaActiveDescendant?: string;\n  /** Indicates what kind of user input completion suggestions are provided */\n  ariaAutocomplete?: string;\n  /** Indicates whether or not the character count should be displayed */\n  showCharacterCount?: boolean;\n  /** Determines the alignment of the text in the input */\n  align?: Alignment;\n  /** Visual required indicator, adds an asterisk to label */\n  requiredIndicator?: boolean;\n  /** Indicates whether or not a monospaced font should be used */\n  monospaced?: boolean;\n  /** Visual styling options for the TextField\n   * @default 'inherit'\n   */\n  variant?: 'inherit' | 'borderless';\n  /** Callback fired when clear button is clicked */\n  onClearButtonClick?(id: string): void;\n  /** Callback fired when value is changed */\n  onChange?(value: string, id: string): void;\n  /** When provided, callback fired instead of onChange when value is changed via the number step control  */\n  onSpinnerChange?(value: string, id: string): void;\n  /** Callback fired when input is focused */\n  onFocus?: (event?: React.FocusEvent) => void;\n  /** Callback fired when input is blurred */\n  onBlur?(event?: React.FocusEvent): void;\n  /** Indicates the tone of the text field */\n  tone?: 'magic';\n}"},"Action":{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"Action","description":"","members":[{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"id","value":"string","description":"A unique identifier for the action","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"content","value":"string","description":"Content the action displays","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"accessibilityLabel","value":"string","description":"Visually hidden text for screen readers","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"url","value":"string","description":"A destination to link to, rendered in the action","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"external","value":"boolean","description":"Forces url to open in a new tab","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"target","value":"Target","description":"Where to display the url","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"MethodSignature","name":"onAction","value":"() => void","description":"Callback when an action takes place","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"MethodSignature","name":"onMouseEnter","value":"() => void","description":"Callback when mouse enter","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"MethodSignature","name":"onTouchStart","value":"() => void","description":"Callback when element is touched","isOptional":true}],"value":"export interface Action {\n  /** A unique identifier for the action */\n  id?: string;\n  /** Content the action displays */\n  content?: string;\n  /** Visually hidden text for screen readers */\n  accessibilityLabel?: string;\n  /** A destination to link to, rendered in the action */\n  url?: string;\n  /** Forces url to open in a new tab */\n  external?: boolean;\n  /** Where to display the url */\n  target?: Target;\n  /** Callback when an action takes place */\n  onAction?(): void;\n  /** Callback when mouse enter */\n  onMouseEnter?(): void;\n  /** Callback when element is touched */\n  onTouchStart?(): void;\n}"},"Target":{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"TypeAliasDeclaration","name":"Target","value":"'_blank' | '_self' | '_parent' | '_top'","description":""},"Type":{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"TypeAliasDeclaration","name":"Type","value":"'text' | 'email' | 'number' | 'integer' | 'password' | 'search' | 'tel' | 'url' | 'date' | 'datetime-local' | 'month' | 'time' | 'week' | 'currency'","description":""},"InputMode":{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"TypeAliasDeclaration","name":"InputMode","value":"'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'","description":""},"Alignment":{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"TypeAliasDeclaration","name":"Alignment","value":"'left' | 'center' | 'right'","description":""},"MutuallyExclusiveInteractionProps":{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"TypeAliasDeclaration","name":"MutuallyExclusiveInteractionProps","value":"Interactive | Readonly | Disabled","description":""},"Interactive":{"filePath":"polaris-react/src/components/TextField/TextField.tsx","name":"Interactive","description":"","members":[{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"MethodSignature","name":"onChange","value":"(value: string, id: string) => void","description":""}],"value":"interface Interactive {\n  onChange(value: string, id: string): void;\n}"},"Readonly":{"filePath":"polaris-react/src/components/TextField/TextField.tsx","name":"Readonly","description":"","members":[{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"readonly","value":"true","description":"","isOptional":true}],"value":"interface Readonly {\n  readonly?: true;\n}"},"Disabled":{"filePath":"polaris-react/src/components/TextField/TextField.tsx","name":"Disabled","description":"","members":[{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"disabled","value":"true","description":"","isOptional":true}],"value":"interface Disabled {\n  disabled?: true;\n}"},"MutuallyExclusiveSelectionProps":{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"TypeAliasDeclaration","name":"MutuallyExclusiveSelectionProps","value":"SelectSuggestion | SelectTextOnFocus","description":""},"SelectSuggestion":{"filePath":"polaris-react/src/components/TextField/TextField.tsx","name":"SelectSuggestion","description":"","members":[{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"suggestion","value":"string","description":"","isOptional":true}],"value":"interface SelectSuggestion {\n  suggestion?: string;\n}"},"SelectTextOnFocus":{"filePath":"polaris-react/src/components/TextField/TextField.tsx","name":"SelectTextOnFocus","description":"","members":[{"filePath":"polaris-react/src/components/TextField/TextField.tsx","syntaxKind":"PropertySignature","name":"selectTextOnFocus","value":"true","description":"","isOptional":true}],"value":"interface SelectTextOnFocus {\n  selectTextOnFocus?: true;\n}"}},"editPageLinkPath":"polaris.shopify.com/content/components/selection-and-input/text-field.mdx"},"__N_SSG":true}