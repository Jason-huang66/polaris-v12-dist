{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    hr: \"hr\"\n  }, _provideComponents(), props.components), {Lede, StatusBanner, Examples, Props} = _components;\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  if (!StatusBanner) _missingMdxReference(\"StatusBanner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"Use when an element needs to be available to assistive technology (for example, a screen reader) but otherwise hidden.\"\n      })\n    }), \"\\n\", _jsx(StatusBanner, {\n      status: frontmatter.status,\n      children: _jsx(_components.p, {\n        children: \"This component is no longer supported. Please use the Text component instead.\"\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"mapping-to-the-text-component\",\n      children: \"Mapping to the Text component\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-diff\",\n        children: \"- <VisuallyHidden>\\n-   <Heading>Title and description</Heading>\\n- </VisuallyHidden>\\n+ <Text visuallyHidden variant=\\\"headingMd\\\" as=\\\"h2\\\">Title and description</Text>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.hr, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Visually hidden","shortDescription":"Used when an element needs to be available to assistive technology but otherwise hidden.","category":"Deprecated","keywords":["VisuallyHidden","screen readers","hidden but available for screen readers","visually hidden headings","hide","hidden headings","hidden text","visually hidden table headers","visually hidden headers","hidden table headers","hidden table headings","accessibility","a11y","assistive technology"],"status":"Deprecated","previewImg":"/images/components/deprecated/visually-hidden.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[],"seoDescription":"Use when an element needs to be available to assistive technology (for example, a screen reader) but otherwise hidden.","type":{},"editPageLinkPath":"polaris.shopify.com/content/components/deprecated/visually-hidden.mdx"},"__N_SSG":true}