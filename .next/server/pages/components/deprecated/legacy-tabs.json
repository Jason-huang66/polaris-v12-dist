{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    hr: \"hr\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components), {Lede, StatusBanner, Examples, Props} = _components;\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  if (!StatusBanner) _missingMdxReference(\"StatusBanner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"Use to alternate among related views within the same context.\"\n      })\n    }), \"\\n\", _jsx(StatusBanner, {\n      status: frontmatter.status,\n      children: _jsxs(_components.p, {\n        children: [\"This component is no longer supported. The new \", _jsx(_components.a, {\n          href: \"/components/navigation/tabs\",\n          children: \"Tabs\\ncomponent\"\n        }), \" can be used as a standalone component,\\nbut is used primarily within\\n\", _jsx(_components.a, {\n          href: \"/components/selection-and-input/index-filters\",\n          children: \"IndexFilters\"\n        }), \" for navigating\\nand creating saved views of filtered IndexTables. Learn more about our\\n\", _jsx(_components.a, {\n          href: \"/getting-started/components-lifecycle\",\n          children: \"component lifecycles\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Tabs should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Represent the same kind of content, such as a list-view with different filters applied. Don’t use tabs to group content that is dissimilar.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Only be active one at a time.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Not force merchants to jump back and forth to do a single task. Merchants should be able to complete their work and find what they need under each tab.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Not be used for primary navigation.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"content-guidelines\",\n      children: \"Content guidelines\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"tabs\",\n      children: \"Tabs\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Tabs should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Be clearly labeled to help differentiate the different sections beneath them.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Have short and scannable labels, generally kept to single word.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Relate to the section of Shopify they’re on. Imagine the page section title is an invisible noun after the tab. For example, the tabs for the orders section are:\"\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"All\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"Open\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"Unfulfilled\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"Unpaid\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The tabs for the gift cards section are:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"All\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"New\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Partially used\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Used\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Disabled\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"And for the customers section, the tabs are:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"All\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"New\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Returning\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Abandoned checkouts\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Email subscribers\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Where possible, follow this pattern when writing tabs.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Legacy tabs","shortDescription":"Used to alternate among related views within the same context.","category":"Deprecated","keywords":["layout","navigate","organize","list views","list filters","fitted tabs","segmented controls","scrollable"],"status":"Deprecated","examples":[{"fileName":"legacy-tabs-default.tsx","title":"Default","description":"Use for most cases, especially when the number of tabs may be more than three."},{"fileName":"legacy-tabs-fitted.tsx","title":"Fitted","description":"Use when tabs contain a few (2 or 3) items within a narrow column."},{"fileName":"legacy-tabs-with-badge-content.tsx","title":"With badge content","description":"Use to inform a piece of information about the tabs."},{"fileName":"legacy-tabs-with-custom-disclosure.tsx","title":"With custom disclosure","description":"Use to provide information about the popover contents"}],"previewImg":"/images/components/deprecated/legacy-tabs.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"legacy-tabs-default.tsx","title":"Default","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use for most cases, especially when the number of tabs may be more than three.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyCard, LegacyTabs} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction TabsExample() {\n  const [selected, setSelected] = useState(0);\n\n  const handleTabChange = useCallback(\n    (selectedTabIndex: number) => setSelected(selectedTabIndex),\n    [],\n  );\n\n  const tabs = [\n    {\n      id: 'all-customers-1',\n      content: 'All',\n      accessibilityLabel: 'All customers',\n      panelID: 'all-customers-content-1',\n    },\n    {\n      id: 'accepts-marketing-1',\n      content: 'Accepts marketing',\n      panelID: 'accepts-marketing-content-1',\n    },\n    {\n      id: 'repeat-customers-1',\n      content: 'Repeat customers',\n      panelID: 'repeat-customers-content-1',\n    },\n    {\n      id: 'prospects-1',\n      content: 'Prospects',\n      panelID: 'prospects-content-1',\n    },\n  ];\n\n  return (\n    <LegacyCard>\n      <LegacyTabs tabs={tabs} selected={selected} onSelect={handleTabChange}>\n        <LegacyCard.Section title={tabs[selected].content}>\n          <p>Tab {selected} selected</p>\n        </LegacyCard.Section>\n      </LegacyTabs>\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"legacy-tabs-fitted.tsx","title":"Fitted","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when tabs contain a few (2 or 3) items within a narrow column.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyCard, LegacyTabs} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction FittedTabsExample() {\n  const [selected, setSelected] = useState(0);\n\n  const handleTabChange = useCallback(\n    (selectedTabIndex: number) => setSelected(selectedTabIndex),\n    [],\n  );\n\n  const tabs = [\n    {\n      id: 'all-customers-fitted-2',\n      content: 'All',\n      accessibilityLabel: 'All customers',\n      panelID: 'all-customers-fitted-content-2',\n    },\n    {\n      id: 'accepts-marketing-fitted-2',\n      content: 'Accepts marketing',\n      panelID: 'accepts-marketing-fitted-Ccontent-2',\n    },\n  ];\n\n  return (\n    <LegacyCard>\n      <LegacyTabs\n        tabs={tabs}\n        selected={selected}\n        onSelect={handleTabChange}\n        fitted\n      >\n        <LegacyCard.Section title={tabs[selected].content}>\n          <p>Tab {selected} selected</p>\n        </LegacyCard.Section>\n      </LegacyTabs>\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"legacy-tabs-with-badge-content.tsx","title":"With badge content","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to inform a piece of information about the tabs.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Badge, LegacyCard, LegacyTabs} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction TabsWithBadgeExample() {\n  const [selected, setSelected] = useState(0);\n\n  const handleTabChange = useCallback(\n    (selectedTabIndex: number) => setSelected(selectedTabIndex),\n    [],\n  );\n\n  const tabs = [\n    {\n      id: 'all-customers-fitted-3',\n      content: (\n        <span>\n          All <Badge tone=\"new\">10+</Badge>\n        </span>\n      ),\n      accessibilityLabel: 'All customers',\n      panelID: 'all-customers-fitted-content-3',\n    },\n    {\n      id: 'accepts-marketing-fitted-3',\n      content: (\n        <span>\n          Accepts marketing <Badge tone=\"new\">4</Badge>\n        </span>\n      ),\n      panelID: 'accepts-marketing-fitted-content-3',\n    },\n  ];\n\n  return (\n    <LegacyCard>\n      <LegacyTabs\n        tabs={tabs}\n        selected={selected}\n        onSelect={handleTabChange}\n        fitted\n      >\n        <LegacyCard.Section title={tabs[selected].content}>\n          <p>Tab {selected} selected</p>\n        </LegacyCard.Section>\n      </LegacyTabs>\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"legacy-tabs-with-custom-disclosure.tsx","title":"With custom disclosure","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to provide information about the popover contents\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyCard, LegacyTabs} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction TabsWithCustomDisclosureExample() {\n  const [selected, setSelected] = useState(0);\n\n  const handleTabChange = useCallback(\n    (selectedTabIndex: number) => setSelected(selectedTabIndex),\n    [],\n  );\n\n  const tabs = [\n    {\n      id: 'all-customers-4',\n      content: 'All',\n      accessibilityLabel: 'All customers',\n      panelID: 'all-customers-content-4',\n    },\n    {\n      id: 'accepts-marketing-4',\n      content: 'Accepts marketing',\n      panelID: 'accepts-marketing-content-4',\n    },\n    {\n      id: 'repeat-customers-4',\n      content: 'Repeat customers',\n      panelID: 'repeat-customers-content-4',\n    },\n    {\n      id: 'prospects-4',\n      content: 'Prospects',\n      panelID: 'prospects-content-4',\n    },\n  ];\n\n  return (\n    <LegacyCard>\n      <LegacyTabs\n        tabs={tabs}\n        selected={selected}\n        onSelect={handleTabChange}\n        disclosureText=\"More views\"\n      >\n        <LegacyCard.Section title={tabs[selected].content}>\n          <p>Tab {selected} selected</p>\n        </LegacyCard.Section>\n      </LegacyTabs>\n    </LegacyCard>\n  );\n}\n\n"}],"seoDescription":"Use to alternate among related views within the same context.","type":{},"editPageLinkPath":"polaris.shopify.com/content/components/deprecated/legacy-tabs.mdx"},"__N_SSG":true}