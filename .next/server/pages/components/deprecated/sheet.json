{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    hr: \"hr\",\n    a: \"a\"\n  }, _provideComponents(), props.components), {Lede, StatusBanner, Examples, Props} = _components;\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  if (!StatusBanner) _missingMdxReference(\"StatusBanner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"A sheet is a large container that enters from the edge of the screen when triggered by the merchant. It’s used to provide merchants with actions and information contextual to the page. It doesn’t interrupt their flow like a modal.\"\n      })\n    }), \"\\n\", _jsx(StatusBanner, {\n      status: frontmatter.status,\n      children: _jsx(_components.p, {\n        children: \"The sheet component encourages designers to create a new layer on top of the\\npage instead of improving the existing user interface. It also blocks other\\nparts of the UI, forces users to switch context, and adds complexity to\\notherwise simple interactions.\"\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"accessibility\",\n      children: \"Accessibility\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Sheets provide an opportunity to let merchants dig into more detail on their current task, or access information for their current task in a different way. Although merchants may be able to see content in the sheet and the main page content at the same time, they should only be expected to interact with one or the other at any given time.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"keyboard-support\",\n      children: \"Keyboard support\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Use the \", _jsx(_components.code, {\n          children: \"onClose\"\n        }), \" prop so that the sheet can be closed with the \", _jsx(\"kbd\", {\n          children: \"esc\"\n        }), \" key as well as with button-based controls\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Use a button to open the sheet\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"When the sheet opens, focus moves to it so merchants who rely on the keyboard and screen readers can access it\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Focus is kept in the sheet until it is dismissed\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"When the sheet closes, focus moves back to the button that launched it\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"responsive-behavior\",\n      children: \"Responsive behavior\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"At small screen sizes, the sheet component enters the page from the bottom of the screen. At larger screen sizes, the sheet component enters the page from the right side of the scren.\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The sheet component should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Include a heading that summarizes the actions and information in the sheet, for example, More filters\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Be openable through clear actions, like a link or button\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Be close-able through clear actions, like Done, the [X] button, and the esc key\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Include information and actions contextual to the current task\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Not block merchants from completing their task, like a modal would\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Not open from within another sheet (only one sheet can be open at a time)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Preserve its state—the settings and actions won’t reset when it’s closed\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The sheet component is best used in cases where the merchant needs to see elements behind it, and for that reason it uses a transparent backdrop. The backdrop is a full screen overlay which closes its parent component when pressed.\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"related-components\",\n      children: \"Related components\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"To offer an action before merchants can go to the next step in the flow, use the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/overlays/modal\",\n          children: \"modal component\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To present a small amount of content or a menu of actions in a non-blocking overlay, use the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/overlays/popover\",\n          children: \"popover component\"\n        })]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Sheet","shortDescription":"A large container providing actions and information contextual to the page without interrupting flow like a modal.","category":"Deprecated","keywords":["sheet","modal","open","title","overlay","drawer","dialog"],"status":"Deprecated","examples":[{"fileName":"sheet-default.tsx","title":"Default","description":"Use as the default option for a sheet."},{"fileName":"sheet-with-searchable-listbox.tsx","title":"With searchable listbox","description":"Use to help merchants browse, filter, and choose from a list of options."}],"previewImg":"/images/components/deprecated/sheet.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"sheet-default.tsx","title":"Default","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use as the default option for a sheet.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  List,\n  Button,\n  Page,\n  LegacyCard,\n  Sheet,\n  Scrollable,\n  ChoiceList,\n  Text,\n} from '@shopify/polaris';\nimport {MobileCancelMajor} from '@shopify/polaris-icons';\nimport {useState, useCallback} from 'react';\n\nfunction SheetExample() {\n  const [sheetActive, setSheetActive] = useState(true);\n\n  const [salesChannels] = useState([\n    {value: 'onlineStore', label: 'Online Store'},\n    {value: 'facebook', label: 'Facebook'},\n    {value: 'googleShopping', label: 'Google shopping'},\n    {value: 'facebookMarketing', label: 'Facebook Marketing'},\n  ]);\n  const [selected, setSelected] = useState<string[]>([]);\n\n  const toggleSheetActive = useCallback(\n    () => setSheetActive((sheetActive) => !sheetActive),\n    [],\n  );\n  const handleSelectedChange = useCallback(\n    (value: string[]) => setSelected(value),\n    [],\n  );\n\n  let selectedSalesChannels: {value: string; label: string}[] = [];\n  selected.forEach((selection) => {\n    salesChannels.forEach((channel) => {\n      if (channel.value === selection) {\n        selectedSalesChannels.push(channel);\n      }\n    });\n  });\n\n  const hasSelectedSalesChannels = selectedSalesChannels.length > 0;\n\n  const salesChannelsCardMarkup = hasSelectedSalesChannels ? (\n    <List>\n      {selectedSalesChannels.map((channel, index) => (\n        <List.Item key={index}>{channel.label}</List.Item>\n      ))}\n    </List>\n  ) : (\n    <div\n      style={{\n        alignItems: 'center',\n        display: 'flex',\n        justifyContent: 'space-between',\n        width: '100%',\n      }}\n    >\n      <p>No sales channels selected</p>\n      <Button onClick={toggleSheetActive}>Manage sales channels</Button>\n    </div>\n  );\n\n  const salesChannelAction = hasSelectedSalesChannels\n    ? [\n        {\n          onAction: toggleSheetActive,\n          content: 'Manage sales channels',\n        },\n      ]\n    : undefined;\n\n  return (\n    <Page narrowWidth>\n      <LegacyCard\n        sectioned\n        subdued\n        title=\"Product availability\"\n        actions={salesChannelAction}\n      >\n        {salesChannelsCardMarkup}\n      </LegacyCard>\n      <Sheet\n        open={sheetActive}\n        onClose={toggleSheetActive}\n        accessibilityLabel=\"Manage sales channels\"\n      >\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            height: '100%',\n          }}\n        >\n          <div\n            style={{\n              alignItems: 'center',\n              borderBottom: '1px solid #DFE3E8',\n              display: 'flex',\n              justifyContent: 'space-between',\n              padding: '1rem',\n              width: '100%',\n            }}\n          >\n            <Text variant=\"headingMd\" as=\"h2\">\n              Manage sales channels\n            </Text>\n            <Button\n              accessibilityLabel=\"Cancel\"\n              icon={MobileCancelMajor}\n              onClick={toggleSheetActive}\n              variant=\"plain\"\n            />\n          </div>\n          <Scrollable style={{padding: '1rem', height: '100%'}}>\n            <ChoiceList\n              title=\"Select a sales channel\"\n              name=\"salesChannelsList\"\n              choices={salesChannels}\n              selected={selected}\n              titleHidden\n              allowMultiple\n              onChange={handleSelectedChange}\n            />\n          </Scrollable>\n          <div\n            style={{\n              alignItems: 'center',\n              borderTop: '1px solid #DFE3E8',\n              display: 'flex',\n              justifyContent: 'space-between',\n              padding: '1rem',\n              width: '100%',\n            }}\n          >\n            <Button onClick={toggleSheetActive}>Cancel</Button>\n            <Button variant=\"primary\" onClick={toggleSheetActive}>\n              Done\n            </Button>\n          </div>\n        </div>\n      </Sheet>\n    </Page>\n  );\n}\n\n"},{"fileName":"sheet-with-searchable-listbox.tsx","title":"With searchable listbox","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to help merchants browse, filter, and choose from a list of options.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import React, {useState} from 'react';\nimport {\n  TextField,\n  Listbox,\n  Sheet,\n  Scrollable,\n  AutoSelection,\n  Icon,\n  Button,\n  EmptySearchResult,\n  TextContainer,\n  Text,\n} from '@shopify/polaris';\nimport {MobileCancelMajor, SearchMinor} from '@shopify/polaris-icons';\n\n\nconst actionValue = '__ACTION__';\n\nconst segments = [\n  {\n    label: 'All customers',\n    id: 'gid://shopify/CustomerSegment/1',\n    value: '0',\n  },\n  {\n    label: 'VIP customers',\n    id: 'gid://shopify/CustomerSegment/2',\n    value: '1',\n  },\n  {\n    label: 'New customers',\n    id: 'gid://shopify/CustomerSegment/3',\n    value: '2',\n  },\n  {\n    label: 'Abandoned carts - last 30 days',\n    id: 'gid://shopify/CustomerSegment/4',\n    value: '3',\n  },\n  {\n    label: 'Wholesale customers',\n    id: 'gid://shopify/CustomerSegment/5',\n    value: '4',\n  },\n  {\n    label: 'Email subscribers',\n    id: 'gid://shopify/CustomerSegment/6',\n    value: '5',\n  },\n  {\n    label: 'From New York',\n    id: 'gid://shopify/CustomerSegment/7',\n    value: '6',\n  },\n  {\n    label: 'Repeat buyers',\n    id: 'gid://shopify/CustomerSegment/8',\n    value: '7',\n  },\n  {\n    label: 'First time buyers',\n    id: 'gid://shopify/CustomerSegment/9',\n    value: '8',\n  },\n  {\n    label: 'From Canada',\n    id: 'gid://shopify/CustomerSegment/10',\n    value: '9',\n  },\n  {\n    label: 'Bought in last 60 days',\n    id: 'gid://shopify/CustomerSegment/11',\n    value: '10',\n  },\n  {\n    label: 'Bought last BFCM',\n    id: 'gid://shopify/CustomerSegment/12',\n    value: '11',\n  },\n];\n\nconst lazyLoadSegments = Array.from(Array(100)).map((_, index) => ({\n  label: `Other customers ${index + 13}`,\n  id: `gid://shopify/CustomerSegment/${index + 13}`,\n  value: `${index + 12}`,\n}));\n\nsegments.push(...lazyLoadSegments);\n\nconst interval = 25;\n\nfunction SheetWithSearchableListboxExample() {\n  const [sheetOpen, setSheetOpen] = useState(true);\n  const [showFooterAction, setShowFooterAction] = useState(true);\n  const [query, setQuery] = useState('');\n  const [lazyLoading, setLazyLoading] = useState(false);\n  const [willLoadMoreResults, setWillLoadMoreResults] = useState(true);\n  const [visibleOptionIndex, setVisibleOptionIndex] = useState(6);\n  const [activeOptionId, setActiveOptionId] = useState(segments[0].id);\n  const [selectedSegmentIndex, setSelectedSegmentIndex] = useState(0);\n  const [filteredSegments, setFilteredSegments] = useState<\n    typeof segments[number][]\n  >([]);\n\n  const handleClickShowAll = () => {\n    setShowFooterAction(false);\n    setVisibleOptionIndex(segments.length);\n  };\n\n  const handleFilterSegments = (query: string) => {\n    const nextFilteredSegments = segments.filter((segment) => {\n      return segment.label\n        .toLocaleLowerCase()\n        .includes(query.toLocaleLowerCase().trim());\n    });\n\n    setFilteredSegments(nextFilteredSegments);\n  };\n\n  const handleQueryChange = (query: string) => {\n    setQuery(query);\n\n    if (query.length >= 2) handleFilterSegments(query);\n  };\n\n  const handleQueryClear = () => {\n    handleQueryChange('');\n  };\n\n  const handleResetVisibleOptionIndex = () => {\n    setVisibleOptionIndex(interval);\n  };\n\n  const handleOpenSheet = () => {\n    setSheetOpen(true);\n  };\n\n  const handleCloseSheet = () => {\n    setSheetOpen(false);\n    handleQueryChange('');\n    handleResetVisibleOptionIndex();\n  };\n\n  const handleSegmentSelect = (segmentIndex: string) => {\n    if (segmentIndex === actionValue) {\n      return handleClickShowAll();\n    }\n\n    setSelectedSegmentIndex(Number(segmentIndex));\n    handleCloseSheet();\n  };\n\n  const handleActiveOptionChange = (_: string, domId: string) => {\n    setActiveOptionId(domId);\n  };\n\n  /* This is just to illustrate lazy loading state vs loading state. This is an example, so we aren't fetching from GraphQL. You'd use `pageInfo.hasNextPage` from your GraphQL query data instead of this fake \"willLoadMoreResults\" state along with setting `first` your GraphQL query's variables to your app's default max edges limit (e.g., 250). */\n\n  const handleLazyLoadSegments = () => {\n    if (willLoadMoreResults && !showFooterAction) {\n      setLazyLoading(true);\n\n      const options = query ? filteredSegments : segments;\n\n      setTimeout(() => {\n        const remainingOptionCount = options.length - visibleOptionIndex;\n        const nextVisibleOptionIndex =\n          remainingOptionCount >= interval\n            ? visibleOptionIndex + interval\n            : visibleOptionIndex + remainingOptionCount;\n\n        setLazyLoading(false);\n        setVisibleOptionIndex(nextVisibleOptionIndex);\n\n        if (remainingOptionCount <= interval) {\n          setWillLoadMoreResults(false);\n        }\n      }, 1000);\n    }\n  };\n\n  const listboxId = 'SearchableListboxInSheet';\n\n  /* Your app's feature/context specific activator here */\n  const activator = (\n    <Button onClick={handleOpenSheet}>\n      {segments[selectedSegmentIndex].label}\n    </Button>\n  );\n\n  const textFieldMarkup = (\n    <div\n      style={{\n        padding: 'var(--p-space-400) var(--p-space-200)',\n        position: 'sticky',\n        zIndex: 'var(--p-z-index-12)',\n        width: '100%',\n        background: 'var(--p-color-bg-surface)',\n      }}\n    >\n      <StopPropagation>\n        <TextField\n          focused={showFooterAction}\n          clearButton\n          labelHidden\n          label=\"Customer segments\"\n          placeholder=\"Search segments\"\n          autoComplete=\"off\"\n          value={query}\n          prefix={<Icon source={SearchMinor} />}\n          ariaActiveDescendant={activeOptionId}\n          ariaControls={listboxId}\n          onChange={handleQueryChange}\n          onClearButtonClick={handleQueryClear}\n        />\n      </StopPropagation>\n    </div>\n  );\n\n  const segmentOptions = query ? filteredSegments : segments;\n\n  const segmentList =\n    segmentOptions.length > 0\n      ? segmentOptions\n          .slice(0, visibleOptionIndex)\n          .map(({label, id, value}) => {\n            const selected = segments[selectedSegmentIndex].id === id;\n\n            return (\n              <Listbox.Option key={id} value={value} selected={selected}>\n                <Listbox.TextOption selected={selected}>\n                  {label}\n                </Listbox.TextOption>\n              </Listbox.Option>\n            );\n          })\n      : null;\n\n  const showAllMarkup = showFooterAction ? (\n    <Listbox.Action value={actionValue}>\n      <span style={{color: 'var(--p-color-text-emphasis)'}}>\n        Show all 111 segments\n      </span>\n    </Listbox.Action>\n  ) : null;\n\n  const lazyLoadingMarkup = lazyLoading ? (\n    <Listbox.Loading\n      accessibilityLabel={`${\n        query ? 'Filtering' : 'Loading'\n      } customer segments`}\n    />\n  ) : null;\n\n  const noResultsMarkup =\n    segmentOptions.length === 0 ? (\n      <EmptySearchResult\n        title=\"\"\n        description={`No segments found matching \"${query}\"`}\n      />\n    ) : null;\n\n  const listboxMarkup = (\n    <div\n      style={{\n        position: 'relative',\n        width: '100%',\n        height: '100%',\n      }}\n    >\n      <Listbox\n        enableKeyboardControl\n        autoSelection={AutoSelection.FirstSelected}\n        accessibilityLabel=\"Search for and select a customer segment\"\n        customListId={listboxId}\n        onSelect={handleSegmentSelect}\n        onActiveOptionChange={handleActiveOptionChange}\n      >\n        {segmentList}\n        {showAllMarkup}\n        {noResultsMarkup}\n        {lazyLoadingMarkup}\n      </Listbox>\n    </div>\n  );\n\n  return (\n    <div style={{height: '265px'}}>\n      {activator}\n      <Sheet\n        open={sheetOpen}\n        accessibilityLabel=\"Flow action\"\n        onClose={handleCloseSheet}\n      >\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          <div\n            style={{\n              alignItems: 'flex-start',\n              borderBottom: '1px solid #DFE3E8',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'space-between',\n              width: '100%',\n              padding: 'var(--p-space-400)',\n            }}\n          >\n            <div\n              style={{\n                alignItems: 'center',\n                display: 'flex',\n                justifyContent: 'space-between',\n                width: '100%',\n                marginBottom: 'var(--p-space-200)',\n              }}\n            >\n              <Text variant=\"headingSm\" as=\"h3\" tone=\"subdued\">\n                Action\n              </Text>\n              <Button\n                accessibilityLabel=\"Cancel\"\n                icon={MobileCancelMajor}\n                onClick={handleCloseSheet}\n                variant=\"plain\"\n              />\n            </div>\n            <TextContainer>\n              <Text variant=\"headingMd\" as=\"h2\">\n                Look up customer segmentation membership\n              </Text>\n              <Text tone=\"subdued\" as=\"span\">\n                Look up whether a customer is included in a segment.\n              </Text>\n            </TextContainer>\n          </div>\n          <div\n            style={{\n              alignItems: 'stretch',\n              borderTop: '1px solid #DFE3E8',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'stretch',\n              position: 'relative',\n              width: '100%',\n              height: '100%',\n              overflow: 'hidden',\n            }}\n          >\n            {textFieldMarkup}\n\n            <Scrollable\n              shadow\n              style={{\n                position: 'relative',\n                width: '100%',\n                height: '292px',\n                padding: 'var(--p-space-200) 0',\n              }}\n              onScrolledToBottom={handleLazyLoadSegments}\n            >\n              {listboxMarkup}\n            </Scrollable>\n          </div>\n        </div>\n      </Sheet>\n    </div>\n  );\n}\n\nconst StopPropagation = ({children}: React.PropsWithChildren<any>) => {\n  const stopEventPropagation = (event: React.MouseEvent | React.TouchEvent) => {\n    event.stopPropagation();\n  };\n\n  return (\n    <div onClick={stopEventPropagation} onTouchStart={stopEventPropagation}>\n      {children}\n    </div>\n  );\n};\n\n"}],"seoDescription":"A sheet is a large container that enters from the edge of the screen when triggered by the merchant. It’s used to provide merchants with actions and information contextual to the page. It doesn’t interrupt their flow like a modal.","type":{},"editPageLinkPath":"polaris.shopify.com/content/components/deprecated/sheet.mdx"},"__N_SSG":true}