{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    hr: \"hr\",\n    h3: \"h3\",\n    h4: \"h4\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Lede, StatusBanner, Examples, Props, DoDont} = _components;\n  if (!DoDont) _missingMdxReference(\"DoDont\", true);\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  if (!StatusBanner) _missingMdxReference(\"StatusBanner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"This is the legacy version of the Card component which is in the process of being updated to a more flexible and composable API. Cards are used to group similar concepts and tasks together to make Shopify easier for merchants to scan, read, and get things done.\"\n      })\n    }), \"\\n\", _jsx(StatusBanner, {\n      status: frontmatter.status,\n      children: _jsxs(_components.p, {\n        children: [\"This component is no longer supported. The new \", _jsx(_components.a, {\n          href: \"/components/layout-and-structure/card\",\n          children: \"Card\\ncomponent\"\n        }), \" can be used in combination\\nwith the new layout primitives to achieve similar results to LegacyCard. Learn\\nmore about our \", _jsx(_components.a, {\n          href: \"/getting-started/components-lifecycle\",\n          children: \"component lifecycles\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Cards should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Use headings that set clear expectations about the card’s purpose\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Prioritize information so the content merchants most need to know comes first\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Stick to single user flows or break more complicated flows into multiple sections\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Avoid too many call-to-action buttons or links and only one primary call to action per card\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Use calls to action on the bottom of the card for next steps and use the space in the upper right corner of the card for persistent, optional actions (such as an Edit link)\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"content-guidelines\",\n      children: \"Content guidelines\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"title\",\n      children: \"Title\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Card titles should follow the content guidelines for \", _jsx(_components.a, {\n        href: \"https://polaris.shopify.com/content/actionable-language#headings-and-subheadings\",\n        children: \"headings and subheadings\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"body-content\",\n      children: \"Body content\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Body content should be:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Actionable: start sentences with imperative verbs when telling merchants what actions are available to them (especially something new). Don’t use permissive language like “you can”.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do\",\n        children: \"Do\"\n      }), _jsx(_components.p, {\n        children: \"Get performance for all your sales channels.\"\n      }), _jsx(_components.h4, {\n        id: \"dont\",\n        children: \"Don’t\"\n      }), _jsx(_components.p, {\n        children: \"Now you can get performance data for all your sales channels.\"\n      })]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Structured for merchant success: always put the most critical information first.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Clear: use the verb “need” to help merchants understand when they’re required to do something.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-1\",\n        children: \"Do\"\n      }), _jsx(_components.p, {\n        children: \"To buy a shipping label, you need to enter the total weight of your shipment, including packaging.\"\n      }), _jsx(_components.h4, {\n        id: \"dont-1\",\n        children: \"Don’t\"\n      }), _jsx(_components.p, {\n        children: \"To buy a shipping label, you must enter the total weight of your shipment, including packaging.\"\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"call-to-action-button\",\n      children: \"Call-to-action button\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Buttons should be:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Clear and predictable: merchants should be able to anticipate what will happen when they click a button. Never deceive merchants by mislabeling a button.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-2\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Create order\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Buy shipping label\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont-2\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"New order\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Buy\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Action-led: buttons should always lead with a strong verb that encourages action. To provide enough context to merchants use the {verb}+{noun} format on buttons except in the case of common actions like Save, Close, Cancel, or OK.\"\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-3\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Activate Apple Pay\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"View shipping settings\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont-3\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Try Apple Pay\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"View your settings\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Scannable: Avoid unnecessary words and articles such as the, an, or a.\"\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-4\",\n        children: \"Do\"\n      }), _jsx(_components.p, {\n        children: \"Add menu item\"\n      }), _jsx(_components.h4, {\n        id: \"dont-4\",\n        children: \"Don’t\"\n      }), _jsx(_components.p, {\n        children: \"Add a menu item\"\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"section-titles\",\n      children: \"Section titles\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Section titles should be:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Informative: they should label the type of content grouped in the body content below\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Like headings: follow the same content guidelines as when you’re writing headings\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"action-links\",\n      children: \"Action links\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Links should be:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Used for secondary or persistent actions: links should be used to represent lower priority actions than buttons, or persistent actions that merchants may take at any time (such as a persistent Edit link).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Clearly labeled: merchants should not need to guess where they’ll end up if they click on an action link. Never use “click here” as a link because it doesn’t set expectations about what’s next.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Similar to buttons: Follow the same content guidelines as when you’re writing text for buttons.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"related-components\",\n      children: \"Related components\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"To create page-level layout, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/layout\",\n          children: \"use the layout component\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To highlight a Shopify feature, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/callout-card\",\n          children: \"use the callout card component\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"accessibility\",\n      children: \"Accessibility\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The required \", _jsx(_components.code, {\n        children: \"title\"\n      }), \" prop gives the card a level 2 heading (\", _jsx(_components.code, {\n        children: \"<h2>\"\n      }), \"). This helps with readability and provides structure to screen reader users.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you use the \", _jsx(_components.code, {\n        children: \"subdued\"\n      }), \" prop on a card or section, make sure that the card or section \", _jsx(_components.code, {\n        children: \"title\"\n      }), \" conveys the reason for using \", _jsx(_components.code, {\n        children: \"subdued\"\n      }), \". This ensures that merchants with low vision, including those who use screen readers, can identify that the content is inactive or less important.\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-5\",\n        children: \"Do\"\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"<LegacyCard title=\\\"Deactivated staff accounts\\\" sectioned subdued>\\n  <List>\\n    <List.Item>Felix Crafford</List.Item>\\n    <List.Item>Ezequiel Manno</List.Item>\\n  </List>\\n</LegacyCard>\\n\"\n        })\n      }), _jsx(_components.h4, {\n        id: \"dont-5\",\n        children: \"Don’t\"\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"<LegacyCard title=\\\"Staff accounts\\\" sectioned subdued>\\n  <List>\\n    <List.Item>Felix Crafford</List.Item>\\n    <List.Item>Ezequiel Manno</List.Item>\\n  </List>\\n</LegacyCard>\\n\"\n        })\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Legacy card","shortDescription":"Legacy version of the Card component. Used to group similar concepts and tasks together for easier scanning and reading.","category":"Deprecated","keywords":["layout","container","box","grid","panel","card with call to action in the footer","card with call to action in the heading","card with call to action in a section","card with button in the footer","card with button in the heading","card with multiple sections","card with subsections","sectioned card","card with a subdued section","subdued card for secondary content","callout","call out","legacy card"],"status":"Deprecated","examples":[{"fileName":"legacy-card-default.tsx","title":"Default","description":"Use when you have a simple message to communicate to merchants that doesn’t require any secondary steps."},{"fileName":"legacy-card-with-header-actions.tsx","title":"With header actions","description":"Use for less important card actions, or actions merchants may do before reviewing the contents of the card. For example, merchants may want to add items to a card containing a long list, or enter a customer’s new address."},{"fileName":"legacy-card-with-footer-actions.tsx","title":"With footer actions","description":"Use footer actions for a card’s most important actions, or actions merchants should do after reviewing the contents of the card. For example, merchants should review the contents of a shipment before an important action like adding tracking information. Footer actions can be left or right aligned with the `footerActionAlignment` prop."},{"fileName":"legacy-card-with-multiple-footer-actions.tsx","title":"With multiple footer actions","description":"When multiple secondary footer actions are provided, they will render in an action list popover activated by a disclosure button. The disclosure button text can be customized with the `secondaryFooterActionsDisclosureText` prop."},{"fileName":"legacy-card-with-custom-footer-actions.tsx","title":"With custom footer actions","description":"Use to present actionable content that is optional or not the primary purpose of the page."},{"fileName":"legacy-card-with-destructive-footer-action.tsx","title":"With destructive footer action","description":"Use when a card action will delete merchant data or be otherwise difficult to recover from."},{"fileName":"legacy-card-with-multiple-sections.tsx","title":"With multiple sections","description":"Use when you have two related but distinct pieces of information to communicate to merchants. Multiple sections can help break up complicated concepts to make them easier to scan and understand."},{"fileName":"legacy-card-with-multiple-titled-sections.tsx","title":"With multiple titled sections","description":"Use when you have two related but distinct pieces of information to communicate to merchants that are complex enough to require a title to introduce them."},{"fileName":"legacy-card-with-sections-and-actions.tsx","title":"With sections and actions","description":"Use when your card section has actions that apply only to that section."},{"fileName":"legacy-card-with-subsection.tsx","title":"With subsection","description":"Use when your card sections need further categorization."},{"fileName":"legacy-card-with-destructive-action.tsx","title":"With destructive action","description":"Use when a card action applies only to one section and will delete merchant data or be otherwise difficult to recover from."},{"fileName":"legacy-card-with-a-subdued-section.tsx","title":"With a subdued section","description":"Use to indicate when one of the sections in your card contains inactive or disabled content."},{"fileName":"legacy-card-with-subdued-for-secondary-content.tsx","title":"With subdued for secondary content","description":"Use for content that you want to deprioritize. Subdued cards don’t stand out as much as cards with white backgrounds so don’t use them for information or actions that are critical to merchants."},{"fileName":"legacy-card-with-separate-header.tsx","title":"With separate header","description":"Use to be able to use custom React elements as header content."},{"fileName":"legacy-card-with-custom-react-node-title.tsx","title":"With custom React Node title","description":"Use to render custom content such as icons, links, or buttons in a card section’s header."},{"fileName":"legacy-card-with-all-elements.tsx","title":"With all elements","description":"Use as a broad example that includes most props available to card."},{"fileName":"legacy-card-with-flushed-sections.tsx","title":"With flushed sections","description":"Use when you need further control over the spacing of your card sections."}],"previewImg":"/images/components/deprecated/legacy-card.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"legacy-card-default.tsx","title":"Default","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when you have a simple message to communicate to merchants that doesn’t require any secondary steps.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyCard} from '@shopify/polaris';\nimport React from 'react';\n\nfunction LegacyCardExample() {\n  return (\n    <LegacyCard title=\"Online store dashboard\" sectioned>\n      <p>View a summary of your online store’s performance.</p>\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"legacy-card-with-header-actions.tsx","title":"With header actions","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use for less important card actions, or actions merchants may do before reviewing the contents of the card. For example, merchants may want to add items to a card containing a long list, or enter a customer’s new address.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyCard} from '@shopify/polaris';\nimport React from 'react';\n\nfunction LegacyCardExample() {\n  return (\n    <LegacyCard sectioned title=\"Variants\" actions={[{content: 'Add variant'}]}>\n      <p>\n        Add variants if this product comes in multiple versions, like different\n        sizes or colors.\n      </p>\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"legacy-card-with-footer-actions.tsx","title":"With footer actions","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_components.p, {\n    children: [\"Use footer actions for a card’s most important actions, or actions merchants should do after reviewing the contents of the card. For example, merchants should review the contents of a shipment before an important action like adding tracking information. Footer actions can be left or right aligned with the \", _jsx(_components.code, {\n      children: \"footerActionAlignment\"\n    }), \" prop.\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyCard, List} from '@shopify/polaris';\nimport React from 'react';\n\nfunction LegacyCardExample() {\n  return (\n    <LegacyCard\n      title=\"Shipment 1234\"\n      secondaryFooterActions={[{content: 'Edit shipment'}]}\n      primaryFooterAction={{content: 'Add tracking number'}}\n    >\n      <LegacyCard.Section title=\"Items\">\n        <List>\n          <List.Item>1 × Oasis Glass, 4-Pack</List.Item>\n          <List.Item>1 × Anubis Cup, 2-Pack</List.Item>\n        </List>\n      </LegacyCard.Section>\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"legacy-card-with-multiple-footer-actions.tsx","title":"With multiple footer actions","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_components.p, {\n    children: [\"When multiple secondary footer actions are provided, they will render in an action list popover activated by a disclosure button. The disclosure button text can be customized with the \", _jsx(_components.code, {\n      children: \"secondaryFooterActionsDisclosureText\"\n    }), \" prop.\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyCard, List} from '@shopify/polaris';\nimport React from 'react';\n\nfunction LegacyCardExample() {\n  return (\n    <LegacyCard\n      title=\"Shipment 1234\"\n      secondaryFooterActions={[\n        {content: 'Cancel shipment', destructive: true},\n        {content: 'Add another shipment', disabled: true},\n      ]}\n      primaryFooterAction={{content: 'Add tracking number'}}\n    >\n      <LegacyCard.Section title=\"Items\">\n        <List>\n          <List.Item>1 × Oasis Glass, 4-Pack</List.Item>\n          <List.Item>1 × Anubis Cup, 2-Pack</List.Item>\n        </List>\n      </LegacyCard.Section>\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"legacy-card-with-custom-footer-actions.tsx","title":"With custom footer actions","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to present actionable content that is optional or not the primary purpose of the page.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyCard, LegacyStack, ButtonGroup, Button} from '@shopify/polaris';\nimport React from 'react';\n\nfunction LegacyCardExample() {\n  return (\n    <LegacyCard title=\"Secure your account with 2-step authentication\">\n      <LegacyCard.Section>\n        <LegacyStack spacing=\"loose\" vertical>\n          <p>\n            Two-step authentication adds an extra layer of security when logging\n            in to your account. A special code will be required each time you\n            log in, ensuring only you can access your account.\n          </p>\n          <LegacyStack distribution=\"trailing\">\n            <ButtonGroup>\n              <Button>Enable two-step authentication</Button>\n              <Button variant=\"plain\">Learn more</Button>\n            </ButtonGroup>\n          </LegacyStack>\n        </LegacyStack>\n      </LegacyCard.Section>\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"legacy-card-with-destructive-footer-action.tsx","title":"With destructive footer action","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when a card action will delete merchant data or be otherwise difficult to recover from.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyCard, List} from '@shopify/polaris';\nimport React from 'react';\n\nfunction LegacyCardExample() {\n  return (\n    <LegacyCard\n      title=\"Shipment 1234\"\n      secondaryFooterActions={[{content: 'Cancel shipment', destructive: true}]}\n      primaryFooterAction={{content: 'Add tracking number'}}\n    >\n      <LegacyCard.Section title=\"Items\">\n        <List>\n          <List.Item>1 × Oasis Glass, 4-Pack</List.Item>\n          <List.Item>1 × Anubis Cup, 2-Pack</List.Item>\n        </List>\n      </LegacyCard.Section>\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"legacy-card-with-multiple-sections.tsx","title":"With multiple sections","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when you have two related but distinct pieces of information to communicate to merchants. Multiple sections can help break up complicated concepts to make them easier to scan and understand.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyCard} from '@shopify/polaris';\nimport React from 'react';\n\nfunction LegacyCardExample() {\n  return (\n    <LegacyCard title=\"Online store dashboard\">\n      <LegacyCard.Section>\n        <p>View a summary of your online store’s performance.</p>\n      </LegacyCard.Section>\n\n      <LegacyCard.Section>\n        <p>\n          View a summary of your online store’s performance, including sales,\n          visitors, top products, and referrals.\n        </p>\n      </LegacyCard.Section>\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"legacy-card-with-multiple-titled-sections.tsx","title":"With multiple titled sections","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when you have two related but distinct pieces of information to communicate to merchants that are complex enough to require a title to introduce them.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyCard} from '@shopify/polaris';\nimport React from 'react';\n\nfunction LegacyCardExample() {\n  return (\n    <LegacyCard title=\"Online store dashboard\">\n      <LegacyCard.Section title=\"Reports\">\n        <p>View a summary of your online store’s performance.</p>\n      </LegacyCard.Section>\n\n      <LegacyCard.Section title=\"Summary\">\n        <p>\n          View a summary of your online store’s performance, including sales,\n          visitors, top products, and referrals.\n        </p>\n      </LegacyCard.Section>\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"legacy-card-with-sections-and-actions.tsx","title":"With sections and actions","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when your card section has actions that apply only to that section.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyCard} from '@shopify/polaris';\nimport React from 'react';\n\nfunction LegacyCardExample() {\n  return (\n    <LegacyCard title=\"Customer\">\n      <LegacyCard.Section>\n        <p>John Smith</p>\n      </LegacyCard.Section>\n      <LegacyCard.Section\n        title=\"Contact Information\"\n        actions={[{content: 'Edit'}]}\n      >\n        <p>john.smith@example.com</p>\n      </LegacyCard.Section>\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"legacy-card-with-subsection.tsx","title":"With subsection","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when your card sections need further categorization.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyCard} from '@shopify/polaris';\nimport React from 'react';\n\nfunction LegacyCardExample() {\n  return (\n    <LegacyCard title=\"Customer\">\n      <LegacyCard.Section>\n        <p>John Smith</p>\n      </LegacyCard.Section>\n      <LegacyCard.Section title=\"Addresses\">\n        <LegacyCard.Subsection>\n          123 First St\n          <br />\n          Somewhere\n          <br />\n          The Universe\n        </LegacyCard.Subsection>\n        <LegacyCard.Subsection>\n          123 Second St\n          <br />\n          Somewhere\n          <br />\n          The Universe\n        </LegacyCard.Subsection>\n      </LegacyCard.Section>\n      <LegacyCard.Section>\n        <LegacyCard.Subsection>\n          A single subsection without a sibling has no visual appearance\n        </LegacyCard.Subsection>\n      </LegacyCard.Section>\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"legacy-card-with-destructive-action.tsx","title":"With destructive action","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when a card action applies only to one section and will delete merchant data or be otherwise difficult to recover from.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyCard} from '@shopify/polaris';\nimport React from 'react';\n\nfunction LegacyCardExample() {\n  return (\n    <LegacyCard title=\"Customer\">\n      <LegacyCard.Section>\n        <p>John Smith</p>\n      </LegacyCard.Section>\n      <LegacyCard.Section\n        title=\"Contact Information\"\n        actions={[{content: 'Delete', destructive: true}, {content: 'Edit'}]}\n      >\n        <p>john.smith@example.com</p>\n      </LegacyCard.Section>\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"legacy-card-with-a-subdued-section.tsx","title":"With a subdued section","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to indicate when one of the sections in your card contains inactive or disabled content.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyCard, List} from '@shopify/polaris';\nimport React from 'react';\n\nfunction LegacyCardExample() {\n  return (\n    <LegacyCard title=\"Staff accounts\">\n      <LegacyCard.Section>\n        <List>\n          <List.Item>Felix Crafford</List.Item>\n          <List.Item>Ezequiel Manno</List.Item>\n        </List>\n      </LegacyCard.Section>\n\n      <LegacyCard.Section subdued title=\"Deactivated staff accounts\">\n        <List>\n          <List.Item>Felix Crafford</List.Item>\n          <List.Item>Ezequiel Manno</List.Item>\n        </List>\n      </LegacyCard.Section>\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"legacy-card-with-subdued-for-secondary-content.tsx","title":"With subdued for secondary content","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use for content that you want to deprioritize. Subdued cards don’t stand out as much as cards with white backgrounds so don’t use them for information or actions that are critical to merchants.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyCard, List} from '@shopify/polaris';\nimport React from 'react';\n\nfunction LegacyCardExample() {\n  return (\n    <LegacyCard title=\"Deactivated staff accounts\" sectioned subdued>\n      <List>\n        <List.Item>Felix Crafford</List.Item>\n        <List.Item>Ezequiel Manno</List.Item>\n      </List>\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"legacy-card-with-separate-header.tsx","title":"With separate header","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to be able to use custom React elements as header content.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyCard, Popover, Button, ActionList, List} from '@shopify/polaris';\nimport React from 'react';\n\nfunction LegacyCardExample() {\n  return (\n    <LegacyCard>\n      <LegacyCard.Header\n        actions={[\n          {\n            content: 'Preview',\n          },\n        ]}\n        title=\"Staff accounts\"\n      >\n        <Popover\n          active\n          activator={\n            <Button disclosure variant=\"plain\">\n              Add account\n            </Button>\n          }\n          onClose={() => {}}\n        >\n          <ActionList items={[{content: 'Member'}, {content: 'Admin'}]} />\n        </Popover>\n      </LegacyCard.Header>\n      <LegacyCard.Section>\n        <List>\n          <List.Item>Felix Crafford</List.Item>\n          <List.Item>Ezequiel Manno</List.Item>\n        </List>\n      </LegacyCard.Section>\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"legacy-card-with-custom-react-node-title.tsx","title":"With custom React Node title","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to render custom content such as icons, links, or buttons in a card section’s header.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyCard, LegacyStack, Icon, List, Text} from '@shopify/polaris';\nimport {ProductsMajor} from '@shopify/polaris-icons';\nimport React from 'react';\n\nfunction LegacyCardExample() {\n  return (\n    <LegacyCard title=\"Products\">\n      <LegacyCard.Section\n        title={\n          <LegacyStack>\n            <Icon source={ProductsMajor} />\n            <Text variant=\"headingSm\" as=\"h3\">\n              New Products\n            </Text>\n          </LegacyStack>\n        }\n      >\n        <List>\n          <List.Item>Socks</List.Item>\n          <List.Item>Super Shoes</List.Item>\n        </List>\n      </LegacyCard.Section>\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"legacy-card-with-all-elements.tsx","title":"With all elements","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use as a broad example that includes most props available to card.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  LegacyCard,\n  Popover,\n  Button,\n  ActionList,\n  TextContainer,\n  ResourceList,\n  LegacyStack,\n  List,\n} from '@shopify/polaris';\nimport React from 'react';\n\nfunction LegacyCardExample() {\n  return (\n    <LegacyCard\n      secondaryFooterActions={[{content: 'Dismiss'}]}\n      primaryFooterAction={{content: 'Export Report'}}\n    >\n      <LegacyCard.Header\n        actions={[\n          {\n            content: 'Total Sales',\n          },\n        ]}\n        title=\"Sales\"\n      >\n        <Popover\n          active={false}\n          activator={\n            <Button disclosure variant=\"plain\">\n              View Sales\n            </Button>\n          }\n          onClose={() => {}}\n        >\n          <ActionList\n            items={[{content: 'Gross Sales'}, {content: 'Net Sales'}]}\n          />\n        </Popover>\n      </LegacyCard.Header>\n      <LegacyCard.Section>\n        <TextContainer>\n          You can use sales reports to see information about your customers’\n          orders based on criteria such as sales over time, by channel, or by\n          staff.\n        </TextContainer>\n      </LegacyCard.Section>\n      <LegacyCard.Section title=\"Total Sales Breakdown\">\n        <ResourceList\n          resourceName={{singular: 'sale', plural: 'sales'}}\n          items={[\n            {\n              sales: 'Orders',\n              amount: 'USD$0.00',\n              url: '#',\n            },\n            {\n              sales: 'Returns',\n              amount: '-USD$250.00',\n              url: '#',\n            },\n          ]}\n          renderItem={(item) => {\n            const {sales, amount, url} = item;\n            return (\n              <ResourceList.Item\n                id={sales.toLocaleLowerCase()}\n                url={url}\n                accessibilityLabel={`View Sales for ${sales}`}\n                onClick={() => console.log('clicked item', item)}\n              >\n                <LegacyStack>\n                  <LegacyStack.Item fill>{sales}</LegacyStack.Item>\n                  <LegacyStack.Item>{amount}</LegacyStack.Item>\n                </LegacyStack>\n              </ResourceList.Item>\n            );\n          }}\n        />\n      </LegacyCard.Section>\n      <LegacyCard.Section title=\"Deactivated reports\" subdued>\n        <List>\n          <List.Item>Payouts</List.Item>\n          <List.Item>Total Sales By Channel</List.Item>\n        </List>\n      </LegacyCard.Section>\n      <LegacyCard.Section title=\"Note\">\n        <TextContainer>\n          The sales reports are available only if your store is on the Shopify\n          plan or higher.\n        </TextContainer>\n      </LegacyCard.Section>\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"legacy-card-with-flushed-sections.tsx","title":"With flushed sections","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when you need further control over the spacing of your card sections.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyCard, Image, TextContainer} from '@shopify/polaris';\nimport React from 'react';\n\nfunction LegacyCardExample() {\n  return (\n    <LegacyCard>\n      <LegacyCard.Section flush>\n        <Image\n          source=\"https://burst.shopifycdn.com/photos/black-orange-stripes_373x@2x.jpg\"\n          alt=\"a sheet with purple and orange stripes\"\n        />\n      </LegacyCard.Section>\n      <LegacyCard.Section subdued>\n        <TextContainer>\n          You can use sales reports to see information about your customers’\n          orders based on criteria such as sales over time, by channel, or by\n          staff.\n        </TextContainer>\n      </LegacyCard.Section>\n    </LegacyCard>\n  );\n}\n\n"}],"seoDescription":"This is the legacy version of the Card component which is in the process of being updated to a more flexible and composable API. Cards are used to group similar concepts and tasks together to make Shopify easier for merchants to scan, read, and get things done.","type":{},"editPageLinkPath":"polaris.shopify.com/content/components/deprecated/legacy-card.mdx"},"__N_SSG":true}