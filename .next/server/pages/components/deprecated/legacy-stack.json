{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    hr: \"hr\",\n    h3: \"h3\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\"\n  }, _provideComponents(), props.components), {Lede, StatusBanner, Examples, Props} = _components;\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  if (!StatusBanner) _missingMdxReference(\"StatusBanner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"This is the legacy version of the Stack component which is in the process of being updated to a more flexible and composable API. Use to lay out a horizontal row of components or to achieve no-fuss vertical centering. A stack is made of flexible items that wrap each of the stack’s children. Options provide control of the wrapping, spacing, and relative size of the items in the stack.\"\n      })\n    }), \"\\n\", _jsx(StatusBanner, {\n      status: frontmatter.status,\n      children: _jsxs(_components.p, {\n        children: [\"This component is no longer supported. The new \", _jsx(_components.a, {\n          href: \"/components/layout-and-structure/block-stack\",\n          children: \"BlockStack\\ncomponent\"\n        }), \" can be used in\\ncombination with the new layout primitives to achieve similar results to\\nLegacyStack. Learn more about our \", _jsx(_components.a, {\n          href: \"/getting-started/components-lifecycle\",\n          children: \"component\\nlifecycles\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Stacks should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Be used for small-scale layout tasks when you want a row of components that should wrap on small screen widths\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Be used to vertically center two elements\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Not be used for complex or unique arrangements of components\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Not be used for large-scale page layout\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"stack-item\",\n      children: \"Stack item\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The stack component will treat multiple elements wrapped in a stack item component as one item. By default, each individual element is treated as one stack item. Use the fill prop on a single stack item component to make it fill the rest of the available horizontal space. See the “Stack where a single item fills the remaining space” example.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"stack-item-properties\",\n      children: \"Stack item properties\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Prop\"\n          }), _jsx(_components.th, {\n            children: \"Type\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          }), _jsx(_components.th, {\n            children: \"Default\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"fill\"\n          }), _jsx(_components.td, {\n            children: \"boolean\"\n          }), _jsx(_components.td, {\n            children: \"Fill the available horizontal space in the stack with the item\"\n          }), _jsx(_components.td, {\n            children: \"false\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"children\"\n          }), _jsx(_components.td, {\n            children: \"any\"\n          }), _jsx(_components.td, {\n            children: \"Elements to display inside stack item\"\n          }), _jsx(_components.td, {})]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"related-components\",\n      children: \"Related components\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"To create the large-scale structure of pages, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/layout\",\n          children: \"use the layout component\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"accessibility\",\n      children: \"Accessibility\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The stack component is for alignment only and doesn’t provide any structural information for assistive technologies. To convey relationships between specific items, consider using the \", _jsx(_components.a, {\n        href: \"https://polaris.shopify.com/components/list\",\n        children: \"list component\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Legacy stack","shortDescription":"Legacy version of the Stack component. Used for layout of a horizontal row of components or vertical centering.","category":"Deprecated","keywords":["rows","vertical centering","horizontal row of components","flexible items","flexbox","row of components","stack spacing","vertical centering","fill available space","fill space","equal width","right-aligned stack","stack layout","layout","legacy stack"],"status":"Deprecated","examples":[{"fileName":"legacy-stack-default.tsx","title":"Default","description":"Use to quickly lay out a horizontal row of components and maintain their relative sizes. On small screens, children rows wrap down to additional rows as needed."},{"fileName":"legacy-stack-non-wrapping.tsx","title":"Non-wrapping","description":"Use to create a stack where the children will not wrap to new rows on small screens. As noted above, the wrap option defaults to true. This means you must explicitly set it to false to turn it off."},{"fileName":"legacy-stack-spacing.tsx","title":"Spacing","description":"Use to control spacing of items in a stack in standard increments. Use tight for less spacing, loose for more spacing, or none to remove normal spacing altogether."},{"fileName":"legacy-stack-vertical-centering.tsx","title":"Vertical centering","description":"Use to vertically center a set of items that have different heights."},{"fileName":"legacy-stack-fill-available-space-proportionally.tsx","title":"Fill available space proportionally","description":"Use to have the stack’s items fill the horizontal space in the container but maintain their relative proportions."},{"fileName":"legacy-stack-where-items-fill-space-evenly.tsx","title":"Where items fill space evenly","description":"Use to have the stack’s items fill the horizontal space in the container and be equal widths, regardless of their content."},{"fileName":"legacy-stack-where-a-single-item-fills-the-remaining-space.tsx","title":"Where a single item fills the remaining space","description":"Use for aligning buttons or secondary content to the right edge of another element, allowing it to wrap below on small screens."}],"previewImg":"/images/components/deprecated/legacy-stack.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"legacy-stack-default.tsx","title":"Default","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to quickly lay out a horizontal row of components and maintain their relative sizes. On small screens, children rows wrap down to additional rows as needed.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyStack, Badge} from '@shopify/polaris';\nimport React from 'react';\n\nfunction LegacyStackExample() {\n  return (\n    <LegacyStack>\n      <Badge>Paid</Badge>\n      <Badge>Processing</Badge>\n      <Badge>Fulfilled</Badge>\n      <Badge>Completed</Badge>\n    </LegacyStack>\n  );\n}\n\n"},{"fileName":"legacy-stack-non-wrapping.tsx","title":"Non-wrapping","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to create a stack where the children will not wrap to new rows on small screens. As noted above, the wrap option defaults to true. This means you must explicitly set it to false to turn it off.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyStack, Badge} from '@shopify/polaris';\nimport React from 'react';\n\nfunction LegacyStackExample() {\n  return (\n    <LegacyStack wrap={false}>\n      <Badge>Paid</Badge>\n      <Badge>Processing</Badge>\n      <Badge>Fulfilled</Badge>\n      <Badge>Completed</Badge>\n    </LegacyStack>\n  );\n}\n\n"},{"fileName":"legacy-stack-spacing.tsx","title":"Spacing","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to control spacing of items in a stack in standard increments. Use tight for less spacing, loose for more spacing, or none to remove normal spacing altogether.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyStack, Badge} from '@shopify/polaris';\nimport React from 'react';\n\nfunction LegacyStackExample() {\n  return (\n    <LegacyStack spacing=\"loose\">\n      <Badge>Paid</Badge>\n      <Badge>Fulfilled</Badge>\n    </LegacyStack>\n  );\n}\n\n"},{"fileName":"legacy-stack-vertical-centering.tsx","title":"Vertical centering","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to vertically center a set of items that have different heights.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyStack, Badge, Text} from '@shopify/polaris';\nimport React from 'react';\n\nfunction LegacyStackExample() {\n  return (\n    <LegacyStack alignment=\"center\">\n      <Text variant=\"headingMd\" as=\"h2\">\n        Order\n        <br />\n        #1136\n        <br />\n        was paid\n      </Text>\n      <Badge>Paid</Badge>\n      <Badge>Fulfilled</Badge>\n    </LegacyStack>\n  );\n}\n\n"},{"fileName":"legacy-stack-fill-available-space-proportionally.tsx","title":"Fill available space proportionally","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to have the stack’s items fill the horizontal space in the container but maintain their relative proportions.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyStack, Badge, Text} from '@shopify/polaris';\nimport React from 'react';\n\nfunction LegacyStackExample() {\n  return (\n    <LegacyStack distribution=\"fill\">\n      <Text variant=\"headingMd\" as=\"h2\">\n        Order #1136\n      </Text>\n      <Badge>Paid</Badge>\n      <Badge>Fulfilled</Badge>\n    </LegacyStack>\n  );\n}\n\n"},{"fileName":"legacy-stack-where-items-fill-space-evenly.tsx","title":"Where items fill space evenly","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to have the stack’s items fill the horizontal space in the container and be equal widths, regardless of their content.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyStack, Badge, Text} from '@shopify/polaris';\nimport React from 'react';\n\nfunction LegacyStackExample() {\n  return (\n    <LegacyStack distribution=\"fillEvenly\">\n      <Text variant=\"headingMd\" as=\"h2\">\n        Order #1136\n      </Text>\n      <Badge>Paid</Badge>\n      <Badge>Fulfilled</Badge>\n    </LegacyStack>\n  );\n}\n\n"},{"fileName":"legacy-stack-where-a-single-item-fills-the-remaining-space.tsx","title":"Where a single item fills the remaining space","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use for aligning buttons or secondary content to the right edge of another element, allowing it to wrap below on small screens.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyStack, Badge, Text} from '@shopify/polaris';\nimport React from 'react';\n\nfunction LegacyStackExample() {\n  return (\n    <LegacyStack>\n      <LegacyStack.Item fill>\n        <Text variant=\"headingMd\" as=\"h2\">\n          Order #1136\n        </Text>\n      </LegacyStack.Item>\n      <LegacyStack.Item>\n        <Badge>Paid</Badge>\n      </LegacyStack.Item>\n      <LegacyStack.Item>\n        <Badge>Fulfilled</Badge>\n      </LegacyStack.Item>\n    </LegacyStack>\n  );\n}\n\n"}],"seoDescription":"This is the legacy version of the Stack component which is in the process of being updated to a more flexible and composable API. Use to lay out a horizontal row of components or to achieve no-fuss vertical centering. A stack is made of flexible items that wrap each of the stack’s children. Options provide control of the wrapping, spacing, and relative size of the items in the stack.","type":{},"editPageLinkPath":"polaris.shopify.com/content/components/deprecated/legacy-stack.mdx"},"__N_SSG":true}