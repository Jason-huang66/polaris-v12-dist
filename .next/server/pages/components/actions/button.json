{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    code: \"code\",\n    hr: \"hr\",\n    a: \"a\",\n    h4: \"h4\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Lede, Examples, Props, DoDont} = _components;\n  if (!DoDont) _missingMdxReference(\"DoDont\", true);\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"Buttons are used primarily for actions, such as “Add”, “Close”, “Cancel”, or “Save”. Plain buttons, which look similar to links, are used for less important or less commonly used actions, such as “view shipping settings”.\"\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Buttons should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Be clearly and accurately labeled.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Lead with a strong, actionable verb.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Use established button colors appropriately. For example, only use a red button for an action that’s difficult or impossible to undo.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Prioritize the most important actions. Too many calls to action can cause confusion and make merchants unsure of what to do next.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Be positioned in consistent locations in the interface.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"buttons-versus-links\",\n      children: \"Buttons versus links\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Buttons are used primarily for actions, such as “Add”, “Close”, “Cancel”, or “Save”. Plain buttons, which look similar to links, are used for less important or less commonly used actions, such as “view shipping settings”.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Links are used primarily for navigation, and usually appear within or directly following a sentence.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The HTML that renders for the \", _jsx(_components.code, {\n        children: \"Button\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"Link\"\n      }), \" components carries meaning. Using these components intentionally and consistently results in:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"a more inclusive experience for assistive technology users\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"a more cohesive visual experience for sighted users\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"products that are easier to maintain at scale\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"content-guidelines\",\n      children: \"Content guidelines\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Buttons should follow the content guidelines for \", _jsx(_components.a, {\n        href: \"https://polaris.shopify.com/content/actionable-language#buttons\",\n        children: \"buttons\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"related-components\",\n      children: \"Related components\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"To combine or lay out multiple buttons, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/actions/button-group\",\n          children: \"use the button group component\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"For navigational actions that appear within or directly following a sentence, use the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/link\",\n          children: \"link component\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"accessibility\",\n      children: \"Accessibility\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Buttons can have different states that are visually and programmatically conveyed to merchants.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Use the \", _jsx(_components.code, {\n          children: \"ariaControls\"\n        }), \" prop to add an \", _jsx(_components.code, {\n          children: \"aria-controls\"\n        }), \" attribute to the button. Use the attribute to point to the unique \", _jsx(_components.code, {\n          children: \"id\"\n        }), \" of the content that the button manages.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"If a button expands or collapses adjacent content, then use the \", _jsx(_components.code, {\n          children: \"ariaExpanded\"\n        }), \" prop to add the \", _jsx(_components.code, {\n          children: \"aria-expanded\"\n        }), \" attribute to the button. Set the value to convey the current expanded (\", _jsx(_components.code, {\n          children: \"true\"\n        }), \") or collapsed (\", _jsx(_components.code, {\n          children: \"false\"\n        }), \") state of the content.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Use the \", _jsx(_components.code, {\n          children: \"disabled\"\n        }), \" prop to set the \", _jsx(_components.code, {\n          children: \"disabled\"\n        }), \" state of the button. This prevents merchants from being able to interact with the button, and conveys its inactive state to assistive technologies.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Use the \", _jsx(_components.code, {\n          children: \"pressed\"\n        }), \" prop to add an \", _jsx(_components.code, {\n          children: \"aria-pressed\"\n        }), \" attribute to the button.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"navigation\",\n      children: \"Navigation\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Merchants generally expect buttons to submit data or take action, and for links to navigate. If navigation is required for the button component, use the \", _jsx(_components.code, {\n        children: \"url\"\n      }), \" prop. The control will output an anchor styled as a button, instead of a button in HTML, to help convey this difference.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For more information on making accessible links, see the \", _jsx(_components.a, {\n        href: \"https://polaris.shopify.com/components/link\",\n        children: \"link component\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"labeling\",\n      children: \"Labeling\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"accessibilityLabel\"\n      }), \" prop adds an \", _jsx(_components.code, {\n        children: \"aria-label\"\n      }), \" attribute to the button, which can be accessed by assistive technologies like screen readers. Typically, this label text replaces the visible text on the button for merchants who use assistive technology.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use \", _jsx(_components.code, {\n        children: \"accessibilityLabel\"\n      }), \" for a button if:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"The button’s visible text doesn’t adequately convey the purpose of the button to non-visual merchants\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"The button has no text and relies on an icon alone to convey its purpose\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To help support merchants who use speech activation software as well as sighted screen reader users, make sure that the \", _jsx(_components.code, {\n        children: \"aria-label\"\n      }), \" text includes any button text that’s visible. Mismatches between visible and programmatic labeling can cause confusion, and might prevent voice recognition commands from working.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When possible, give the button visible text that clearly conveys its purpose without the use of \", _jsx(_components.code, {\n        children: \"accessibilityLabel\"\n      }), \". When no additional content is needed, duplicating the button text with \", _jsx(_components.code, {\n        children: \"accessibilityLabel\"\n      }), \" isn’t necessary.\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do\",\n        children: \"Do\"\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-jsx\",\n          children: \"<Button>Edit shipping address</Button>\\n\"\n        })\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-jsx\",\n          children: \"<Heading>Shipping address</Heading>\\n<Button accessibilityLabel=\\\"Edit shipping address\\\">Edit</Button>\\n\"\n        })\n      }), _jsx(_components.h4, {\n        id: \"dont\",\n        children: \"Don’t\"\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-jsx\",\n          children: \"<Button accessibilityLabel=\\\"Change your shipping address\\\">Edit</Button>\\n\"\n        })\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-jsx\",\n          children: \"<Button accessibilityLabel=\\\"Edit\\\">Edit</Button>\\n\"\n        })\n      })]\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"external-links\",\n      children: \"External links\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When you use the button component to create a link to an external resource:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Use the \", _jsx(_components.code, {\n          children: \"external\"\n        }), \" prop to make the link open in a new tab (or window, depending on the merchant’s browser settings)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Use the \", _jsx(_components.code, {\n          children: \"icon\"\n        }), \" prop to add the \", _jsx(_components.code, {\n          children: \"external\"\n        }), \" icon to the button\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Use the \", _jsx(_components.code, {\n          children: \"accessibilityLabel\"\n        }), \" prop to include the warning about opening a new tab in the button text for non-visual screen reader users\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For more information on making accessible links, see the \", _jsx(_components.a, {\n        href: \"https://polaris.shopify.com/components/link\",\n        children: \"link component\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-1\",\n        children: \"Do\"\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-jsx\",\n          children: \"<Button\\n  accessibilityLabel=\\\"Terms and conditions (opens a new window)\\\"\\n  icon={ExternalMinor}\\n  url=\\\"http://example.com\\\"\\n  external\\n>\\n  Terms and conditions\\n</Button>\\n\"\n        })\n      }), _jsx(_components.h4, {\n        id: \"dont-1\",\n        children: \"Don’t\"\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-jsx\",\n          children: \"<Button url=\\\"http://example.com\\\" external>Terms and conditions</Button>\\n<Button url=\\\"http://example.com\\\" external>\\n  Terms and conditions\\n</Button>\\n\"\n        })\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"keyboard-support\",\n      children: \"Keyboard support\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Buttons use browser defaults for keyboard interactions.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Give buttons keyboard focus with the \", _jsx(\"kbd\", {\n          children: \"tab\"\n        }), \" key (or \", _jsx(\"kbd\", {\n          children: \"shift\"\n        }), \" + \", _jsx(\"kbd\", {\n          children: \"tab\"\n        }), \" when tabbing backwards)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Activate buttons with the \", _jsx(\"kbd\", {\n          children: \"enter\"\n        }), \"/\", _jsx(\"kbd\", {\n          children: \"return\"\n        }), \" key or the \", _jsx(\"kbd\", {\n          children: \"space\"\n        }), \" key\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"custom-key-events\",\n      children: \"Custom key events\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"onKeyDown\"\n      }), \", \", _jsx(_components.code, {\n        children: \"onKeyPress\"\n      }), \", and \", _jsx(_components.code, {\n        children: \"onKeyUp\"\n      }), \" props to create custom events for buttons. With these props, you can use buttons to create complex, custom interactions like drag-and-drop interfaces.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Since these props introduce non-standard features to buttons, make sure to include accessible instructions so that merchants can understand how to use these features.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Button","shortDescription":"Used primarily for actions like 'Add', 'Close', 'Cancel', or 'Save'. Plain buttons are used for less important actions.","category":"Actions","keywords":["CTA","call to action","call-to-action","primary","action","basic button","outline","plain","destructive","slim","large","full-width","disabled state","disabled","button","link","click","submit"],"examples":[{"fileName":"button-default.tsx","title":"Default","description":"Used most in the interface. Only use another style if a button requires more or less visual weight."},{"fileName":"button-plain.tsx","title":"Plain","description":"Use for less important or less commonly used actions since they’re less prominent. For example, plain buttons are used as actions in cards."},{"fileName":"button-tertiary.tsx","title":"Tertiary","description":"Use for tertiary actions. Can be paired with any other button style to create visual variation."},{"fileName":"button-plain-critical.tsx","title":"Plain critical","description":"Use for actions that will delete merchant data or be otherwise difficult to recover from. Since they’re less prominent, use for less important or less commonly used critical actions. For example, plain buttons are used as actions in cards."},{"fileName":"button-primary.tsx","title":"Primary","description":"Use to highlight the most important actions in any experience. Don’t use more than one primary button in a section or screen to avoid overwhelming merchants."},{"fileName":"button-primary-critical.tsx","title":"Primary critical","description":"Use when the action will delete merchant data or be otherwise difficult to recover from. Critical buttons should trigger a confirmation dialog before the action is completed. Be thoughtful about using critical buttons because they can feel stressful for merchants."},{"fileName":"button-large.tsx","title":"Large","description":"Use for the main call to action in empty states or for calls to action shown with large illustrations."},{"fileName":"button-full-width.tsx","title":"Full-width","description":"Use for buttons placed in a narrow column (especially when stacking multiple buttons) or for creating a set of buttons of equal width. Full-width buttons should rarely exceed 320 px wide."},{"fileName":"button-text-aligned.tsx","title":"Text-aligned","description":"Use for plain or monochrome buttons that could have a long length and should be aligned when they potentially overflow onto the next line."},{"fileName":"button-pressed.tsx","title":"Pressed","description":"Buttons are sometimes used as a toggle for other parts of the user interface."},{"fileName":"button-plain-disclosure.tsx","title":"Plain disclosure","description":"Use to indicate that more content can be disclosed on click, like text in a collapsible."},{"fileName":"button-right-aligned-disclosure.tsx","title":"Right-aligned disclosure","description":"When working with `fullWidth + textAlign=\"left\"`, the `disclosure` will align itself to the far right."},{"fileName":"button-select-disclosure.tsx","title":"Select disclosure","description":"Use to indicate that multiple options are available from this control, similar to a `<select />` HTML element."},{"fileName":"button-split.tsx","title":"Split","description":"Use when there is only one primary action but other related actions can be taken."},{"fileName":"button-disabled-state.tsx","title":"Disabled state","description":"Use for actions that aren’t currently available. The surrounding interface should make it clear why the button is disabled and what needs to be done to enable it."},{"fileName":"button-loading-state.tsx","title":"Loading state","description":"Use when a button has been pressed and the associated action is in progress."}],"previewImg":"/images/components/actions/button.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"button-default.tsx","title":"Default","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Used most in the interface. Only use another style if a button requires more or less visual weight.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Button} from '@shopify/polaris';\nimport React from 'react';\n\nfunction ButtonExample() {\n  return <Button>Add product</Button>;\n}\n\n"},{"fileName":"button-plain.tsx","title":"Plain","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use for less important or less commonly used actions since they’re less prominent. For example, plain buttons are used as actions in cards.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Button} from '@shopify/polaris';\nimport React from 'react';\n\nfunction ButtonExample() {\n  return <Button variant=\"plain\">View shipping settings</Button>;\n}\n\n"},{"fileName":"button-tertiary.tsx","title":"Tertiary","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use for tertiary actions. Can be paired with any other button style to create visual variation.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Button} from '@shopify/polaris';\nimport React from 'react';\n\nfunction ButtonExample() {\n  return <Button variant=\"tertiary\">View shipping settings</Button>;\n}\n\n"},{"fileName":"button-plain-critical.tsx","title":"Plain critical","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use for actions that will delete merchant data or be otherwise difficult to recover from. Since they’re less prominent, use for less important or less commonly used critical actions. For example, plain buttons are used as actions in cards.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Button} from '@shopify/polaris';\nimport React from 'react';\n\nfunction ButtonExample() {\n  return (\n    <Button variant=\"plain\" tone=\"critical\">\n      Remove\n    </Button>\n  );\n}\n\n"},{"fileName":"button-primary.tsx","title":"Primary","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to highlight the most important actions in any experience. Don’t use more than one primary button in a section or screen to avoid overwhelming merchants.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Button} from '@shopify/polaris';\nimport React from 'react';\n\nfunction ButtonExample() {\n  return <Button variant=\"primary\">Save theme</Button>;\n}\n\n"},{"fileName":"button-primary-critical.tsx","title":"Primary critical","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when the action will delete merchant data or be otherwise difficult to recover from. Critical buttons should trigger a confirmation dialog before the action is completed. Be thoughtful about using critical buttons because they can feel stressful for merchants.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Button} from '@shopify/polaris';\nimport React from 'react';\n\nfunction ButtonExample() {\n  return (\n    <Button variant=\"primary\" tone=\"critical\">\n      View shipping settings\n    </Button>\n  );\n}\n\n"},{"fileName":"button-large.tsx","title":"Large","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use for the main call to action in empty states or for calls to action shown with large illustrations.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Button} from '@shopify/polaris';\nimport React from 'react';\n\nfunction ButtonExample() {\n  return <Button size=\"large\">Create store</Button>;\n}\n\n"},{"fileName":"button-full-width.tsx","title":"Full-width","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use for buttons placed in a narrow column (especially when stacking multiple buttons) or for creating a set of buttons of equal width. Full-width buttons should rarely exceed 320 px wide.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Button} from '@shopify/polaris';\nimport React from 'react';\n\nfunction ButtonExample() {\n  return <Button fullWidth>Add customer</Button>;\n}\n\n"},{"fileName":"button-text-aligned.tsx","title":"Text-aligned","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use for plain or monochrome buttons that could have a long length and should be aligned when they potentially overflow onto the next line.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Button} from '@shopify/polaris';\nimport React from 'react';\n\nfunction ButtonExample() {\n  return (\n    <Button variant=\"plain\" textAlign=\"left\">\n      This is a really long string of text that overflows onto the next line we\n      need to put in a lot of words now you can see the alignment. It is very\n      long but a customer could potentially name something this long.\n    </Button>\n  );\n}\n\n"},{"fileName":"button-pressed.tsx","title":"Pressed","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Buttons are sometimes used as a toggle for other parts of the user interface.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {ButtonGroup, Button} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction PressedButton() {\n  const [isFirstButtonActive, setIsFirstButtonActive] = useState(true);\n\n  const handleFirstButtonClick = useCallback(() => {\n    if (isFirstButtonActive) return;\n    setIsFirstButtonActive(true);\n  }, [isFirstButtonActive]);\n\n  const handleSecondButtonClick = useCallback(() => {\n    if (!isFirstButtonActive) return;\n    setIsFirstButtonActive(false);\n  }, [isFirstButtonActive]);\n\n  return (\n    <ButtonGroup variant=\"segmented\">\n      <Button pressed={isFirstButtonActive} onClick={handleFirstButtonClick}>\n        First button\n      </Button>\n      <Button pressed={!isFirstButtonActive} onClick={handleSecondButtonClick}>\n        Second button\n      </Button>\n    </ButtonGroup>\n  );\n}\n\n"},{"fileName":"button-plain-disclosure.tsx","title":"Plain disclosure","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to indicate that more content can be disclosed on click, like text in a collapsible.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Button} from '@shopify/polaris';\nimport {useState} from 'react';\n\nfunction DisclosureButton() {\n  const [expanded, setExpanded] = useState(false);\n\n  return (\n    <Button\n      variant=\"plain\"\n      disclosure={expanded ? 'up' : 'down'}\n      onClick={() => {\n        setExpanded(!expanded);\n      }}\n    >\n      {expanded ? 'Show less' : 'Show more'}\n    </Button>\n  );\n}\n\n"},{"fileName":"button-right-aligned-disclosure.tsx","title":"Right-aligned disclosure","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_components.p, {\n    children: [\"When working with \", _jsx(_components.code, {\n      children: \"fullWidth + textAlign=\\\"left\\\"\"\n    }), \", the \", _jsx(_components.code, {\n      children: \"disclosure\"\n    }), \" will align itself to the far right.\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Button} from '@shopify/polaris';\nimport {useState} from 'react';\n\nfunction RightAlignedDisclosureButton() {\n  const [expanded, setExpanded] = useState(false);\n\n  return (\n    <div style={{width: '200px'}}>\n      <Button\n        fullWidth\n        textAlign=\"left\"\n        disclosure={expanded ? 'up' : 'down'}\n        onClick={() => setExpanded(!expanded)}\n      >\n        {expanded ? 'Show less' : 'Show more'}\n      </Button>\n    </div>\n  );\n}\n\n"},{"fileName":"button-select-disclosure.tsx","title":"Select disclosure","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_components.p, {\n    children: [\"Use to indicate that multiple options are available from this control, similar to a \", _jsx(_components.code, {\n      children: \"<select />\"\n    }), \" HTML element.\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Button} from '@shopify/polaris';\nimport React from 'react';\n\nfunction ButtonExample() {\n  return (\n    <div style={{height: '100px'}}>\n      <Button disclosure=\"select\" onClick={() => console.log('Open Popover')}>\n        Select options\n      </Button>\n    </div>\n  );\n}\n\n"},{"fileName":"button-split.tsx","title":"Split","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when there is only one primary action but other related actions can be taken.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  ActionList,\n  InlineStack,\n  Button,\n  ButtonGroup,\n  Popover,\n} from '@shopify/polaris';\nimport React from 'react';\nimport {ChevronDownMinor} from '@shopify/polaris-icons';\n\nfunction ButtonExample() {\n  const [active, setActive] = React.useState<string | null>(null);\n\n  const toggleActive = (id: string) => () => {\n    setActive((activeId) => (activeId !== id ? id : null));\n  };\n  return (\n    <div style={{height: '100px'}}>\n      <InlineStack gap=\"500\">\n        <ButtonGroup variant=\"segmented\">\n          <Button variant=\"primary\">Save</Button>\n\n          <Popover\n            active={active === 'popover1'}\n            preferredAlignment=\"right\"\n            activator={\n              <Button\n                variant=\"primary\"\n                onClick={toggleActive('popover1')}\n                icon={ChevronDownMinor}\n                accessibilityLabel=\"Other save actions\"\n              />\n            }\n            autofocusTarget=\"first-node\"\n            onClose={toggleActive('popover1')}\n          >\n            <ActionList\n              actionRole=\"menuitem\"\n              items={[{content: 'Save as draft'}]}\n            />\n          </Popover>\n        </ButtonGroup>\n\n        <ButtonGroup variant=\"segmented\">\n          <Button>Save</Button>\n\n          <Popover\n            active={active === 'popover2'}\n            preferredAlignment=\"right\"\n            activator={\n              <Button\n                onClick={toggleActive('popover2')}\n                icon={ChevronDownMinor}\n                accessibilityLabel=\"Other save actions\"\n              />\n            }\n            autofocusTarget=\"first-node\"\n            onClose={toggleActive('popover2')}\n          >\n            <ActionList\n              actionRole=\"menuitem\"\n              items={[{content: 'Save as draft'}]}\n            />\n          </Popover>\n        </ButtonGroup>\n      </InlineStack>\n    </div>\n  );\n}\n\n"},{"fileName":"button-disabled-state.tsx","title":"Disabled state","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use for actions that aren’t currently available. The surrounding interface should make it clear why the button is disabled and what needs to be done to enable it.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {ButtonGroup, Button} from '@shopify/polaris';\nimport React from 'react';\n\nfunction ButtonExample() {\n  return (\n    <ButtonGroup>\n      <Button disabled>Buy shipping label</Button>\n      <Button variant=\"primary\" disabled>\n        Buy shipping label\n      </Button>\n      <Button tone=\"critical\" disabled>\n        Buy shipping label\n      </Button>\n      <span style={{color: '#bf0711'}}>\n        <Button variant=\"monochromePlain\" disabled>\n          Buy shipping label\n        </Button>\n      </span>\n      <Button variant=\"plain\" disabled>\n        Buy shipping label\n      </Button>\n      <Button variant=\"plain\" tone=\"critical\" disabled>\n        Buy shipping label\n      </Button>\n    </ButtonGroup>\n  );\n}\n\n"},{"fileName":"button-loading-state.tsx","title":"Loading state","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when a button has been pressed and the associated action is in progress.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Button} from '@shopify/polaris';\nimport React from 'react';\n\nfunction ButtonExample() {\n  return <Button loading>Save product</Button>;\n}\n\n"}],"seoDescription":"Buttons are used primarily for actions, such as “Add”, “Close”, “Cancel”, or “Save”. Plain buttons, which look similar to links, are used for less important or less commonly used actions, such as “view shipping settings”.","type":{"ButtonProps":{"filePath":"polaris-react/src/components/Button/Button.tsx","name":"ButtonProps","description":"","members":[{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"PropertySignature","name":"children","value":"string | string[]","description":"The content to display inside the button","isOptional":true},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"PropertySignature","name":"size","value":"\"medium\" | \"large\" | \"micro\" | \"slim\"","description":"Changes the size of the button, giving it more or less padding","isOptional":true,"defaultValue":"'medium'"},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"PropertySignature","name":"textAlign","value":"\"start\" | \"center\" | \"end\" | \"left\" | \"right\"","description":"Changes the inner text alignment of the button","isOptional":true},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"PropertySignature","name":"fullWidth","value":"boolean","description":"Allows the button to grow to the width of its container","isOptional":true},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"PropertySignature","name":"disclosure","value":"boolean | \"up\" | \"down\" | \"select\"","description":"Displays the button with a disclosure icon. Defaults to `down` when set to true","isOptional":true},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"PropertySignature","name":"removeUnderline","value":"boolean","description":"Removes underline from button text (including on interaction)","isOptional":true,"deprecationMessage":"Use a variant instead"},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"PropertySignature","name":"icon","value":"any","description":"Icon to display to the left of the button content","isOptional":true},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"PropertySignature","name":"dataPrimaryLink","value":"boolean","description":"Indicates whether or not the button is the primary navigation link when rendered inside of an `IndexTable.Row`","isOptional":true},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"PropertySignature","name":"tone","value":"\"success\" | \"critical\"","description":"Sets the color treatment of the Button.","isOptional":true},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"PropertySignature","name":"variant","value":"\"plain\" | \"primary\" | \"tertiary\" | \"monochromePlain\"","description":"Changes the visual appearance of the Button.","isOptional":true},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"PropertySignature","name":"id","value":"string","description":"A unique identifier for the button","isOptional":true},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"PropertySignature","name":"url","value":"string","description":"A destination to link to, rendered in the href attribute of a link","isOptional":true},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"PropertySignature","name":"external","value":"boolean","description":"Forces url to open in a new tab","isOptional":true},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"PropertySignature","name":"target","value":"Target","description":"Where to display the url","isOptional":true},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"PropertySignature","name":"download","value":"string | boolean","description":"Tells the browser to download the url instead of opening it. Provides a hint for the downloaded filename if it is a string value","isOptional":true},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"PropertySignature","name":"submit","value":"boolean","description":"Allows the button to submit a form","isOptional":true},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"PropertySignature","name":"disabled","value":"boolean","description":"Disables the button, disallowing merchant interaction","isOptional":true},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"PropertySignature","name":"loading","value":"boolean","description":"Replaces button text with a spinner while a background action is being performed","isOptional":true},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"PropertySignature","name":"pressed","value":"boolean","description":"Sets the button in a pressed state","isOptional":true},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"PropertySignature","name":"accessibilityLabel","value":"string","description":"Visually hidden text for screen readers","isOptional":true},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"PropertySignature","name":"role","value":"string","description":"A valid WAI-ARIA role to define the semantic value of this element","isOptional":true},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"PropertySignature","name":"ariaControls","value":"string","description":"Id of the element the button controls","isOptional":true},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"PropertySignature","name":"ariaExpanded","value":"boolean","description":"Tells screen reader the controlled element is expanded","isOptional":true},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"PropertySignature","name":"ariaDescribedBy","value":"string","description":"Indicates the ID of the element that describes the button","isOptional":true},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"PropertySignature","name":"ariaChecked","value":"\"false\" | \"true\"","description":"Indicates the current checked state of the button when acting as a toggle or switch","isOptional":true},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"MethodSignature","name":"onClick","value":"() => unknown","description":"Callback when clicked","isOptional":true},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"MethodSignature","name":"onFocus","value":"() => void","description":"Callback when button becomes focused","isOptional":true},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"MethodSignature","name":"onBlur","value":"() => void","description":"Callback when focus leaves button","isOptional":true},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"MethodSignature","name":"onKeyPress","value":"(event: React.KeyboardEvent<HTMLButtonElement>) => void","description":"Callback when a keypress event is registered on the button","isOptional":true},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"MethodSignature","name":"onKeyUp","value":"(event: React.KeyboardEvent<HTMLButtonElement>) => void","description":"Callback when a keyup event is registered on the button","isOptional":true},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"MethodSignature","name":"onKeyDown","value":"(event: React.KeyboardEvent<HTMLButtonElement>) => void","description":"Callback when a keydown event is registered on the button","isOptional":true},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"MethodSignature","name":"onMouseEnter","value":"() => void","description":"Callback when mouse enter","isOptional":true},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"MethodSignature","name":"onTouchStart","value":"() => void","description":"Callback when element is touched","isOptional":true},{"filePath":"polaris-react/src/components/Button/Button.tsx","syntaxKind":"MethodSignature","name":"onPointerDown","value":"(event: React.PointerEvent<HTMLButtonElement>) => void","description":"Callback when pointerdown event is being triggered","isOptional":true}],"value":"export interface ButtonProps extends BaseButton {\n  /** The content to display inside the button */\n  children?: string | string[];\n  /**\n   * Changes the size of the button, giving it more or less padding\n   * @default 'medium'\n   */\n  size?: 'micro' | 'slim' | 'medium' | 'large';\n  /** Changes the inner text alignment of the button */\n  textAlign?: 'left' | 'right' | 'center' | 'start' | 'end';\n  /** Allows the button to grow to the width of its container */\n  fullWidth?: boolean;\n  /** Displays the button with a disclosure icon. Defaults to `down` when set to true */\n  disclosure?: 'down' | 'up' | 'select' | boolean;\n  /** Removes underline from button text (including on interaction)\n   * @deprecated Use a variant instead\n   */\n  removeUnderline?: boolean;\n  /** Icon to display to the left of the button content */\n  icon?: React.ReactElement | IconSource;\n  /** Indicates whether or not the button is the primary navigation link when rendered inside of an `IndexTable.Row` */\n  dataPrimaryLink?: boolean;\n  /** Sets the color treatment of the Button. */\n  tone?: 'critical' | 'success';\n  /** Changes the visual appearance of the Button. */\n  variant?: 'plain' | 'primary' | 'tertiary' | 'monochromePlain';\n}"}},"editPageLinkPath":"polaris.shopify.com/content/components/actions/button.mdx"},"__N_SSG":true}