{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    a: \"a\",\n    hr: \"hr\",\n    h3: \"h3\",\n    h4: \"h4\",\n    img: \"img\"\n  }, _provideComponents(), props.components), {Lede, Examples, Props, DoDont} = _components;\n  if (!DoDont) _missingMdxReference(\"DoDont\", true);\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"Modals are overlays that require merchants to take an action before they can continue interacting with the rest of Shopify. They can be disruptive and should be used thoughtfully and sparingly.\"\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Use modals for confirmations and conditional changes. They should be thought of as temporary and not be used for information or actions that need to live on in the UI in a persistent way. Don’t use modals to display complex forms or large amounts of information.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Modals should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Require that merchants take an action.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Close when merchants press the \", _jsx(_components.code, {\n          children: \"X\"\n        }), \" button, the \", _jsx(_components.code, {\n          children: \"Cancel\"\n        }), \" button, the \", _jsx(\"kbd\", {\n          children: \"Esc\"\n        }), \" key, or when merchants click or tap the area outside the modal.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Not have more than two buttons (primary and secondary) at the bottom. This prevents unclear action hierarchy and crowding on mobile screens. Since modals are for focused tasks, they should have focused actions. In some cases however, a \", _jsx(_components.a, {\n          href: \"#tertiary-actions\",\n          children: \"tertiary action\"\n        }), \" may be appropriate.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"content-guidelines\",\n      children: \"Content guidelines\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"title\",\n      children: \"Title\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Modal titles should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Use a clear {verb}+{noun} question or statement\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Follow the content guidelines for \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/content/actionable-language#headings-and-subheadings\",\n          children: \"headings and subheadings\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Edit email address\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Delete customer?\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Discard unsaved changes?\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Edit the email address for this order\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Are you sure you want to delete customer?\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Discard?\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"body-content\",\n      children: \"Body content\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Body content should be:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Actionable: start sentences with imperative verbs when telling a merchant what actions are available to them (especially something new). Don’t use permissive language like \\\"you can\\\".\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-1\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Notification emails will be sent to this address.\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"This can’t be undone.\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont-1\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"You can edit the email address where emails will be sent.\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Are you sure you want to delete the variant Dark Blue Tee/Small/Silk? You cannot reverse this.\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Structured for merchant success: always put the most critical information first.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Clear: use the verb “need” to help merchants understand when they’re required to do something.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-2\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"To buy a shipping label, you need to enter the total weight of your shipment, including packaging.\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont-2\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"To buy a shipping label, you must enter the total weight of your shipment, including packaging.\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"primary-and-secondary-actions\",\n      children: \"Primary and secondary actions\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Actions should be:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Clear and predictable: merchants should be able to anticipate what will happen when they click a button. Never deceive a merchant by mislabeling an action.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-3\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Create order\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Buy shipping label\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont-3\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"New order\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Buy\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Action-led: actions should always lead with a strong verb that encourages action. To provide enough context to merchants use the {verb}+{noun} format on actions except in the case of common actions like Save, Close, Cancel, or OK.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-4\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Activate Apple Pay\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"View shipping settings\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont-4\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Try Apple Pay\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"View your settings\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Scannable: avoid unnecessary words and articles such as the, an, or a.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-5\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Add menu item\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont-5\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Add a menu item\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"tertiary-actions\",\n      children: \"Tertiary actions\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Tertiary actions should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Only be used when the action requires the context of the content in the modal\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Never be used to dismiss the modal\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-6\",\n        children: \"Do\"\n      }), _jsx(_components.img, {\n        src: \"/images/components/overlays/modal/do-use-plain-button-for-tertiary-action@2x.png\",\n        alt: \"Screenshot of modal with a plain button as a tertiary action\"\n      }), _jsx(_components.p, {\n        children: \"Use a plain button for a tertiary action if needed\"\n      }), _jsx(_components.h4, {\n        id: \"dont-6\",\n        children: \"Don’t\"\n      }), _jsx(_components.img, {\n        src: \"/images/components/overlays/modal/dont-use-destructive-tertiary-action@2x.png\",\n        alt: \"Screenshot of modal with a destructive button as a tertiary action\"\n      }), _jsx(_components.p, {\n        children: \"Use a tertiary action for a destructive action\"\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"footer\",\n      children: \"Footer\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Body content should be:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Actionable: start sentences with imperative verbs when telling a merchant what actions are available to them (especially something new). Don’t use permissive language like \\\"you can\\\".\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-7\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Notification emails will be sent to this address.\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont-7\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"You can edit the email address where emails will be sent.\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Structured for merchant success: always put the most critical information first.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Clear: use the verb “need” to help merchants understand when they’re required to do something.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-8\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"To buy a shipping label, you need to enter the total weight of your shipment, including packaging.\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont-8\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"To buy a shipping label, you must enter the total weight of your shipment, including packaging.\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"related-components\",\n      children: \"Related components\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"To present large amounts of additional information or actions that don’t require confirmation, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/collapsible\",\n          children: \"use the collapsible component\"\n        }), \" to expand content in place within the page\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To present a small amount of content or a menu of actions in a non-blocking overlay, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/overlays/popover\",\n          children: \"use the popover component\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To communicate a change or condition that needs the merchant’s attention within the context of a page, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/feedback-indicators/banner\",\n          children: \"use the banner component\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"accessibility\",\n      children: \"Accessibility\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Modals use ARIA \", _jsx(_components.code, {\n          children: \"role=”dialog”\"\n        }), \" to convey to screen reader users that they work like native dialog windows.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"If you set the \", _jsx(_components.code, {\n          children: \"title\"\n        }), \" prop to give the modal component a heading, then the \", _jsx(_components.code, {\n          children: \"title\"\n        }), \" is used to label the dialog element with \", _jsx(_components.code, {\n          children: \"aria-labelledby\"\n        }), \". This helps to convey the purpose of the modal to screen reader users when it displays.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"After a modal is closed, in order to return focus to the button that launched it, pass the button to the modal as an \", _jsx(_components.code, {\n          children: \"activator\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To ensure that \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/feedback-indicators/toast\",\n          children: \"Toast\"\n        }), \"s are read out by a screen reader when a Modal is open, apps should be wrapped in a \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/utilities/frame\",\n          children: \"Frame\"\n        }), \" component.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"keyboard-support\",\n      children: \"Keyboard support\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"When a modal opens, focus moves automatically to the modal container so it can be accessed by keyboard users\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"While the modal is open, keyboard focus shouldn’t leave the modal\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Merchants can dismiss the modal with the keyboard by activating the \", _jsx(_components.code, {\n          children: \"X\"\n        }), \" button, the \", _jsx(_components.code, {\n          children: \"Cancel\"\n        }), \" button if one is provided, or by pressing the \", _jsx(\"kbd\", {\n          children: \"Esc\"\n        }), \" key\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"After a modal is closed, focus returns to the button that launched it\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Modal","shortDescription":"Used to interrupt merchants with urgent information, details, or actions.","category":"Overlays","keywords":["modal","src","open","title","width","height","primary action","secondary action","tertiary action","destructive action","footer","instant","sectioned","large","small","limit height","loading","outer wrapper","iframe","overlay","dialog","alert"],"examples":[{"fileName":"modal-default.tsx","title":"Default","description":"Use as the default option for a modal."},{"fileName":"modal-with-primary-action.tsx","title":"With primary action","description":"Use to let merchants take a key action."},{"fileName":"modal-with-destructive-primary-action.tsx","title":"With destructive primary action","description":"Use to let merchants take a key action that cannot be undone."},{"fileName":"modal-with-primary-and-secondary-actions.tsx","title":"With primary and secondary actions","description":"Use to let merchants take key actions at the bottom of the modal."},{"fileName":"modal-large.tsx","title":"Large","description":"Use when you need to increase the width of your modal."},{"fileName":"modal-small.tsx","title":"Small","description":"Use when you need to decrease the width of your modal."},{"fileName":"modal-without-a-title.tsx","title":"Without a title","description":"A title is required for accessibility, but you may hide it."},{"fileName":"modal-with-scroll-listener.tsx","title":"With scroll listener","description":"Use to implement infinite scroll of modal content."},{"fileName":"modal-with-activator-ref.tsx","title":"With activator ref","description":"Provide an activator ref when it’s more convenient than providing an element. This ensures proper focus management when closing the modal. See the [accessibility features of a modal](https://www.w3.org/TR/wai-aria-practices/examples/dialog-modal/dialog.html) for more information regarding focus."},{"fileName":"modal-without-an-activator-prop.tsx","title":"Without an activator prop","description":"Use an external activator when technical limitations prevent you from passing the activator as an element or a ref. Make sure to focus the activator on close when choosing this approach. See the [accessibility features of a modal](https://www.w3.org/TR/wai-aria-practices/examples/dialog-modal/dialog.html) for more information regarding focus."}],"previewImg":"/images/components/overlays/modal.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"modal-default.tsx","title":"Default","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use as the default option for a modal.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Button, Frame, Modal, TextContainer} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction ModalExample() {\n  const [active, setActive] = useState(true);\n\n  const handleChange = useCallback(() => setActive(!active), [active]);\n\n  const activator = <Button onClick={handleChange}>Open</Button>;\n\n  return (\n    <div style={{height: '500px'}}>\n      <Frame>\n        <Modal\n          activator={activator}\n          open={active}\n          onClose={handleChange}\n          title=\"Reach more shoppers with Instagram product tags\"\n          primaryAction={{\n            content: 'Add Instagram',\n            onAction: handleChange,\n          }}\n          secondaryActions={[\n            {\n              content: 'Learn more',\n              onAction: handleChange,\n            },\n          ]}\n        >\n          <Modal.Section>\n            <TextContainer>\n              <p>\n                Use Instagram posts to share your products with millions of\n                people. Let shoppers buy from your store without leaving\n                Instagram.\n              </p>\n            </TextContainer>\n          </Modal.Section>\n        </Modal>\n      </Frame>\n    </div>\n  );\n}\n\n"},{"fileName":"modal-with-primary-action.tsx","title":"With primary action","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to let merchants take a key action.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  Button,\n  Modal,\n  LegacyStack,\n  TextContainer,\n  Frame,\n} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction ModalWithPrimaryActionExample() {\n  const [active, setActive] = useState(true);\n\n  const toggleModal = useCallback(() => setActive((active) => !active), []);\n\n  const activator = <Button onClick={toggleModal}>Open</Button>;\n\n  return (\n    <div style={{height: '500px'}}>\n      <Frame>\n        <Modal\n          activator={activator}\n          open={active}\n          onClose={toggleModal}\n          title=\"Get a shareable link\"\n          primaryAction={{\n            content: 'Close',\n            onAction: toggleModal,\n          }}\n        >\n          <Modal.Section>\n            <LegacyStack vertical>\n              <LegacyStack.Item>\n                <TextContainer>\n                  <p>\n                    You can share this discount link with your customers via\n                    email or social media. Your discount will be automatically\n                    applied at checkout.\n                  </p>\n                </TextContainer>\n              </LegacyStack.Item>\n            </LegacyStack>\n          </Modal.Section>\n        </Modal>\n      </Frame>\n    </div>\n  );\n}\n\n"},{"fileName":"modal-with-destructive-primary-action.tsx","title":"With destructive primary action","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to let merchants take a key action that cannot be undone.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Button, Modal, Frame} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction ModalWithDestructivePrimaryActionExample() {\n  const [active, setActive] = useState(true);\n\n  const toggleModal = useCallback(() => setActive((active) => !active), []);\n\n  const activator = <Button onClick={toggleModal}>Open</Button>;\n\n  return (\n    <Frame>\n      <div style={{height: '500px'}}>\n        <Modal\n          activator={activator}\n          open={active}\n          onClose={toggleModal}\n          title=\"Discard all unsaved changes\"\n          primaryAction={{\n            destructive: true,\n            content: 'Discard changes',\n            onAction: toggleModal,\n          }}\n          secondaryActions={[\n            {\n              content: 'Continue editing',\n              onAction: toggleModal,\n            },\n          ]}\n        >\n          <Modal.Section>\n            If you discard changes, you’ll delete any edits you made since you\n            last saved.\n          </Modal.Section>\n        </Modal>\n      </div>\n    </Frame>\n  );\n}\n\n"},{"fileName":"modal-with-primary-and-secondary-actions.tsx","title":"With primary and secondary actions","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to let merchants take key actions at the bottom of the modal.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Button, Modal, LegacyStack, ChoiceList, Frame} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction ModalWithPrimaryAndSecondaryActionsExample() {\n  const CURRENT_PAGE = 'current_page';\n  const ALL_CUSTOMERS = 'all_customers';\n  const SELECTED_CUSTOMERS = 'selected_customers';\n  const CSV_EXCEL = 'csv_excel';\n  const CSV_PLAIN = 'csv_plain';\n\n  const [active, setActive] = useState(true);\n  const [selectedExport, setSelectedExport] = useState<string[]>([]);\n  const [selectedExportAs, setSelectedExportAs] = useState<string[]>([]);\n\n  const handleModalChange = useCallback(() => setActive(!active), [active]);\n\n  const handleClose = () => {\n    handleModalChange();\n    handleSelectedExport([]);\n    handleSelectedExportAs([]);\n  };\n\n  const handleSelectedExport = useCallback(\n    (value: string[]) => setSelectedExport(value),\n    [],\n  );\n\n  const handleSelectedExportAs = useCallback(\n    (value: string[]) => setSelectedExportAs(value),\n    [],\n  );\n\n  const activator = <Button onClick={handleModalChange}>Open</Button>;\n\n  return (\n    <div style={{height: '500px'}}>\n      <Frame>\n        <Modal\n          activator={activator}\n          open={active}\n          onClose={handleClose}\n          title=\"Export customers\"\n          primaryAction={{\n            content: 'Export customers',\n            onAction: handleClose,\n          }}\n          secondaryActions={[\n            {\n              content: 'Cancel',\n              onAction: handleClose,\n            },\n          ]}\n        >\n          <Modal.Section>\n            <LegacyStack vertical>\n              <LegacyStack.Item>\n                <ChoiceList\n                  title=\"Export\"\n                  choices={[\n                    {label: 'Current page', value: CURRENT_PAGE},\n                    {label: 'All customers', value: ALL_CUSTOMERS},\n                    {label: 'Selected customers', value: SELECTED_CUSTOMERS},\n                  ]}\n                  selected={selectedExport}\n                  onChange={handleSelectedExport}\n                />\n              </LegacyStack.Item>\n              <LegacyStack.Item>\n                <ChoiceList\n                  title=\"Export as\"\n                  choices={[\n                    {\n                      label:\n                        'CSV for Excel, Numbers, or other spreadsheet programs',\n                      value: CSV_EXCEL,\n                    },\n                    {label: 'Plain CSV file', value: CSV_PLAIN},\n                  ]}\n                  selected={selectedExportAs}\n                  onChange={handleSelectedExportAs}\n                />\n              </LegacyStack.Item>\n            </LegacyStack>\n          </Modal.Section>\n        </Modal>\n      </Frame>\n    </div>\n  );\n}\n\n"},{"fileName":"modal-large.tsx","title":"Large","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when you need to increase the width of your modal.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  Button,\n  Modal,\n  LegacyStack,\n  DropZone,\n  Checkbox,\n  Frame,\n} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction LargeModalExample() {\n  const [active, setActive] = useState(true);\n  const [checked, setChecked] = useState(false);\n\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n\n  const handleCheckbox = useCallback((value: boolean) => setChecked(value), []);\n\n  const activator = <Button onClick={toggleActive}>Open</Button>;\n\n  return (\n    <div style={{height: '500px'}}>\n      <Frame>\n        <Modal\n          size=\"large\"\n          activator={activator}\n          open={active}\n          onClose={toggleActive}\n          title=\"Import customers by CSV\"\n          primaryAction={{\n            content: 'Import customers',\n            onAction: toggleActive,\n          }}\n          secondaryActions={[\n            {\n              content: 'Cancel',\n              onAction: toggleActive,\n            },\n          ]}\n        >\n          <Modal.Section>\n            <LegacyStack vertical>\n              <DropZone\n                accept=\".csv\"\n                errorOverlayText=\"File type must be .csv\"\n                type=\"file\"\n                onDrop={() => {}}\n              >\n                <DropZone.FileUpload />\n              </DropZone>\n              <Checkbox\n                checked={checked}\n                label=\"Overwrite existing customers that have the same email or phone\"\n                onChange={handleCheckbox}\n              />\n            </LegacyStack>\n          </Modal.Section>\n        </Modal>\n      </Frame>\n    </div>\n  );\n}\n\n"},{"fileName":"modal-small.tsx","title":"Small","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when you need to decrease the width of your modal.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  Button,\n  Modal,\n  LegacyStack,\n  DropZone,\n  Checkbox,\n  Frame,\n} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction SmallModalExample() {\n  const [active, setActive] = useState(true);\n  const [checked, setChecked] = useState(false);\n\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n\n  const handleCheckbox = useCallback((value: boolean) => setChecked(value), []);\n\n  const activator = <Button onClick={toggleActive}>Open</Button>;\n\n  return (\n    <div style={{height: '500px'}}>\n      <Frame>\n        <Modal\n          size=\"small\"\n          activator={activator}\n          open={active}\n          onClose={toggleActive}\n          title=\"Import customers by CSV\"\n          primaryAction={{\n            content: 'Import customers',\n            onAction: toggleActive,\n          }}\n          secondaryActions={[\n            {\n              content: 'Cancel',\n              onAction: toggleActive,\n            },\n          ]}\n        >\n          <Modal.Section>\n            <LegacyStack vertical>\n              <DropZone\n                accept=\".csv\"\n                errorOverlayText=\"File type must be .csv\"\n                type=\"file\"\n                onDrop={() => {}}\n              >\n                <DropZone.FileUpload />\n              </DropZone>\n              <Checkbox\n                checked={checked}\n                label=\"Overwrite existing customers that have the same email or phone\"\n                onChange={handleCheckbox}\n              />\n            </LegacyStack>\n          </Modal.Section>\n        </Modal>\n      </Frame>\n    </div>\n  );\n}\n\n"},{"fileName":"modal-without-a-title.tsx","title":"Without a title","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"A title is required for accessibility, but you may hide it.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Button, Frame, Modal, TextContainer} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction ModalWithoutTitleExample() {\n  const [active, setActive] = useState(true);\n\n  const handleChange = useCallback(() => setActive(!active), [active]);\n\n  const activator = <Button onClick={handleChange}>Open</Button>;\n\n  return (\n    <div style={{height: '500px'}}>\n      <Frame>\n        <Modal\n          title=\"Reach more shoppers with Instagram product tags\"\n          titleHidden\n          activator={activator}\n          open={active}\n          onClose={handleChange}\n          primaryAction={{\n            content: 'Add Instagram',\n            onAction: handleChange,\n          }}\n          secondaryActions={[\n            {\n              content: 'Learn more',\n              onAction: handleChange,\n            },\n          ]}\n        >\n          <Modal.Section>\n            <TextContainer>\n              <p>\n                Use Instagram posts to share your products with millions of\n                people. Let shoppers buy from your store without leaving\n                Instagram.\n              </p>\n            </TextContainer>\n          </Modal.Section>\n        </Modal>\n      </Frame>\n    </div>\n  );\n}\n\n"},{"fileName":"modal-with-scroll-listener.tsx","title":"With scroll listener","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to implement infinite scroll of modal content.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Button, Frame, Modal, TextContainer} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction ModalWithScrollListenerExample() {\n  const [active, setActive] = useState(true);\n\n  const handleChange = useCallback(() => setActive(!active), [active]);\n\n  const handleScrollBottom = useCallback(() => alert('Scrolled to bottom'), []);\n\n  const activator = <Button onClick={handleChange}>Open</Button>;\n\n  return (\n    <div style={{height: '500px'}}>\n      <Frame>\n        <Modal\n          activator={activator}\n          open={active}\n          title=\"Scrollable content\"\n          onClose={handleChange}\n          onScrolledToBottom={handleScrollBottom}\n        >\n          {Array.from({length: 50}, (_, index) => (\n            <Modal.Section key={index}>\n              <TextContainer>\n                <p>\n                  Item <a href=\"#\">#{index}</a>\n                </p>\n              </TextContainer>\n            </Modal.Section>\n          ))}\n        </Modal>\n      </Frame>\n    </div>\n  );\n}\n\n"},{"fileName":"modal-with-activator-ref.tsx","title":"With activator ref","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_components.p, {\n    children: [\"Provide an activator ref when it’s more convenient than providing an element. This ensures proper focus management when closing the modal. See the \", _jsx(_components.a, {\n      href: \"https://www.w3.org/TR/wai-aria-practices/examples/dialog-modal/dialog.html\",\n      children: \"accessibility features of a modal\"\n    }), \" for more information regarding focus.\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Button, Frame, Modal, TextContainer} from '@shopify/polaris';\nimport {useState, useCallback, useRef} from 'react';\n\nfunction ModalExample() {\n  const [active, setActive] = useState(true);\n\n  const buttonRef = useRef(null);\n\n  const handleOpen = useCallback(() => setActive(true), []);\n\n  const handleClose = useCallback(() => {\n    setActive(false);\n  }, []);\n\n  const activator = (\n    <div ref={buttonRef}>\n      <Button onClick={handleOpen}>Open</Button>\n    </div>\n  );\n\n  return (\n    <div style={{height: '500px'}}>\n      <Frame>\n        {activator}\n        <Modal\n          activator={buttonRef}\n          open={active}\n          onClose={handleClose}\n          title=\"Reach more shoppers with Instagram product tags\"\n          primaryAction={{\n            content: 'Add Instagram',\n            onAction: handleClose,\n          }}\n          secondaryActions={[\n            {\n              content: 'Learn more',\n              onAction: handleClose,\n            },\n          ]}\n        >\n          <Modal.Section>\n            <TextContainer>\n              <p>\n                Use Instagram posts to share your products with millions of\n                people. Let shoppers buy from your store without leaving\n                Instagram.\n              </p>\n            </TextContainer>\n          </Modal.Section>\n        </Modal>\n      </Frame>\n    </div>\n  );\n}\n\n"},{"fileName":"modal-without-an-activator-prop.tsx","title":"Without an activator prop","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_components.p, {\n    children: [\"Use an external activator when technical limitations prevent you from passing the activator as an element or a ref. Make sure to focus the activator on close when choosing this approach. See the \", _jsx(_components.a, {\n      href: \"https://www.w3.org/TR/wai-aria-practices/examples/dialog-modal/dialog.html\",\n      children: \"accessibility features of a modal\"\n    }), \" for more information regarding focus.\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Button, Frame, Modal, TextContainer} from '@shopify/polaris';\nimport {useState, useCallback, useRef} from 'react';\n\nfunction ModalExample() {\n  const [active, setActive] = useState(true);\n\n  const button = useRef<HTMLDivElement>(null);\n\n  const handleOpen = useCallback(() => setActive(true), []);\n\n  const handleClose = useCallback(() => {\n    setActive(false);\n    requestAnimationFrame(() =>\n      button.current?.querySelector('button')?.focus(),\n    );\n  }, []);\n\n  return (\n    <div style={{height: '500px'}}>\n      <Frame>\n        <div ref={button}>\n          <Button onClick={handleOpen}>Open</Button>\n        </div>\n        <Modal\n          instant\n          open={active}\n          onClose={handleClose}\n          title=\"Reach more shoppers with Instagram product tags\"\n          primaryAction={{\n            content: 'Add Instagram',\n            onAction: handleClose,\n          }}\n          secondaryActions={[\n            {\n              content: 'Learn more',\n              onAction: handleClose,\n            },\n          ]}\n        >\n          <Modal.Section>\n            <TextContainer>\n              <p>\n                Use Instagram posts to share your products with millions of\n                people. Let shoppers buy from your store without leaving\n                Instagram.\n              </p>\n            </TextContainer>\n          </Modal.Section>\n        </Modal>\n      </Frame>\n    </div>\n  );\n}\n\n"}],"seoDescription":"Modals are overlays that require merchants to take an action before they can continue interacting with the rest of Shopify. They can be disruptive and should be used thoughtfully and sparingly.","type":{"ModalProps":{"filePath":"polaris-react/src/components/Modal/Modal.tsx","name":"ModalProps","description":"","members":[{"filePath":"polaris-react/src/components/Modal/Modal.tsx","syntaxKind":"PropertySignature","name":"open","value":"boolean","description":"Whether the modal is open or not"},{"filePath":"polaris-react/src/components/Modal/Modal.tsx","syntaxKind":"PropertySignature","name":"src","value":"string","description":"The url that will be loaded as the content of the modal","isOptional":true},{"filePath":"polaris-react/src/components/Modal/Modal.tsx","syntaxKind":"PropertySignature","name":"iFrameName","value":"string","description":"The name of the modal content iframe","isOptional":true},{"filePath":"polaris-react/src/components/Modal/Modal.tsx","syntaxKind":"PropertySignature","name":"title","value":"any","description":"The content for the title of the modal"},{"filePath":"polaris-react/src/components/Modal/Modal.tsx","syntaxKind":"PropertySignature","name":"titleHidden","value":"boolean","description":"Hide the title in the modal","isOptional":true,"defaultValue":"false"},{"filePath":"polaris-react/src/components/Modal/Modal.tsx","syntaxKind":"PropertySignature","name":"children","value":"React.ReactNode","description":"The content to display inside modal","isOptional":true},{"filePath":"polaris-react/src/components/Modal/Modal.tsx","syntaxKind":"PropertySignature","name":"footer","value":"React.ReactNode","description":"Inner content of the footer","isOptional":true},{"filePath":"polaris-react/src/components/Modal/Modal.tsx","syntaxKind":"PropertySignature","name":"instant","value":"boolean","description":"Disable animations and open modal instantly","isOptional":true},{"filePath":"polaris-react/src/components/Modal/Modal.tsx","syntaxKind":"PropertySignature","name":"sectioned","value":"boolean","description":"Automatically adds sections to modal","isOptional":true},{"filePath":"polaris-react/src/components/Modal/Modal.tsx","syntaxKind":"PropertySignature","name":"size","value":"ModalSize","description":"The size of the modal","isOptional":true},{"filePath":"polaris-react/src/components/Modal/Modal.tsx","syntaxKind":"PropertySignature","name":"limitHeight","value":"boolean","description":"Limits modal height on large sceens with scrolling","isOptional":true},{"filePath":"polaris-react/src/components/Modal/Modal.tsx","syntaxKind":"PropertySignature","name":"loading","value":"boolean","description":"Replaces modal content with a spinner while a background action is being performed","isOptional":true},{"filePath":"polaris-react/src/components/Modal/Modal.tsx","syntaxKind":"MethodSignature","name":"onClose","value":"() => void","description":"Callback when the modal is closed"},{"filePath":"polaris-react/src/components/Modal/Modal.tsx","syntaxKind":"MethodSignature","name":"onIFrameLoad","value":"(evt: React.SyntheticEvent<HTMLIFrameElement>) => void","description":"Callback when iframe has loaded","isOptional":true},{"filePath":"polaris-react/src/components/Modal/Modal.tsx","syntaxKind":"MethodSignature","name":"onTransitionEnd","value":"() => void","description":"Callback when modal transition animation has ended","isOptional":true},{"filePath":"polaris-react/src/components/Modal/Modal.tsx","syntaxKind":"MethodSignature","name":"onScrolledToBottom","value":"() => void","description":"Callback when the bottom of the modal content is reached","isOptional":true},{"filePath":"polaris-react/src/components/Modal/Modal.tsx","syntaxKind":"PropertySignature","name":"activator","value":"any","description":"The element or the RefObject that activates the Modal","isOptional":true},{"filePath":"polaris-react/src/components/Modal/Modal.tsx","syntaxKind":"PropertySignature","name":"noScroll","value":"boolean","description":"Removes Scrollable container from the modal content","isOptional":true},{"filePath":"polaris-react/src/components/Modal/Modal.tsx","syntaxKind":"PropertySignature","name":"primaryAction","value":"ComplexAction","description":"Primary action","isOptional":true},{"filePath":"polaris-react/src/components/Modal/Modal.tsx","syntaxKind":"PropertySignature","name":"secondaryActions","value":"ComplexAction[]","description":"Collection of secondary actions","isOptional":true}],"value":"export interface ModalProps extends FooterProps {\n  /** Whether the modal is open or not */\n  open: boolean;\n  /** The url that will be loaded as the content of the modal */\n  src?: string;\n  /** The name of the modal content iframe */\n  iFrameName?: string;\n  /** The content for the title of the modal */\n  title: string | React.ReactNode;\n  /**\n   * Hide the title in the modal\n   * @default false\n   */\n  titleHidden?: boolean;\n  /** The content to display inside modal */\n  children?: React.ReactNode;\n  /** Inner content of the footer */\n  footer?: React.ReactNode;\n  /** Disable animations and open modal instantly */\n  instant?: boolean;\n  /** Automatically adds sections to modal */\n  sectioned?: boolean;\n  /** The size of the modal */\n  size?: ModalSize;\n  /** Limits modal height on large sceens with scrolling */\n  limitHeight?: boolean;\n  /** Replaces modal content with a spinner while a background action is being performed */\n  loading?: boolean;\n  /** Callback when the modal is closed */\n  onClose(): void;\n  /** Callback when iframe has loaded */\n  onIFrameLoad?(evt: React.SyntheticEvent<HTMLIFrameElement>): void;\n  /** Callback when modal transition animation has ended */\n  onTransitionEnd?(): void;\n  /** Callback when the bottom of the modal content is reached */\n  onScrolledToBottom?(): void;\n  /** The element or the RefObject that activates the Modal */\n  activator?: React.RefObject<HTMLElement> | React.ReactElement;\n  /** Removes Scrollable container from the modal content */\n  noScroll?: boolean;\n}"},"ModalSize":{"filePath":"polaris-react/src/components/Modal/Modal.tsx","syntaxKind":"TypeAliasDeclaration","name":"ModalSize","value":"'small' | 'large' | 'fullScreen'","description":""},"ComplexAction":{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","name":"ComplexAction","description":"","members":[{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"id","value":"string","description":"A unique identifier for the action","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"content","value":"string","description":"Content the action displays","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"accessibilityLabel","value":"string","description":"Visually hidden text for screen readers","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"url","value":"string","description":"A destination to link to, rendered in the action","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"external","value":"boolean","description":"Forces url to open in a new tab","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"target","value":"Target","description":"Where to display the url","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"MethodSignature","name":"onAction","value":"() => void","description":"Callback when an action takes place","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"MethodSignature","name":"onMouseEnter","value":"() => void","description":"Callback when mouse enter","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"MethodSignature","name":"onTouchStart","value":"() => void","description":"Callback when element is touched","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"disabled","value":"boolean","description":"Whether or not the action is disabled","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"destructive","value":"boolean","description":"Destructive action","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"icon","value":"any","description":"Source of the icon","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"outline","value":"boolean","description":"Should action be displayed as an outlined button","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"loading","value":"boolean","description":"Should a spinner be displayed","isOptional":true},{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"PropertySignature","name":"plain","value":"boolean","description":"Should action be displayed as a plain link","isOptional":true}],"value":"export interface ComplexAction\n  extends Action,\n    DisableableAction,\n    DestructableAction,\n    IconableAction,\n    OutlineableAction,\n    LoadableAction,\n    PlainAction {}"},"Target":{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"TypeAliasDeclaration","name":"Target","value":"'_blank' | '_self' | '_parent' | '_top'","description":""}},"editPageLinkPath":"polaris.shopify.com/content/components/overlays/modal.mdx"},"__N_SSG":true}