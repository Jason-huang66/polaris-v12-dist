{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\"\n  }, _provideComponents(), props.components), {Lede, RichCardGrid} = _components;\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!RichCardGrid) _missingMdxReference(\"RichCardGrid\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"Display contextual elements on top of the main admin interface that provide additional information or functionality.\"\n      })\n    }), \"\\n\", _jsx(RichCardGrid, {\n      cards: posts\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Overlays","expanded":true,"order":10,"previewImg":"/images/components/overlays.png"},"scope":{"posts":[{"url":"/components/overlays/modal","description":"Modals are overlays that require merchants to take an action before they can continue interacting with the rest of Shopify. They can be disruptive and should be used thoughtfully and sparingly.","title":"Modal","shortDescription":"Used to interrupt merchants with urgent information, details, or actions.","category":"Overlays","keywords":["modal","src","open","title","width","height","primary action","secondary action","tertiary action","destructive action","footer","instant","sectioned","large","small","limit height","loading","outer wrapper","iframe","overlay","dialog","alert"],"examples":[{"fileName":"modal-default.tsx","title":"Default","description":"Use as the default option for a modal."},{"fileName":"modal-with-primary-action.tsx","title":"With primary action","description":"Use to let merchants take a key action."},{"fileName":"modal-with-destructive-primary-action.tsx","title":"With destructive primary action","description":"Use to let merchants take a key action that cannot be undone."},{"fileName":"modal-with-primary-and-secondary-actions.tsx","title":"With primary and secondary actions","description":"Use to let merchants take key actions at the bottom of the modal."},{"fileName":"modal-large.tsx","title":"Large","description":"Use when you need to increase the width of your modal."},{"fileName":"modal-small.tsx","title":"Small","description":"Use when you need to decrease the width of your modal."},{"fileName":"modal-without-a-title.tsx","title":"Without a title","description":"A title is required for accessibility, but you may hide it."},{"fileName":"modal-with-scroll-listener.tsx","title":"With scroll listener","description":"Use to implement infinite scroll of modal content."},{"fileName":"modal-with-activator-ref.tsx","title":"With activator ref","description":"Provide an activator ref when itâ€™s more convenient than providing an element. This ensures proper focus management when closing the modal. See the [accessibility features of a modal](https://www.w3.org/TR/wai-aria-practices/examples/dialog-modal/dialog.html) for more information regarding focus."},{"fileName":"modal-without-an-activator-prop.tsx","title":"Without an activator prop","description":"Use an external activator when technical limitations prevent you from passing the activator as an element or a ref. Make sure to focus the activator on close when choosing this approach. See the [accessibility features of a modal](https://www.w3.org/TR/wai-aria-practices/examples/dialog-modal/dialog.html) for more information regarding focus."}],"previewImg":"/images/components/overlays/modal.png","order":1000},{"url":"/components/overlays/popover","description":"Popovers are small overlays that open on demand. They let merchants access additional content and actions without cluttering the page.","title":"Popover","shortDescription":"Small overlays that open on demand and close when the merchant interacts with any other part of Shopify. Used to surface secondary information or actions.","category":"Overlays","keywords":["interactive","container","dropdown","drop down","drop-down","popover","pop over","menu","fly out","select","action list","menu","context menu","popover with form components","popover with action list","popover with content and actions","action sheet"],"examples":[{"fileName":"popover-with-action-list.tsx","title":"With action list","description":"Use when presenting a set of actions in a disclosable menu."},{"fileName":"popover-with-content-and-actions.tsx","title":"With content and actions","description":"Use to present a combination of content, instructions, and actions in a panel for tasks that are of low or secondary importance to the current page. When used this way, popovers provide useful entry points to related features without overwhelming merchants."},{"fileName":"popover-with-form-components.tsx","title":"With form components","description":"Use to present secondary input tasks on demand."},{"fileName":"popover-with-lazy-loaded-list.tsx","title":"With lazy loaded list","description":"Use to present merchants with a list that dynamically loads more items on scroll or arrow down."},{"fileName":"popover-with-searchable-listbox.tsx","title":"With searchable listbox","description":"Use to help merchants browse, filter, and choose from a list of options."}],"previewImg":"/images/components/overlays/popover.png","order":1000},{"url":"/components/overlays/tooltip","description":"Tooltips are floating labels that briefly explain the function of a user interface element. They can be triggered when merchants hover, focus, tap, or click.","title":"Tooltip","category":"Overlays","keywords":["info","help","popover","infotip","hint","small popover","hover","tap"],"examples":[{"fileName":"tooltip-default.tsx","title":"Default","description":"Use only when necessary to provide an explanation for an interface element."},{"fileName":"tooltip-visible-only-with-child-interaction.tsx","title":"Visible only with child interaction","description":"Use when the tooltip overlays interactive elements when active, for example a form input. The `dismissOnMouseOut` prop prevents the tooltip from remaining active when mouse hover or focus leaves its `children` and enters the tooltip's content."},{"fileName":"tooltip-with-persistence-on-click.tsx","title":"With persistence on click","description":"Use to present a tooltip that remains open if activated by click or keypress."},{"fileName":"tooltip-with-suffix.tsx","title":"With suffix","description":"Use when merchants benefit from information supplemental to the tooltip content. For example, to present a keyboard shortcut beside the content of a tooltip that describes an icon button."}],"previewImg":"/images/components/overlays/tooltip.png","order":1000}],"__remarkNextMdxImporter":{}}},"seoDescription":"Display contextual elements on top of the main admin interface that provide additional information or functionality.","editPageLinkPath":"/polaris.shopify.com/content/components/overlays/index.mdx","isContentPage":false,"showTOC":false,"collapsibleTOC":false},"__N_SSG":true}