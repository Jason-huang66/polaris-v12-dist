{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    img: \"img\",\n    ol: \"ol\",\n    li: \"li\",\n    strong: \"strong\",\n    hr: \"hr\",\n    ul: \"ul\",\n    h3: \"h3\",\n    code: \"code\",\n    h4: \"h4\",\n    a: \"a\"\n  }, _provideComponents(), props.components), {Lede, Examples, Props, DoDont} = _components;\n  if (!DoDont) _missingMdxReference(\"DoDont\", true);\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"A Listbox is a vertical list of interactive options, with room for icons, descriptions, and other elements.\"\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"anatomy\",\n      children: \"Anatomy\"\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/images/components/lists/listbox/listbox-anatomy@2x.png\",\n      alt: \"A diagram of the Listbox component showing the smaller primitive components it can be composed of.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A listbox can be composed of:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Options:\"\n        }), \" The individual options inside the Listbox that merchants can select or deselect.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Dividers:\"\n        }), \" Placed between items and are useful in complex lists when there’s a lot of information for the merchant to parse.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Section headers:\"\n        }), \" Used at the begining of a section when it’s necessary to call out the content being displayed. In most cases, the surrounding context should be enough for the merchant to understand the information in the list.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Listboxes should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Be clearly labeled so it’s noticeable to the merchant what type of options will be available\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Limit the number of options displayed at once\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Indicate a loading state to the merchant while option data is being populated\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"content-guidelines\",\n      children: \"Content guidelines\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"option-lists\",\n      children: \"Option lists\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Each item in a \", _jsx(_components.code, {\n        children: \"Listbox\"\n      }), \" should be clear and descriptive.\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Traffic referrer source\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Source\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"patterns-that-use-listbox\",\n      children: [\"Patterns that use \", _jsx(_components.code, {\n        children: \"Listbox\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Location picker\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"related-components\",\n      children: \"Related components\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"For a text field and popover container, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/combobox\",\n          children: \"use the combobox component\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/autocomplete\",\n          children: \"Autocomplete\"\n        }), \" can be used as a convenience wrapper in lieu of Combobox and Listbox.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"accessibility\",\n      children: \"Accessibility\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"structure\",\n      children: \"Structure\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"Listbox\"\n      }), \" component is based on the \", _jsx(_components.a, {\n        href: \"https://www.w3.org/TR/wai-aria-practices-1.2/#Listbox\",\n        children: \"Aria 1.2 Listbox pattern\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"It is important to not present interactive elements inside of list box options as they can interfere with navigation for assistive technology users.\"\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do-1\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Use labels\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont-1\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Use interactive elements inside the list\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"keyboard-support\",\n      children: \"Keyboard support\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Access the list of options with the up and down arrow keys\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Select an option that has focus with the \", _jsx(\"kbd\", {\n          children: \"enter\"\n        }), \"/\", _jsx(\"kbd\", {\n          children: \"return\"\n        }), \" key\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Listbox","category":"Lists","keywords":["list","listbox","list box","interactive list"],"examples":[{"fileName":"listbox-default.tsx","title":"Default","description":"Basic implementation of a control element used to let merchants select options"},{"fileName":"listbox-with-loading.tsx","title":"With Loading","description":"Implementation of a control element showing a loading indicator to let merchants know more options are being loaded"},{"fileName":"listbox-with-action.tsx","title":"With Action","description":"Implementation of a control element used to let merchants take an action"},{"fileName":"listbox-with-custom-element.tsx","title":"With custom element","description":"Implementation of a control with custom rendering of options"},{"fileName":"listbox-with-search.tsx","title":"With search","description":"Use to help merchants browse, filter, and choose from a list of options."}],"previewImg":"/images/components/lists/listbox.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"listbox-default.tsx","title":"Default","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Basic implementation of a control element used to let merchants select options\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Listbox} from '@shopify/polaris';\nimport React from 'react';\n\nfunction BaseListboxExample() {\n  return (\n    <Listbox accessibilityLabel=\"Basic Listbox example\">\n      <Listbox.Option value=\"UniqueValue-1\">Item 1</Listbox.Option>\n      <Listbox.Option value=\"UniqueValue-2\">Item 2</Listbox.Option>\n      <Listbox.Option value=\"UniqueValue-3\">Item 3</Listbox.Option>\n    </Listbox>\n  );\n}\n\n"},{"fileName":"listbox-with-loading.tsx","title":"With Loading","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Implementation of a control element showing a loading indicator to let merchants know more options are being loaded\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Listbox} from '@shopify/polaris';\nimport React from 'react';\n\nfunction ListboxWithLoadingExample() {\n  return (\n    <Listbox>\n      <Listbox.Option value=\"UniqueValue-1\">Item 1</Listbox.Option>\n      <Listbox.Option value=\"UniqueValue-2\">Item 2</Listbox.Option>\n      <Listbox.Option value=\"UniqueValue-3\">Item 3</Listbox.Option>\n      <Listbox.Loading accessibilityLabel=\"Loading\" />\n    </Listbox>\n  );\n}\n\n"},{"fileName":"listbox-with-action.tsx","title":"With Action","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Implementation of a control element used to let merchants take an action\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Listbox, LegacyStack, Icon} from '@shopify/polaris';\nimport {CirclePlusMinor} from '@shopify/polaris-icons';\nimport React from 'react';\n\nfunction ListboxWithActionExample() {\n  return (\n    <Listbox accessibilityLabel=\"Listbox with Action example\">\n      <Listbox.Option value=\"UniqueValue-1\">Item 1</Listbox.Option>\n      <Listbox.Option value=\"UniqueValue-2\" divider>\n        Item 2\n      </Listbox.Option>\n      <Listbox.Action value=\"ActionValue\">\n        <LegacyStack spacing=\"tight\">\n          <Icon source={CirclePlusMinor} tone=\"base\" />\n          <div>Add item</div>\n        </LegacyStack>\n      </Listbox.Action>\n    </Listbox>\n  );\n}\n\n"},{"fileName":"listbox-with-custom-element.tsx","title":"With custom element","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Implementation of a control with custom rendering of options\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Listbox} from '@shopify/polaris';\nimport React from 'react';\n\nfunction ListboxWithCustomElementExample() {\n  return (\n    <Listbox accessibilityLabel=\"Listbox with custom element example\">\n      <Listbox.Action value=\"ActionValue\" divider>\n        Add item\n      </Listbox.Action>\n      <Listbox.Option value=\"UniqueValue-1\">\n        <div>Item 1</div>\n      </Listbox.Option>\n      <Listbox.Option value=\"UniqueValue-2\">\n        <div>Item 2</div>\n      </Listbox.Option>\n      <Listbox.Option value=\"UniqueValue-3\">\n        <div>Item 3</div>\n      </Listbox.Option>\n      <Listbox.Loading accessibilityLabel=\"items are loading\" />\n    </Listbox>\n  );\n}\n\n"},{"fileName":"listbox-with-search.tsx","title":"With search","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to help merchants browse, filter, and choose from a list of options.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import React, {useState} from 'react';\nimport {\n  Icon,\n  LegacyCard,\n  TextField,\n  Listbox,\n  AutoSelection,\n  Scrollable,\n  EmptySearchResult,\n} from '@shopify/polaris';\nimport {SearchMinor} from '@shopify/polaris-icons';\n\n\nconst actionValue = '__ACTION__';\n\nconst segments = [\n  {\n    label: 'All customers',\n    id: 'gid://shopify/CustomerSegment/1',\n    value: '0',\n  },\n  {\n    label: 'VIP customers',\n    id: 'gid://shopify/CustomerSegment/2',\n    value: '1',\n  },\n  {\n    label: 'New customers',\n    id: 'gid://shopify/CustomerSegment/3',\n    value: '2',\n  },\n  {\n    label: 'Abandoned carts - last 30 days',\n    id: 'gid://shopify/CustomerSegment/4',\n    value: '3',\n  },\n  {\n    label: 'Wholesale customers',\n    id: 'gid://shopify/CustomerSegment/5',\n    value: '4',\n  },\n  {\n    label: 'Email subscribers',\n    id: 'gid://shopify/CustomerSegment/6',\n    value: '5',\n  },\n  {\n    label: 'From New York',\n    id: 'gid://shopify/CustomerSegment/7',\n    value: '6',\n  },\n  {\n    label: 'Repeat buyers',\n    id: 'gid://shopify/CustomerSegment/8',\n    value: '7',\n  },\n  {\n    label: 'First time buyers',\n    id: 'gid://shopify/CustomerSegment/9',\n    value: '8',\n  },\n  {\n    label: 'From Canada',\n    id: 'gid://shopify/CustomerSegment/10',\n    value: '9',\n  },\n  {\n    label: 'Bought in last 60 days',\n    id: 'gid://shopify/CustomerSegment/11',\n    value: '10',\n  },\n  {\n    label: 'Bought last BFCM',\n    id: 'gid://shopify/CustomerSegment/12',\n    value: '11',\n  },\n];\n\nconst lazyLoadSegments = Array.from(Array(100)).map((_, index) => ({\n  label: `Other customers ${index + 13}`,\n  id: `gid://shopify/CustomerSegment/${index + 13}`,\n  value: `${index + 12}`,\n}));\n\nsegments.push(...lazyLoadSegments);\n\nconst interval = 25;\n\nfunction ListboxWithSearchExample() {\n  const [showFooterAction, setShowFooterAction] = useState(true);\n  const [query, setQuery] = useState<string>('');\n  const [lazyLoading, setLazyLoading] = useState(false);\n  const [willLoadMoreResults, setWillLoadMoreResults] = useState(true);\n  const [visibleOptionIndex, setVisibleOptionIndex] = useState(6);\n  const [activeOptionId, setActiveOptionId] = useState(segments[0].id);\n  const [selectedSegmentIndex, setSelectedSegmentIndex] = useState(0);\n  const [filteredSegments, setFilteredSegments] = useState<\n    typeof segments[number][]\n  >([]);\n\n  const handleClickShowAll = () => {\n    setShowFooterAction(false);\n    setVisibleOptionIndex(segments.length);\n  };\n\n  const handleFilterSegments = (query: any) => {\n    const nextFilteredSegments = segments.filter((segment) => {\n      return segment.label\n        .toLocaleLowerCase()\n        .includes(query.toLocaleLowerCase().trim());\n    });\n\n    setFilteredSegments(nextFilteredSegments);\n  };\n\n  const handleQueryChange = (query: any) => {\n    setQuery(query);\n\n    if (query.length >= 2) handleFilterSegments(query);\n  };\n\n  const handleQueryClear = () => {\n    handleQueryChange('');\n  };\n\n  const handleSegmentSelect = (segmentIndex: string) => {\n    if (segmentIndex === actionValue) {\n      return handleClickShowAll();\n    }\n\n    setSelectedSegmentIndex(Number(segmentIndex));\n  };\n\n  const handleActiveOptionChange = (_: string, domId: string) => {\n    setActiveOptionId(domId);\n  };\n\n  // This is just to illustrate lazy loading state vs loading state. This is an\n  // example, so we aren't fetching from GraphQL. You'd use `pageInfo.hasNextPage`\n  // from your GraphQL query data instead of this fake \"willLoadMoreResults\" state\n  // along with setting `first` your GraphQL query's variables to your app's\n  // default max edges limit (e.g., 250).\n\n  const handleLazyLoadSegments = () => {\n    if (willLoadMoreResults && !showFooterAction) {\n      setLazyLoading(true);\n\n      const options = query ? filteredSegments : segments;\n\n      setTimeout(() => {\n        const remainingOptionCount = options.length - visibleOptionIndex;\n        const nextVisibleOptionIndex =\n          remainingOptionCount >= interval\n            ? visibleOptionIndex + interval\n            : visibleOptionIndex + remainingOptionCount;\n\n        setLazyLoading(false);\n        setVisibleOptionIndex(nextVisibleOptionIndex);\n\n        if (remainingOptionCount <= interval) {\n          setWillLoadMoreResults(false);\n        }\n      }, 1000);\n    }\n  };\n\n  const listboxId = 'SearchableListbox';\n\n  const textFieldMarkup = (\n    <div style={{padding: '12px'}}>\n      <TextField\n        focused={showFooterAction}\n        clearButton\n        labelHidden\n        label=\"Customer segments\"\n        placeholder=\"Search segments\"\n        autoComplete=\"off\"\n        value={query}\n        prefix={<Icon source={SearchMinor} />}\n        ariaActiveDescendant={activeOptionId}\n        ariaControls={listboxId}\n        onChange={handleQueryChange}\n        onClearButtonClick={handleQueryClear}\n      />\n    </div>\n  );\n\n  const segmentOptions = query ? filteredSegments : segments;\n\n  const segmentList =\n    segmentOptions.length > 0\n      ? segmentOptions\n          .slice(0, visibleOptionIndex)\n          .map(({label, id, value}) => {\n            const selected = segments[selectedSegmentIndex].value === value;\n\n            return (\n              <Listbox.Option key={id} value={value} selected={selected}>\n                <Listbox.TextOption selected={selected}>\n                  {label}\n                </Listbox.TextOption>\n              </Listbox.Option>\n            );\n          })\n      : null;\n\n  const showAllMarkup = showFooterAction ? (\n    <Listbox.Action value={actionValue}>\n      <span style={{color: 'var(--p-color-text-emphasis)'}}>\n        Show all 111 segments\n      </span>\n    </Listbox.Action>\n  ) : null;\n\n  const lazyLoadingMarkup = lazyLoading ? (\n    <Listbox.Loading\n      accessibilityLabel={`${\n        query ? 'Filtering' : 'Loading'\n      } customer segments`}\n    />\n  ) : null;\n\n  const noResultsMarkup =\n    segmentOptions.length === 0 ? (\n      <EmptySearchResult\n        title=\"\"\n        description={`No segments found matching \"${query}\"`}\n      />\n    ) : null;\n\n  const listboxMarkup = (\n    <Listbox\n      enableKeyboardControl\n      autoSelection={AutoSelection.FirstSelected}\n      accessibilityLabel=\"Search for and select a customer segment\"\n      customListId={listboxId}\n      onSelect={handleSegmentSelect}\n      onActiveOptionChange={handleActiveOptionChange}\n    >\n      {segmentList}\n      {showAllMarkup}\n      {noResultsMarkup}\n      {lazyLoadingMarkup}\n    </Listbox>\n  );\n\n  return (\n    <LegacyCard>\n      <div\n        style={{\n          alignItems: 'stretch',\n          borderTop: '1px solid #DFE3E8',\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'stretch',\n          position: 'relative',\n          width: '100%',\n          height: '100%',\n          overflow: 'hidden',\n        }}\n      >\n        {textFieldMarkup}\n\n        <Scrollable\n          shadow\n          style={{\n            position: 'relative',\n            height: '292px',\n            padding: 'var(--p-space-200) 0',\n            borderBottomLeftRadius: 'var(--p-border-radius-200)',\n            borderBottomRightRadius: 'var(--p-border-radius-200)',\n          }}\n          onScrolledToBottom={handleLazyLoadSegments}\n        >\n          {listboxMarkup}\n        </Scrollable>\n      </div>\n    </LegacyCard>\n  );\n}\n\n"}],"seoDescription":"A Listbox is a vertical list of interactive options, with room for icons, descriptions, and other elements.","type":{"ListboxProps":{"filePath":"polaris-react/src/components/Listbox/Listbox.tsx","name":"ListboxProps","description":"","members":[{"filePath":"polaris-react/src/components/Listbox/Listbox.tsx","syntaxKind":"PropertySignature","name":"children","value":"ReactNode","description":"Inner content of the listbox"},{"filePath":"polaris-react/src/components/Listbox/Listbox.tsx","syntaxKind":"PropertySignature","name":"autoSelection","value":"AutoSelection","description":"Indicates the default active option in the list. Patterns that support option creation should default the active option to the first option.","isOptional":true,"defaultValue":"AutoSelection.FirstSelected"},{"filePath":"polaris-react/src/components/Listbox/Listbox.tsx","syntaxKind":"PropertySignature","name":"enableKeyboardControl","value":"boolean","description":"Explicitly enable keyboard control","isOptional":true},{"filePath":"polaris-react/src/components/Listbox/Listbox.tsx","syntaxKind":"PropertySignature","name":"accessibilityLabel","value":"string","description":"Visually hidden text for screen readers","isOptional":true},{"filePath":"polaris-react/src/components/Listbox/Listbox.tsx","syntaxKind":"PropertySignature","name":"customListId","value":"string","description":"Provide a custom ID for the list element","isOptional":true},{"filePath":"polaris-react/src/components/Listbox/Listbox.tsx","syntaxKind":"MethodSignature","name":"onSelect","value":"(value: string) => void","description":"Callback fired when an option is selected","isOptional":true},{"filePath":"polaris-react/src/components/Listbox/Listbox.tsx","syntaxKind":"MethodSignature","name":"onActiveOptionChange","value":"(value: string, domId: string) => void","description":"Callback fired when an option becomes active","isOptional":true}],"value":"export interface ListboxProps {\n  /** Inner content of the listbox */\n  children: ReactNode;\n  /** Indicates the default active option in the list. Patterns that support option creation should default the active option to the first option.\n   * @default AutoSelection.FirstSelected\n   */\n  autoSelection?: AutoSelection;\n  /** Explicitly enable keyboard control */\n  enableKeyboardControl?: boolean;\n  /** Visually hidden text for screen readers */\n  accessibilityLabel?: string;\n  /** Provide a custom ID for the list element */\n  customListId?: string;\n  /** Callback fired when an option is selected */\n  onSelect?(value: string): void;\n  /** Callback fired when an option becomes active */\n  onActiveOptionChange?(value: string, domId: string): void;\n}"},"AutoSelection":{"filePath":"polaris-react/src/components/Listbox/Listbox.tsx","syntaxKind":"EnumDeclaration","name":"AutoSelection","value":"export enum AutoSelection {\n  /** Default active option is the first selected option. If no options are selected, defaults to first interactive option. */\n  FirstSelected = 'FIRST_SELECTED',\n  /** Default active option is always the first interactive option. */\n  First = 'FIRST',\n  /** Default to the manual selection pattern. */\n  None = 'NONE',\n}","members":[{"filePath":"polaris-react/src/components/Listbox/Listbox.tsx","name":"FirstSelected","value":"FIRST_SELECTED"},{"filePath":"polaris-react/src/components/Listbox/Listbox.tsx","name":"First","value":"FIRST"},{"filePath":"polaris-react/src/components/Listbox/Listbox.tsx","name":"None","value":"NONE"}]}},"editPageLinkPath":"polaris.shopify.com/content/components/lists/listbox.mdx"},"__N_SSG":true}