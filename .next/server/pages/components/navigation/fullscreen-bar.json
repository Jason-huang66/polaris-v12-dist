{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    hr: \"hr\",\n    a: \"a\"\n  }, _provideComponents(), props.components), {Lede, Examples, Props} = _components;\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsxs(_components.p, {\n        children: [\"The Fullscreen bar is a header component that should be presented at the top of an app when it is in fullscreen mode. This is designed to ensure a uniform placement for a button to exit that mode. The Fullscreen bar can be customized by adding \", _jsx(_components.code, {\n          children: \"children\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Fullscreen bar component should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Be presented when an App is in fullscreen mode as a means of exiting that mode.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Fire an action to exit fullscreen mode.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"related-components\",\n      children: \"Related components\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"To provide quick, at-a-glance feedback on the outcome of an action, use the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/feedback-indicators/toast\",\n          children: \"toast\"\n        }), \" component.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To indicate to merchants that a page is loading or an upload is processing, use the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/loading\",\n          children: \"loading\"\n        }), \" component.\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Fullscreen bar","category":"Navigation","keywords":["topbar","top bar","header","bar","app"],"examples":[{"fileName":"fullscreen-bar-with-children.tsx","title":"With children","description":"Use to provide structure for the top of an application while in fullscreen mode."},{"fileName":"fullscreen-bar-no-children.tsx","title":"No children","description":"Use this default to show ONLY the Back button."}],"previewImg":"/images/components/navigation/fullscreen-bar.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"fullscreen-bar-with-children.tsx","title":"With children","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to provide structure for the top of an application while in fullscreen mode.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  Badge,\n  ButtonGroup,\n  FullscreenBar,\n  Button,\n  Text,\n} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction FullscreenBarExample() {\n  const [isFullscreen, setFullscreen] = useState(true);\n\n  const handleActionClick = useCallback(() => {\n    setFullscreen(false);\n  }, []);\n\n  const fullscreenBarMarkup = (\n    <FullscreenBar onAction={handleActionClick}>\n      <div\n        style={{\n          display: 'flex',\n          flexGrow: 1,\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          paddingLeft: '1rem',\n          paddingRight: '1rem',\n        }}\n      >\n        <Badge tone=\"info\">Draft</Badge>\n        <div style={{marginLeft: '1rem', flexGrow: 1}}>\n          <Text variant=\"headingLg\" as=\"p\">\n            Page title\n          </Text>\n        </div>\n        <ButtonGroup>\n          <Button onClick={() => {}}>Secondary Action</Button>\n          <Button variant=\"primary\" onClick={() => {}}>\n            Primary Action\n          </Button>\n        </ButtonGroup>\n      </div>\n    </FullscreenBar>\n  );\n\n  return (\n    <div style={{height: '250px', width: '100%'}}>\n      {isFullscreen && fullscreenBarMarkup}\n      <div style={{padding: '1rem'}}>\n        {!isFullscreen && (\n          <Button onClick={() => setFullscreen(true)}>Go Fullscreen</Button>\n        )}\n        <Text variant=\"headingLg\" as=\"p\">\n          Page content\n        </Text>\n      </div>\n    </div>\n  );\n}\n\n"},{"fileName":"fullscreen-bar-no-children.tsx","title":"No children","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use this default to show ONLY the Back button.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {FullscreenBar, Button, Text} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction FullscreenBarExample() {\n  const [isFullscreen, setFullscreen] = useState(true);\n\n  const handleActionClick = useCallback(() => {\n    setFullscreen(false);\n  }, []);\n\n  const fullscreenBarMarkup = <FullscreenBar onAction={handleActionClick} />;\n\n  return (\n    <div style={{height: '250px', width: '100%'}}>\n      {isFullscreen && fullscreenBarMarkup}\n      <div style={{padding: '1rem'}}>\n        {!isFullscreen && (\n          <Button onClick={() => setFullscreen(true)}>Go Fullscreen</Button>\n        )}\n        <Text variant=\"headingLg\" as=\"p\">\n          Page content\n        </Text>\n      </div>\n    </div>\n  );\n}\n\n"}],"seoDescription":"The Fullscreen bar is a header component that should be presented at the top of an app when it is in fullscreen mode. This is designed to ensure a uniform placement for a button to exit that mode. The Fullscreen bar can be customized by adding children.","type":{"FullscreenBarProps":{"filePath":"polaris-react/src/components/FullscreenBar/FullscreenBar.tsx","name":"FullscreenBarProps","description":"","members":[{"filePath":"polaris-react/src/components/FullscreenBar/FullscreenBar.tsx","syntaxKind":"PropertySignature","name":"onAction","value":"() => void","description":"Callback when back button is clicked"},{"filePath":"polaris-react/src/components/FullscreenBar/FullscreenBar.tsx","syntaxKind":"PropertySignature","name":"children","value":"React.ReactNode","description":"Render child elements","isOptional":true}],"value":"export interface FullscreenBarProps {\n  /** Callback when back button is clicked */\n  onAction: () => void;\n  /** Render child elements */\n  children?: React.ReactNode;\n}"}},"editPageLinkPath":"polaris.shopify.com/content/components/navigation/fullscreen-bar.mdx"},"__N_SSG":true}