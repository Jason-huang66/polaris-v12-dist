{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    hr: \"hr\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components), {Lede, Examples, Props} = _components;\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"Use to alternate among related views within the same context.\"\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Tabs should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Represent the same kind of content, such as a list-view with different filters applied. Don’t use tabs to group content that is dissimilar.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Only be active one at a time.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Not force merchants to jump back and forth to do a single task. Merchants should be able to complete their work and find what they need under each tab.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Not be used for primary navigation.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"content-guidelines\",\n      children: \"Content guidelines\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"tabs\",\n      children: \"Tabs\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Tabs should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Be clearly labeled to help differentiate the different sections beneath them.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Have short and scannable labels, generally kept to single word.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Relate to the section of Shopify they’re on. Imagine the page section title is an invisible noun after the tab. For example, the tabs for the orders section are:\"\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"All\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"Open\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"Unfulfilled\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"Unpaid\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The tabs for the gift cards section are:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"All\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"New\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Partially used\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Used\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Disabled\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"And for the customers section, the tabs are:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"All\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"New\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Returning\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Abandoned checkouts\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Email subscribers\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Where possible, follow this pattern when writing tabs.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Tabs","shortDescription":"Used to alternate among related views within the same context.","category":"Navigation","keywords":["layout","navigate","organize","list views","list filters","fitted tabs","segmented controls","scrollable"],"examples":[{"fileName":"tabs-default.tsx","title":"Default","description":"Use for most cases, especially when the number of tabs may be more than three."},{"fileName":"tabs-inside-of-a-card.tsx","title":"Inside of a Card","description":"Use to display tabs inside of a [Card](/components/layout-and-structure/card)."},{"fileName":"tabs-fitted.tsx","title":"Fitted","description":"Use when tabs contain a few (2 or 3) items within a narrow column."},{"fileName":"tabs-with-actions.tsx","title":"With actions","description":"Use when actions need to be performed on a tab."},{"fileName":"tabs-with-badge-content.tsx","title":"With badge content","description":"Use to inform a piece of information about the tabs."},{"fileName":"tabs-with-custom-disclosure.tsx","title":"With custom disclosure","description":"Use to provide information about the popover contents."}],"previewImg":"/images/components/navigation/tabs.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"tabs-default.tsx","title":"Default","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use for most cases, especially when the number of tabs may be more than three.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyCard, Tabs} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction TabsDefaultExample() {\n  const [selected, setSelected] = useState(0);\n\n  const handleTabChange = useCallback(\n    (selectedTabIndex: number) => setSelected(selectedTabIndex),\n    [],\n  );\n\n  const tabs = [\n    {\n      id: 'all-customers-1',\n      content: 'All',\n      accessibilityLabel: 'All customers',\n      panelID: 'all-customers-content-1',\n    },\n    {\n      id: 'accepts-marketing-1',\n      content: 'Accepts marketing',\n      panelID: 'accepts-marketing-content-1',\n    },\n    {\n      id: 'repeat-customers-1',\n      content: 'Repeat customers',\n      panelID: 'repeat-customers-content-1',\n    },\n    {\n      id: 'prospects-1',\n      content: 'Prospects',\n      panelID: 'prospects-content-1',\n    },\n  ];\n\n  return (\n    <Tabs tabs={tabs} selected={selected} onSelect={handleTabChange}>\n      <LegacyCard.Section title={tabs[selected].content}>\n        <p>Tab {selected} selected</p>\n      </LegacyCard.Section>\n    </Tabs>\n  );\n}\n\n"},{"fileName":"tabs-inside-of-a-card.tsx","title":"Inside of a Card","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_components.p, {\n    children: [\"Use to display tabs inside of a \", _jsx(_components.a, {\n      href: \"/components/layout-and-structure/card\",\n      children: \"Card\"\n    }), \".\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyCard, Tabs} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction TabsInsideOfACardExample() {\n  const [selected, setSelected] = useState(0);\n\n  const handleTabChange = useCallback(\n    (selectedTabIndex: number) => setSelected(selectedTabIndex),\n    [],\n  );\n\n  const tabs = [\n    {\n      id: 'all-customers-1',\n      content: 'All',\n      accessibilityLabel: 'All customers',\n      panelID: 'all-customers-content-1',\n    },\n    {\n      id: 'accepts-marketing-1',\n      content: 'Accepts marketing',\n      panelID: 'accepts-marketing-content-1',\n    },\n    {\n      id: 'repeat-customers-1',\n      content: 'Repeat customers',\n      panelID: 'repeat-customers-content-1',\n    },\n    {\n      id: 'prospects-1',\n      content: 'Prospects',\n      panelID: 'prospects-content-1',\n    },\n  ];\n\n  return (\n    <LegacyCard>\n      <Tabs tabs={tabs} selected={selected} onSelect={handleTabChange}>\n        <LegacyCard.Section title={tabs[selected].content}>\n          <p>Tab {selected} selected</p>\n        </LegacyCard.Section>\n      </Tabs>\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"tabs-fitted.tsx","title":"Fitted","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when tabs contain a few (2 or 3) items within a narrow column.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyCard, Tabs} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction TabsFittedExample() {\n  const [selected, setSelected] = useState(0);\n\n  const handleTabChange = useCallback(\n    (selectedTabIndex: number) => setSelected(selectedTabIndex),\n    [],\n  );\n\n  const tabs = [\n    {\n      id: 'all-customers-fitted-2',\n      content: 'All',\n      accessibilityLabel: 'All customers',\n      panelID: 'all-customers-fitted-content-2',\n    },\n    {\n      id: 'accepts-marketing-fitted-2',\n      content: 'Accepts marketing',\n      panelID: 'accepts-marketing-fitted-Ccontent-2',\n    },\n  ];\n\n  return (\n    <LegacyCard>\n      <Tabs tabs={tabs} selected={selected} onSelect={handleTabChange} fitted>\n        <LegacyCard.Section title={tabs[selected].content}>\n          <p>Tab {selected} selected</p>\n        </LegacyCard.Section>\n      </Tabs>\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"tabs-with-actions.tsx","title":"With actions","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when actions need to be performed on a tab.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyCard, Tabs, TabProps} from '@shopify/polaris';\nimport {useState} from 'react';\n\nfunction TabsWithActionsExample() {\n  const sleep = (ms: number) =>\n    new Promise((resolve) => setTimeout(resolve, ms));\n  const [itemStrings, setItemStrings] = useState([\n    'All',\n    'Unpaid',\n    'Open',\n    'Closed',\n    'Local delivery',\n    'Local pickup',\n  ]);\n  const deleteView = (index: number) => {\n    const newItemStrings = [...itemStrings];\n    newItemStrings.splice(index, 1);\n    setItemStrings(newItemStrings);\n    setSelected(0);\n  };\n\n  const duplicateView = async (name: string) => {\n    setItemStrings([...itemStrings, name]);\n    setSelected(itemStrings.length);\n    await sleep(1);\n    return true;\n  };\n\n  const tabs: TabProps[] = itemStrings.map((item, index) => ({\n    content: item,\n    index,\n    onAction: () => {},\n    id: `${item}-${index}`,\n    isLocked: index === 0,\n    actions:\n      index === 0\n        ? []\n        : [\n            {\n              type: 'rename',\n              onAction: () => {},\n              onPrimaryAction: async (value: string) => {\n                const newItemsStrings = tabs.map((item, idx) => {\n                  if (idx === index) {\n                    return value;\n                  }\n                  return item.content;\n                });\n                await sleep(1);\n                setItemStrings(newItemsStrings);\n                return true;\n              },\n            },\n            {\n              type: 'duplicate',\n              onPrimaryAction: async (name) => {\n                await sleep(1);\n                duplicateView(name);\n                return true;\n              },\n            },\n            {\n              type: 'edit',\n            },\n            {\n              type: 'delete',\n              onPrimaryAction: async () => {\n                await sleep(1);\n                deleteView(index);\n                return true;\n              },\n            },\n          ],\n  }));\n  const [selected, setSelected] = useState(0);\n  const onCreateNewView = async (value: string) => {\n    await sleep(500);\n    setItemStrings([...itemStrings, value]);\n    setSelected(itemStrings.length);\n    return true;\n  };\n\n  return (\n    <LegacyCard>\n      <Tabs\n        tabs={tabs}\n        selected={selected}\n        onSelect={setSelected}\n        canCreateNewView\n        onCreateNewView={onCreateNewView}\n      >\n        <LegacyCard.Section title={tabs[selected].content}>\n          <p>Tab {selected} selected</p>\n        </LegacyCard.Section>\n      </Tabs>\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"tabs-with-badge-content.tsx","title":"With badge content","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to inform a piece of information about the tabs.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyCard, Tabs} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction TabsWithBadgeExample() {\n  const [selected, setSelected] = useState(0);\n\n  const handleTabChange = useCallback(\n    (selectedTabIndex: number) => setSelected(selectedTabIndex),\n    [],\n  );\n\n  const tabs = [\n    {\n      id: 'all-customers-fitted-3',\n      content: 'All',\n      badge: '10+',\n      accessibilityLabel: 'All customers',\n      panelID: 'all-customers-fitted-content-3',\n    },\n    {\n      id: 'accepts-marketing-fitted-3',\n      content: 'Accepts marketing',\n      badge: '4',\n      panelID: 'accepts-marketing-fitted-content-3',\n    },\n  ];\n\n  return (\n    <LegacyCard>\n      <Tabs tabs={tabs} selected={selected} onSelect={handleTabChange} fitted>\n        <LegacyCard.Section title={tabs[selected].content}>\n          <p>Tab {selected} selected</p>\n        </LegacyCard.Section>\n      </Tabs>\n    </LegacyCard>\n  );\n}\n\n"},{"fileName":"tabs-with-custom-disclosure.tsx","title":"With custom disclosure","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to provide information about the popover contents.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {LegacyCard, Tabs} from '@shopify/polaris';\nimport {useState, useCallback} from 'react';\n\nfunction TabsWithCustomDisclosureExample() {\n  const [selected, setSelected] = useState(0);\n\n  const handleTabChange = useCallback(\n    (selectedTabIndex: number) => setSelected(selectedTabIndex),\n    [],\n  );\n\n  const tabs = [\n    {\n      id: 'all-customers-4',\n      content: 'All',\n      accessibilityLabel: 'All customers',\n      panelID: 'all-customers-content-4',\n    },\n    {\n      id: 'accepts-marketing-4',\n      content: 'Accepts marketing',\n      panelID: 'accepts-marketing-content-4',\n    },\n    {\n      id: 'repeat-customers-4',\n      content: 'Repeat customers',\n      panelID: 'repeat-customers-content-4',\n    },\n    {\n      id: 'prospects-4',\n      content: 'Prospects',\n      panelID: 'prospects-content-4',\n    },\n  ];\n\n  return (\n    <LegacyCard>\n      <Tabs\n        tabs={tabs}\n        selected={selected}\n        onSelect={handleTabChange}\n        disclosureText=\"More views\"\n      >\n        <LegacyCard.Section title={tabs[selected].content}>\n          <p>Tab {selected} selected</p>\n        </LegacyCard.Section>\n      </Tabs>\n    </LegacyCard>\n  );\n}\n\n"}],"seoDescription":"Use to alternate among related views within the same context.","type":{"TabsProps":{"filePath":"polaris-react/src/components/Tabs/Tabs.tsx","name":"TabsProps","description":"","members":[{"filePath":"polaris-react/src/components/Tabs/Tabs.tsx","syntaxKind":"PropertySignature","name":"tabs","value":"TabProps[]","description":"The items that map to each Tab."},{"filePath":"polaris-react/src/components/Tabs/Tabs.tsx","syntaxKind":"PropertySignature","name":"children","value":"React.ReactNode","description":"Content to display in tabs","isOptional":true},{"filePath":"polaris-react/src/components/Tabs/Tabs.tsx","syntaxKind":"PropertySignature","name":"selected","value":"number","description":"The index of the currently selected Tab."},{"filePath":"polaris-react/src/components/Tabs/Tabs.tsx","syntaxKind":"PropertySignature","name":"disabled","value":"boolean","description":"Whether the Tabs are disabled or not.","isOptional":true},{"filePath":"polaris-react/src/components/Tabs/Tabs.tsx","syntaxKind":"PropertySignature","name":"onSelect","value":"(selectedTabIndex: number) => void","description":"Optional callback invoked when a Tab becomes selected.","isOptional":true},{"filePath":"polaris-react/src/components/Tabs/Tabs.tsx","syntaxKind":"PropertySignature","name":"canCreateNewView","value":"boolean","description":"Whether to show the add new view Tab.","isOptional":true},{"filePath":"polaris-react/src/components/Tabs/Tabs.tsx","syntaxKind":"PropertySignature","name":"newViewAccessibilityLabel","value":"string","description":"Label for the new view Tab. Will override the default of \"Create new view\"","isOptional":true},{"filePath":"polaris-react/src/components/Tabs/Tabs.tsx","syntaxKind":"PropertySignature","name":"onCreateNewView","value":"(value: string) => Promise<boolean>","description":"Optional callback invoked when a merchant saves a new view from the Modal","isOptional":true},{"filePath":"polaris-react/src/components/Tabs/Tabs.tsx","syntaxKind":"PropertySignature","name":"fitted","value":"boolean","description":"Fit tabs to container","isOptional":true},{"filePath":"polaris-react/src/components/Tabs/Tabs.tsx","syntaxKind":"PropertySignature","name":"disclosureText","value":"string","description":"Text to replace disclosures horizontal dots","isOptional":true}],"value":"export interface TabsProps {\n  /** The items that map to each Tab. */\n  tabs: TabProps[];\n  /** Content to display in tabs */\n  children?: React.ReactNode;\n  /** The index of the currently selected Tab. */\n  selected: number;\n  /** Whether the Tabs are disabled or not. */\n  disabled?: boolean;\n  /** Optional callback invoked when a Tab becomes selected. */\n  onSelect?: (selectedTabIndex: number) => void;\n  /** Whether to show the add new view Tab. */\n  canCreateNewView?: boolean;\n  /** Label for the new view Tab. Will override the default of \"Create new view\" */\n  newViewAccessibilityLabel?: string;\n  /** Optional callback invoked when a merchant saves a new view from the Modal */\n  onCreateNewView?: (value: string) => Promise<boolean>;\n  /** Fit tabs to container */\n  fitted?: boolean;\n  /** Text to replace disclosures horizontal dots */\n  disclosureText?: string;\n}"}},"editPageLinkPath":"polaris.shopify.com/content/components/navigation/tabs.mdx"},"__N_SSG":true}