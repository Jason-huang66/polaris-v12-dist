{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    hr: \"hr\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    h4: \"h4\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\"\n  }, _provideComponents(), props.components), {Lede, Examples, Props, DoDont} = _components;\n  if (!DoDont) _missingMdxReference(\"DoDont\", true);\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsxs(_components.p, {\n        children: [\"The top bar is a header component that allows merchants to search, access menus, and navigate by clicking on the logo. It’s always visible at the top of interfaces like Shopify or Shopify Plus. Third-party apps that use the top bar can customize the color to match their brand using the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/app-provider\",\n          children: \"app provider\"\n        }), \" component and are required to use their own logo.\"]\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"required-components\",\n      children: \"Required components\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The top bar component must be passed to the \", _jsx(_components.a, {\n        href: \"https://polaris.shopify.com/components/frame\",\n        children: \"frame\"\n      }), \" component.\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The top bar component should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Not provide global navigation for an application\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"Use the \", _jsx(_components.a, {\n              href: \"https://polaris.shopify.com/components/navigation/navigation\",\n              children: \"navigation component\"\n            }), \" instead\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Include search to help merchants find resources and navigate an application\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Include a user menu component to indicate the logged-in merchant and provide them with global actions\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Provide a color through the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/app-provider\",\n          children: \"app provider\"\n        }), \" component to style the background\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"The global menu text should contrast with the rest of the top bar and pass the minimum contrast ratio of the WCAG 2.0 guidelines\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Use an SVG file for the logo\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Use a logo that passes the minimum contrast ratio of the WCAG 2.0 guidelines when compared to the top bar background color\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Show the navigation toggle so it appears on small screen\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"content-guidelines\",\n      children: \"Content guidelines\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"placeholder-content\",\n      children: \"Placeholder content\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The placeholder content for the search field should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Always say \\\"Search\\\"\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Never include an ellipsis\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do\",\n        children: \"Do\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Search\"\n        }), \"\\n\"]\n      }), _jsx(_components.h4, {\n        id: \"dont\",\n        children: \"Don’t\"\n      }), _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"search...\"\n        }), \"\\n\"]\n      })]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"top-bar-menu\",\n      children: \"Top bar menu\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A component that composes together an activator and a popover containing an action list to create a dropdown menu.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"menu-properties\",\n      children: \"Menu properties\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Prop\"\n          }), _jsx(_components.th, {\n            children: \"Type\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"activatorContent\"\n          }), _jsx(_components.td, {\n            children: \"React.ReactNode\"\n          }), _jsx(_components.td, {\n            children: \"Accepts an activator component that renders inside of a button that opens the menu\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"actions\"\n          }), _jsx(_components.td, {\n            children: \"ActionListProps['sections']\"\n          }), _jsx(_components.td, {\n            children: \"An array of action objects that are rendered inside of a popover triggered by this menu\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"message\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.a, {\n              href: \"#type-message\",\n              children: \"MessageProps\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Accepts a message that facilitates direct, urgent communication with the merchant through the menu\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"open\"\n          }), _jsx(_components.td, {\n            children: \"boolean\"\n          }), _jsx(_components.td, {\n            children: \"A boolean property indicating whether the menu is currently open\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"onOpen()\"\n          }), _jsx(_components.td, {\n            children: \"function\"\n          }), _jsx(_components.td, {\n            children: \"A callback function to handle opening the menu popover\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"onClose()\"\n          }), _jsx(_components.td, {\n            children: \"function\"\n          }), _jsx(_components.td, {\n            children: \"A callback function to handle closing the menu popover\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"top-bar-user-menu\",\n      children: \"Top bar user menu\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A specialized menu component that is activated by a user avatar.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"menu-properties-1\",\n      children: \"Menu properties\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Prop\"\n          }), _jsx(_components.th, {\n            children: \"Type\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"actions\"\n          }), _jsx(_components.td, {\n            children: \"{items: IconableAction[]}[]\"\n          }), _jsx(_components.td, {\n            children: \"An array of action objects that are rendered inside of a popover triggered by this menu\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"message\"\n          }), _jsx(_components.td, {\n            children: _jsx(_components.a, {\n              href: \"#type-message\",\n              children: \"MessageProps\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Accepts a message that facilitates direct, urgent communication with the merchant through the user menu\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"name\"\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"A string detailing the merchant’s full name to be displayed in the user menu\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"detail\"\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"A string allowing further details on the merchant’s name displayed in the user menu\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"initials\"\n          }), _jsx(_components.td, {\n            children: \"AvatarProps['initials']\"\n          }), _jsx(_components.td, {\n            children: \"The merchant’s initials, rendered in place of an avatar image when not provided\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"avatar\"\n          }), _jsx(_components.td, {\n            children: \"AvatarProps['source']\"\n          }), _jsx(_components.td, {\n            children: \"An avatar image representing the merchant\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"open\"\n          }), _jsx(_components.td, {\n            children: \"boolean\"\n          }), _jsx(_components.td, {\n            children: \"A boolean property indicating whether the user menu is currently open\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"onToggle()\"\n          }), _jsx(_components.td, {\n            children: \"function\"\n          }), _jsx(_components.td, {\n            children: \"A callback function to handle opening and closing the user menu\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"top-bar-menu-message\",\n      children: \"Top bar menu message\"\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"message-properties\",\n      children: \"Message properties\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Prop\"\n          }), _jsx(_components.th, {\n            children: \"Type\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"title\"\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"A title for the message\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"description\"\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"A description for the message\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"action\"\n          }), _jsx(_components.td, {\n            children: \"{onClick(): void; content: string}\"\n          }), _jsx(_components.td, {\n            children: \"An action to render near the message\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"link\"\n          }), _jsx(_components.td, {\n            children: \"{to: string; content: string}\"\n          }), _jsx(_components.td, {\n            children: \"A link to view the content of the message\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"badge\"\n          }), _jsx(_components.td, {\n            children: \"{content: string; status: BadgeProps['status']}\"\n          }), _jsx(_components.td, {\n            children: \"A badge to render near the message\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"top-bar-search-field\",\n      children: \"Top bar search field\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A text field component that is tailor-made for a search use-case.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"search-field-properties\",\n      children: \"Search field properties\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Prop\"\n          }), _jsx(_components.th, {\n            children: \"Type\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"value\"\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"Initial value for the input\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"placeholder\"\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"Hint text to display\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"focused\"\n          }), _jsx(_components.td, {\n            children: \"boolean\"\n          }), _jsx(_components.td, {\n            children: \"Force the focus state on the input\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"active\"\n          }), _jsx(_components.td, {\n            children: \"boolean\"\n          }), _jsx(_components.td, {\n            children: \"Force a state where search is active but the text field component is not focused\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"onChange(value: string)\"\n          }), _jsx(_components.td, {\n            children: \"function\"\n          }), _jsx(_components.td, {\n            children: \"Callback when value is changed\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"onFocus()\"\n          }), _jsx(_components.td, {\n            children: \"function\"\n          }), _jsx(_components.td, {\n            children: \"Callback when input is focused\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"onBlur()\"\n          }), _jsx(_components.td, {\n            children: \"function\"\n          }), _jsx(_components.td, {\n            children: \"Callback when focus is removed\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"related-components\",\n      children: \"Related components\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"To provide the structure for the top bar component, as well as the primary navigation use the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/frame\",\n          children: \"frame\"\n        }), \" component.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To display the primary navigation within the frame of an application, use the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/navigation/navigation\",\n          children: \"navigation\"\n        }), \" component.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To tell merchants their options once they have made changes to a form on the page use the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/contextual-save-bar\",\n          children: \"contextual save bar\"\n        }), \" component.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To provide quick, at-a-glance feedback on the outcome of an action, use the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/feedback-indicators/toast\",\n          children: \"toast\"\n        }), \" component.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To indicate to merchants that a page is loading or an upload is processing use the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/loading\",\n          children: \"loading\"\n        }), \" component.\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Top bar","shortDescription":"Appears at the top of the page and is used to brand and navigate major applications areas.","category":"Navigation","keywords":["global chrome","global features","topbar","top bar","header","nav bar","bar","navbar","brand","search","user","menu","logo"],"examples":[{"fileName":"top-bar-default.tsx","title":"Default","description":"Use to provide structure for the top of an application. Style the top bar component using the app provider component with a theme. Providing just the `background` key for the top bar component theme will result in intelligent defaults being set for complementary colors with contrasting text."}],"previewImg":"/images/components/navigation/top-bar.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"top-bar-default.tsx","title":"Default","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_components.p, {\n    children: [\"Use to provide structure for the top of an application. Style the top bar component using the app provider component with a theme. Providing just the \", _jsx(_components.code, {\n      children: \"background\"\n    }), \" key for the top bar component theme will result in intelligent defaults being set for complementary colors with contrasting text.\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {TopBar, ActionList, Icon, Frame, Text} from '@shopify/polaris';\nimport {ArrowLeftMinor, QuestionMarkMajor} from '@shopify/polaris-icons';\nimport {useState, useCallback} from 'react';\n\nfunction TopBarExample() {\n  const [isUserMenuOpen, setIsUserMenuOpen] = useState(false);\n  const [isSecondaryMenuOpen, setIsSecondaryMenuOpen] = useState(false);\n  const [isSearchActive, setIsSearchActive] = useState(false);\n  const [searchValue, setSearchValue] = useState('');\n\n  const toggleIsUserMenuOpen = useCallback(\n    () => setIsUserMenuOpen((isUserMenuOpen) => !isUserMenuOpen),\n    [],\n  );\n\n  const toggleIsSecondaryMenuOpen = useCallback(\n    () => setIsSecondaryMenuOpen((isSecondaryMenuOpen) => !isSecondaryMenuOpen),\n    [],\n  );\n\n  const handleSearchResultsDismiss = useCallback(() => {\n    setIsSearchActive(false);\n    setSearchValue('');\n  }, []);\n\n  const handleSearchChange = useCallback((value: string) => {\n    setSearchValue(value);\n    setIsSearchActive(value.length > 0);\n  }, []);\n\n  const handleNavigationToggle = useCallback(() => {\n    console.log('toggle navigation visibility');\n  }, []);\n  const logo = {\n    topBarSource:\n      'https://cdn.shopify.com/s/files/1/2376/3301/files/Shopify_Secondary_Inverted.png',\n    width: 86,\n    url: '#',\n    accessibilityLabel: 'Shopify',\n  };\n\n  const userMenuMarkup = (\n    <TopBar.UserMenu\n      actions={[\n        {\n          items: [{content: 'Back to Shopify', icon: ArrowLeftMinor}],\n        },\n        {\n          items: [{content: 'Community forums'}],\n        },\n      ]}\n      name=\"Dharma\"\n      detail=\"Jaded Pixel\"\n      initials=\"D\"\n      open={isUserMenuOpen}\n      onToggle={toggleIsUserMenuOpen}\n    />\n  );\n\n  const searchResultsMarkup = (\n    <ActionList\n      items={[{content: 'Shopify help center'}, {content: 'Community forums'}]}\n    />\n  );\n\n  const searchFieldMarkup = (\n    <TopBar.SearchField\n      onChange={handleSearchChange}\n      value={searchValue}\n      placeholder=\"Search\"\n      showFocusBorder\n    />\n  );\n\n  const secondaryMenuMarkup = (\n    <TopBar.Menu\n      activatorContent={\n        <span>\n          <Icon source={QuestionMarkMajor} />\n          <Text as=\"span\" visuallyHidden>\n            Secondary menu\n          </Text>\n        </span>\n      }\n      open={isSecondaryMenuOpen}\n      onOpen={toggleIsSecondaryMenuOpen}\n      onClose={toggleIsSecondaryMenuOpen}\n      actions={[\n        {\n          items: [{content: 'Community forums'}],\n        },\n      ]}\n    />\n  );\n\n  const topBarMarkup = (\n    <TopBar\n      showNavigationToggle\n      userMenu={userMenuMarkup}\n      secondaryMenu={secondaryMenuMarkup}\n      searchResultsVisible={isSearchActive}\n      searchField={searchFieldMarkup}\n      searchResults={searchResultsMarkup}\n      onSearchResultsDismiss={handleSearchResultsDismiss}\n      onNavigationToggle={handleNavigationToggle}\n    />\n  );\n\n  return (\n    <div style={{height: '250px'}}>\n      <Frame topBar={topBarMarkup} logo={logo} />\n    </div>\n  );\n}\n\n"}],"seoDescription":"The top bar is a header component that allows merchants to search, access menus, and navigate by clicking on the logo. It’s always visible at the top of interfaces like Shopify or Shopify Plus. Third-party apps that use the top bar can customize the color to match their brand using the app provider component and are required to use their own logo.","type":{"TopBarProps":{"filePath":"polaris-react/src/components/TopBar/TopBar.tsx","name":"TopBarProps","description":"","members":[{"filePath":"polaris-react/src/components/TopBar/TopBar.tsx","syntaxKind":"PropertySignature","name":"showNavigationToggle","value":"boolean","description":"Toggles whether or not a navigation component has been provided. Controls the presence of the mobile nav toggle button","isOptional":true},{"filePath":"polaris-react/src/components/TopBar/TopBar.tsx","syntaxKind":"PropertySignature","name":"userMenu","value":"React.ReactNode","description":"Accepts a user component that is made available as a static member of the top bar component and renders as the primary menu","isOptional":true},{"filePath":"polaris-react/src/components/TopBar/TopBar.tsx","syntaxKind":"PropertySignature","name":"secondaryMenu","value":"React.ReactNode","description":"Accepts a menu component that is made available as a static member of the top bar component","isOptional":true},{"filePath":"polaris-react/src/components/TopBar/TopBar.tsx","syntaxKind":"PropertySignature","name":"contextControl","value":"React.ReactNode","description":"Accepts a component that is used to help users switch between different contexts","isOptional":true},{"filePath":"polaris-react/src/components/TopBar/TopBar.tsx","syntaxKind":"PropertySignature","name":"searchField","value":"React.ReactNode","description":"Accepts a search field component that is made available as a `TextField` static member of the top bar component","isOptional":true},{"filePath":"polaris-react/src/components/TopBar/TopBar.tsx","syntaxKind":"PropertySignature","name":"searchResults","value":"React.ReactNode","description":"Accepts a search results component that is ideally composed of a card component containing a list of actionable search results","isOptional":true},{"filePath":"polaris-react/src/components/TopBar/TopBar.tsx","syntaxKind":"PropertySignature","name":"searchResultsVisible","value":"boolean","description":"A boolean property indicating whether search results are currently visible.","isOptional":true},{"filePath":"polaris-react/src/components/TopBar/TopBar.tsx","syntaxKind":"PropertySignature","name":"searchResultsOverlayVisible","value":"boolean","description":"Whether or not the search results overlay has a visible backdrop","isOptional":true},{"filePath":"polaris-react/src/components/TopBar/TopBar.tsx","syntaxKind":"PropertySignature","name":"onSearchResultsDismiss","value":"() => void","description":"A callback function that handles the dismissal of search results","isOptional":true},{"filePath":"polaris-react/src/components/TopBar/TopBar.tsx","syntaxKind":"MethodSignature","name":"onNavigationToggle","value":"() => void","description":"A callback function that handles hiding and showing mobile navigation","isOptional":true},{"filePath":"polaris-react/src/components/TopBar/TopBar.tsx","syntaxKind":"PropertySignature","name":"logoSuffix","value":"React.ReactNode","description":"Accepts a component that is used to supplement the logo markup","isOptional":true}],"value":"export interface TopBarProps {\n  /** Toggles whether or not a navigation component has been provided. Controls the presence of the mobile nav toggle button */\n  showNavigationToggle?: boolean;\n  /** Accepts a user component that is made available as a static member of the top bar component and renders as the primary menu */\n  userMenu?: React.ReactNode;\n  /** Accepts a menu component that is made available as a static member of the top bar component */\n  secondaryMenu?: React.ReactNode;\n  /** Accepts a component that is used to help users switch between different contexts */\n  contextControl?: React.ReactNode;\n  /** Accepts a search field component that is made available as a `TextField` static member of the top bar component */\n  searchField?: React.ReactNode;\n  /** Accepts a search results component that is ideally composed of a card component containing a list of actionable search results */\n  searchResults?: React.ReactNode;\n  /** A boolean property indicating whether search results are currently visible. */\n  searchResultsVisible?: boolean;\n  /** Whether or not the search results overlay has a visible backdrop */\n  searchResultsOverlayVisible?: boolean;\n  /** A callback function that handles the dismissal of search results */\n  onSearchResultsDismiss?: SearchProps['onDismiss'];\n  /** A callback function that handles hiding and showing mobile navigation */\n  onNavigationToggle?(): void;\n  /** Accepts a component that is used to supplement the logo markup */\n  logoSuffix?: React.ReactNode;\n}"}},"editPageLinkPath":"polaris.shopify.com/content/components/navigation/top-bar.mdx"},"__N_SSG":true}