{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    hr: \"hr\",\n    h3: \"h3\",\n    h4: \"h4\",\n    a: \"a\"\n  }, _provideComponents(), props.components), {Lede, Examples, Props, DoDont} = _components;\n  if (!DoDont) _missingMdxReference(\"DoDont\", true);\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"Badges are used to inform merchants of the tone of an object or of an action that’s been taken.\"\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Badges benefit merchants by:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Using established color patterns so that merchants can quickly identify their tone or importance level\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Being clearly labeled with short, scannable text\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Being positioned to clearly identify the object they’re informing or labelling\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"content-guidelines\",\n      children: \"Content guidelines\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"badge-label\",\n      children: \"Badge label\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Badge labels should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Use a single word to describe the tone of an object.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Only use two words if you need to describe a complex state. For example, “Partially refunded” and “Partially fulfilled”.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Always describe the tone in the past tense. For example, refunded not refund.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The available badges for financial tone are:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Authorized\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Pending\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Paid\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Unpaid\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Pending\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Voided\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Partially paid\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Partially refunded\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Refunded\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The available badges for fulfillment tone are:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Fulfilled\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Complete\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Partial\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Unfulfilled\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Restocked\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"dont\",\n        children: \"Don’t\"\n      }), _jsx(_components.p, {\n        children: \"Don’t use alternatives to existing badge options. Only create a new badge option if there aren’t any existing options to communicate the tone you need.\"\n      })]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"related-components\",\n      children: \"Related components\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"To represent an interactive list of categories provided by merchants, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/tag\",\n          children: \"use tags\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"accessibility\",\n      children: \"Accessibility\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Badges that convey information with icons or color include text provided by the \", _jsx(_components.a, {\n        href: \"https://polaris.shopify.com/components/visually-hidden#navigation\",\n        children: \"visually hidden component\"\n      }), \". This text is read out by assistive technologies like screen readers so that merchants with vision issues can access the meaning of the badge in context.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Badge","shortDescription":"Used to inform merchants of the tone of an object or an action taken.","category":"Feedback indicators","keywords":["pills","tone indicators","color-coded indicators","informational badge","success badge","attention badge","warning badge","critical badge","object tone","tone","alert"],"examples":[{"fileName":"badge-default.tsx","title":"Default","description":"Use to give a non-critical tone update on a piece of information or action."},{"fileName":"badge-small.tsx","title":"Small","description":"Use in layouts with minimal space, like inside of an `IndexTable` cell."},{"fileName":"badge-informational.tsx","title":"Informational","description":"Use to call out an object or action as having an important attribute. For example, marking an option as “Recommended” or marking a theme as “Published”."},{"fileName":"badge-success.tsx","title":"Success","description":"Use to indicate a successful, completed, or desirable state when it’s important to provide positive reinforcement to merchants. For example, when merchants successfully dispute a chargeback, a success badge shows that says “Funds recovered”."},{"fileName":"badge-attention.tsx","title":"Attention","description":"Use when something requires merchants’ attention but the issue isn’t critical. For example, this badge would show next to an order that needs to be reviewed by merchants."},{"fileName":"badge-warning.tsx","title":"Warning","description":"Use for warnings and time-sensitive issues that require merchants’ attention and potential action. Warning events are often reversible. Keep in mind that seeing this badge can feel stressful for merchants so it should only be used when absolutely necessary."},{"fileName":"badge-critical.tsx","title":"Critical","description":"Use for critical and irreversible issues that require merchants’ attention and potential action. Keep in mind that seeing this badge can feel stressful for merchants so it should only be used when absolutely necessary."},{"fileName":"badge-incomplete.tsx","title":"Incomplete","description":"Use to indicate when a given task has not yet been completed. For example, when merchants haven’t fulfilled an order."},{"fileName":"badge-partially-complete.tsx","title":"Partially complete","description":"Use to indicate when a given task has been partially completed. For example, when merchants have partially fulfilled an order."},{"fileName":"badge-complete.tsx","title":"Complete","description":"Use to indicate when a given task has been completed. For example, when merchants have fulfilled an order."},{"fileName":"badge-with-tone-and-progress-label-override.tsx","title":"With toneAndProgressLabelOverride","description":"Use when the tone and progress accessibilityLabels are not appropriate to a given context."}],"previewImg":"/images/components/feedback-indicators/badge.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"badge-default.tsx","title":"Default","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to give a non-critical tone update on a piece of information or action.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Badge, Card} from '@shopify/polaris';\nimport React from 'react';\n\nfunction BadgeExample() {\n  return (\n    <Card>\n      <Badge>Fulfilled</Badge>\n    </Card>\n  );\n}\n\n"},{"fileName":"badge-small.tsx","title":"Small","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_components.p, {\n    children: [\"Use in layouts with minimal space, like inside of an \", _jsx(_components.code, {\n      children: \"IndexTable\"\n    }), \" cell.\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Badge, Card} from '@shopify/polaris';\nimport React from 'react';\n\nfunction BadgeExample() {\n  return (\n    <Card>\n      <Badge size=\"small\">Fulfilled</Badge>\n    </Card>\n  );\n}\n\n"},{"fileName":"badge-informational.tsx","title":"Informational","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to call out an object or action as having an important attribute. For example, marking an option as “Recommended” or marking a theme as “Published”.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Badge, Card} from '@shopify/polaris';\nimport React from 'react';\n\nfunction BadgeExample() {\n  return (\n    <Card>\n      <Badge tone=\"info\">Draft</Badge>\n    </Card>\n  );\n}\n\n"},{"fileName":"badge-success.tsx","title":"Success","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to indicate a successful, completed, or desirable state when it’s important to provide positive reinforcement to merchants. For example, when merchants successfully dispute a chargeback, a success badge shows that says “Funds recovered”.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Badge, Card} from '@shopify/polaris';\nimport React from 'react';\n\nfunction BadgeExample() {\n  return (\n    <Card>\n      <Badge tone=\"success\">Active</Badge>\n    </Card>\n  );\n}\n\n"},{"fileName":"badge-attention.tsx","title":"Attention","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when something requires merchants’ attention but the issue isn’t critical. For example, this badge would show next to an order that needs to be reviewed by merchants.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Badge, Card} from '@shopify/polaris';\nimport React from 'react';\n\nfunction BadgeExample() {\n  return (\n    <Card>\n      <Badge tone=\"attention\">Open</Badge>\n    </Card>\n  );\n}\n\n"},{"fileName":"badge-warning.tsx","title":"Warning","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use for warnings and time-sensitive issues that require merchants’ attention and potential action. Warning events are often reversible. Keep in mind that seeing this badge can feel stressful for merchants so it should only be used when absolutely necessary.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Badge, Card} from '@shopify/polaris';\nimport React from 'react';\n\nfunction BadgeExample() {\n  return (\n    <Card>\n      <Badge tone=\"warning\">On hold</Badge>\n    </Card>\n  );\n}\n\n"},{"fileName":"badge-critical.tsx","title":"Critical","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use for critical and irreversible issues that require merchants’ attention and potential action. Keep in mind that seeing this badge can feel stressful for merchants so it should only be used when absolutely necessary.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Badge, Card} from '@shopify/polaris';\nimport React from 'react';\n\nfunction BadgeExample() {\n  return (\n    <Card>\n      <Badge tone=\"critical\">Action required</Badge>\n    </Card>\n  );\n}\n\n"},{"fileName":"badge-incomplete.tsx","title":"Incomplete","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to indicate when a given task has not yet been completed. For example, when merchants haven’t fulfilled an order.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Badge, Card} from '@shopify/polaris';\nimport React from 'react';\n\nfunction BadgeExample() {\n  return (\n    <Card>\n      <Badge progress=\"incomplete\" tone=\"attention\">\n        Unfulfilled\n      </Badge>\n    </Card>\n  );\n}\n\n"},{"fileName":"badge-partially-complete.tsx","title":"Partially complete","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to indicate when a given task has been partially completed. For example, when merchants have partially fulfilled an order.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Badge, Card} from '@shopify/polaris';\nimport React from 'react';\n\nfunction BadgeExample() {\n  return (\n    <Card>\n      <Badge progress=\"partiallyComplete\" tone=\"warning\">\n        Partially fulfilled\n      </Badge>\n    </Card>\n  );\n}\n\n"},{"fileName":"badge-complete.tsx","title":"Complete","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to indicate when a given task has been completed. For example, when merchants have fulfilled an order.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Badge, Card} from '@shopify/polaris';\nimport React from 'react';\n\nfunction BadgeExample() {\n  return (\n    <Card>\n      <Badge progress=\"complete\">Fulfilled</Badge>\n    </Card>\n  );\n}\n\n"},{"fileName":"badge-with-tone-and-progress-label-override.tsx","title":"With toneAndProgressLabelOverride","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use when the tone and progress accessibilityLabels are not appropriate to a given context.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Badge, Card} from '@shopify/polaris';\nimport React from 'react';\n\nfunction BadgeExample() {\n  return (\n    <Card>\n      <Badge\n        tone=\"success\"\n        progress=\"complete\"\n        toneAndProgressLabelOverride=\"Status: Published. Your online store is visible.\"\n      >\n        Published\n      </Badge>\n    </Card>\n  );\n}\n\n"}],"seoDescription":"Badges are used to inform merchants of the tone of an object or of an action that’s been taken.","type":{"BadgeProps":{"filePath":"polaris-react/src/components/Badge/Badge.tsx","syntaxKind":"TypeAliasDeclaration","name":"BadgeProps","value":"NonMutuallyExclusiveProps & (\n    | {progress?: Progress; icon?: undefined}\n    | {icon?: IconSource; progress?: undefined}\n  )","description":""},"NonMutuallyExclusiveProps":{"filePath":"polaris-react/src/components/Badge/Badge.tsx","name":"NonMutuallyExclusiveProps","description":"","members":[{"filePath":"polaris-react/src/components/Badge/Badge.tsx","syntaxKind":"PropertySignature","name":"children","value":"string","description":"The content to display inside the badge.","isOptional":true},{"filePath":"polaris-react/src/components/Badge/Badge.tsx","syntaxKind":"PropertySignature","name":"tone","value":"Tone","description":"Colors and labels the badge with the given tone.","isOptional":true},{"filePath":"polaris-react/src/components/Badge/Badge.tsx","syntaxKind":"PropertySignature","name":"progress","value":"Progress","description":"Render a pip showing the progress of a given task.","isOptional":true},{"filePath":"polaris-react/src/components/Badge/Badge.tsx","syntaxKind":"PropertySignature","name":"icon","value":"any","description":"Icon to display to the left of the badge’s content.","isOptional":true},{"filePath":"polaris-react/src/components/Badge/Badge.tsx","syntaxKind":"PropertySignature","name":"size","value":"Size","description":"","isOptional":true,"defaultValue":"'medium'"},{"filePath":"polaris-react/src/components/Badge/Badge.tsx","syntaxKind":"PropertySignature","name":"toneAndProgressLabelOverride","value":"string","description":"Pass a custom accessibilityLabel","isOptional":true}],"value":"interface NonMutuallyExclusiveProps {\n  /** The content to display inside the badge. */\n  children?: string;\n  /** Colors and labels the badge with the given tone. */\n  tone?: Tone;\n  /** Render a pip showing the progress of a given task. */\n  progress?: Progress;\n  /** Icon to display to the left of the badge’s content. */\n  icon?: IconSource;\n  /**\n   * @default 'medium'\n   */\n  size?: Size;\n  /** Pass a custom accessibilityLabel */\n  toneAndProgressLabelOverride?: string;\n}"},"Progress":{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/components/Badge/types.ts","syntaxKind":"TypeAliasDeclaration","name":"Progress","value":"'incomplete' | 'partiallyComplete' | 'complete'","description":""},"IconSource":{"filePath":"Users/yqtrack/Desktop/shopify-polaris/polaris-main/polaris-react/src/types.ts","syntaxKind":"TypeAliasDeclaration","name":"IconSource","value":"React.FunctionComponent<React.SVGProps<SVGSVGElement>> | 'placeholder' | string","description":""}},"editPageLinkPath":"polaris.shopify.com/content/components/feedback-indicators/badge.mdx"},"__N_SSG":true}