{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    hr: \"hr\",\n    h4: \"h4\",\n    img: \"img\",\n    a: \"a\"\n  }, _provideComponents(), props.components), {Lede, Examples, Props, DoDont} = _components;\n  if (!DoDont) _missingMdxReference(\"DoDont\", true);\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"Skeleton page is used with other skeleton loading components to provide a low fidelity representation of the user interface (UI) before content appears on the page. It improves load times perceived by merchants.\"\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Skeleton page component should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Be used for pages where all content loads at the same time.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Give merchants an indication of what the page layout will be once loaded. Do this by mimicking its layout similarly to the state that will be loaded.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"content-guidelines\",\n      children: \"Content guidelines\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Show page titles that never change for a page. For example, keep the title “Products” on the product list page, but use skeleton loading for titles that change on the product details page. Don’t use placeholder content for titles that will change when the page fully loads.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Secondary actions are always represented with skeleton content. You can change the number of skeleton actions that best represent the number of actions once loaded.\"\n    }), \"\\n\", _jsxs(DoDont, {\n      children: [_jsx(_components.h4, {\n        id: \"do\",\n        children: \"Do\"\n      }), _jsx(_components.p, {\n        children: \"Use skeleton loading for dynamic content, and use actual content for content that doesn’t change.\"\n      }), _jsx(_components.img, {\n        src: \"/images/components/feedback-indicators/skeleton-page/do-use-skeleton-for-changing-content@2x.png\",\n        alt: \"Image showing skeleton loading for changing content\"\n      }), _jsx(_components.h4, {\n        id: \"dont\",\n        children: \"Don’t\"\n      }), _jsx(_components.p, {\n        children: \"Use placeholder content that will change when the page fully loads. This will confuse merchants and create a jumpy loading experience.\"\n      }), _jsx(_components.img, {\n        src: \"/images/components/feedback-indicators/skeleton-page/dont-use-placeholder-content-that-will-change@2x.png\",\n        alt: \"Image showing placeholder content that will change\"\n      })]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"related-components\",\n      children: \"Related components\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Use the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/feedback-indicators/skeleton-body-text\",\n          children: \"Skeleton body text\"\n        }), \" and \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/skeleton-display-text\",\n          children: \"Skeleton display text\"\n        }), \" components to represent blocks of content.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"When giving feedback for in-context operations, use \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/progress-bar\",\n          children: \"Progress bar\"\n        }), \" or \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/spinner\",\n          children: \"Spinner\"\n        }), \" component.\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Skeleton page","shortDescription":"Used with other skeleton loading components to provide a low fidelity representation of the UI before content appears.","category":"Feedback indicators","releasedIn":"1.7.0","keywords":["SkeletonPage","skeleton","loading","page"],"examples":[{"fileName":"skeleton-page-with-dynamic-content.tsx","title":"With dynamic content","description":"Use this component to compose a loading version of a page where the page title and header content are dynamic, meaning, the content changes."},{"fileName":"skeleton-page-with-static-content.tsx","title":"With static content","description":"Use this component to compose a loading version of a page where the page title and header content are known and stay the same."}],"previewImg":"/images/components/feedback-indicators/skeleton-page.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"skeleton-page-with-dynamic-content.tsx","title":"With dynamic content","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use this component to compose a loading version of a page where the page title and header content are dynamic, meaning, the content changes.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  SkeletonPage,\n  Layout,\n  LegacyCard,\n  SkeletonBodyText,\n  TextContainer,\n  SkeletonDisplayText,\n} from '@shopify/polaris';\nimport React from 'react';\n\nfunction SkeletonExample() {\n  return (\n    <SkeletonPage primaryAction>\n      <Layout>\n        <Layout.Section>\n          <LegacyCard sectioned>\n            <SkeletonBodyText />\n          </LegacyCard>\n          <LegacyCard sectioned>\n            <TextContainer>\n              <SkeletonDisplayText size=\"small\" />\n              <SkeletonBodyText />\n            </TextContainer>\n          </LegacyCard>\n          <LegacyCard sectioned>\n            <TextContainer>\n              <SkeletonDisplayText size=\"small\" />\n              <SkeletonBodyText />\n            </TextContainer>\n          </LegacyCard>\n        </Layout.Section>\n        <Layout.Section variant=\"oneThird\">\n          <LegacyCard>\n            <LegacyCard.Section>\n              <TextContainer>\n                <SkeletonDisplayText size=\"small\" />\n                <SkeletonBodyText lines={2} />\n              </TextContainer>\n            </LegacyCard.Section>\n            <LegacyCard.Section>\n              <SkeletonBodyText lines={1} />\n            </LegacyCard.Section>\n          </LegacyCard>\n          <LegacyCard subdued>\n            <LegacyCard.Section>\n              <TextContainer>\n                <SkeletonDisplayText size=\"small\" />\n                <SkeletonBodyText lines={2} />\n              </TextContainer>\n            </LegacyCard.Section>\n            <LegacyCard.Section>\n              <SkeletonBodyText lines={2} />\n            </LegacyCard.Section>\n          </LegacyCard>\n        </Layout.Section>\n      </Layout>\n    </SkeletonPage>\n  );\n}\n\n"},{"fileName":"skeleton-page-with-static-content.tsx","title":"With static content","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use this component to compose a loading version of a page where the page title and header content are known and stay the same.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  SkeletonPage,\n  Layout,\n  LegacyCard,\n  SkeletonBodyText,\n} from '@shopify/polaris';\nimport React from 'react';\n\nfunction SkeletonExample() {\n  return (\n    <SkeletonPage title=\"Products\" primaryAction>\n      <Layout>\n        <Layout.Section>\n          <LegacyCard sectioned>\n            <SkeletonBodyText />\n          </LegacyCard>\n          <LegacyCard sectioned title=\"Images\">\n            <SkeletonBodyText />\n          </LegacyCard>\n          <LegacyCard sectioned title=\"Variants\">\n            <SkeletonBodyText />\n          </LegacyCard>\n        </Layout.Section>\n        <Layout.Section variant=\"oneThird\">\n          <LegacyCard title=\"Sales channels\">\n            <LegacyCard.Section>\n              <SkeletonBodyText lines={2} />\n            </LegacyCard.Section>\n            <LegacyCard.Section>\n              <SkeletonBodyText lines={1} />\n            </LegacyCard.Section>\n          </LegacyCard>\n          <LegacyCard title=\"Organization\" subdued>\n            <LegacyCard.Section>\n              <SkeletonBodyText lines={2} />\n            </LegacyCard.Section>\n            <LegacyCard.Section>\n              <SkeletonBodyText lines={2} />\n            </LegacyCard.Section>\n          </LegacyCard>\n        </Layout.Section>\n      </Layout>\n    </SkeletonPage>\n  );\n}\n\n"}],"seoDescription":"Skeleton page is used with other skeleton loading components to provide a low fidelity representation of the user interface (UI) before content appears on the page. It improves load times perceived by merchants.","type":{"SkeletonPageProps":{"filePath":"polaris-react/src/components/SkeletonPage/SkeletonPage.tsx","name":"SkeletonPageProps","description":"","members":[{"filePath":"polaris-react/src/components/SkeletonPage/SkeletonPage.tsx","syntaxKind":"PropertySignature","name":"title","value":"string","description":"Page title, in large type","isOptional":true},{"filePath":"polaris-react/src/components/SkeletonPage/SkeletonPage.tsx","syntaxKind":"PropertySignature","name":"fullWidth","value":"boolean","description":"Remove the normal max-width on the page","isOptional":true},{"filePath":"polaris-react/src/components/SkeletonPage/SkeletonPage.tsx","syntaxKind":"PropertySignature","name":"narrowWidth","value":"boolean","description":"Decreases the maximum layout width. Intended for single-column layouts","isOptional":true},{"filePath":"polaris-react/src/components/SkeletonPage/SkeletonPage.tsx","syntaxKind":"PropertySignature","name":"primaryAction","value":"boolean","description":"Shows a skeleton over the primary action","isOptional":true},{"filePath":"polaris-react/src/components/SkeletonPage/SkeletonPage.tsx","syntaxKind":"PropertySignature","name":"backAction","value":"boolean","description":"Shows a skeleton over the backAction","isOptional":true},{"filePath":"polaris-react/src/components/SkeletonPage/SkeletonPage.tsx","syntaxKind":"PropertySignature","name":"children","value":"React.ReactNode","description":"The child elements to render in the skeleton page.","isOptional":true}],"value":"export interface SkeletonPageProps {\n  /** Page title, in large type */\n  title?: string;\n  /** Remove the normal max-width on the page */\n  fullWidth?: boolean;\n  /** Decreases the maximum layout width. Intended for single-column layouts */\n  narrowWidth?: boolean;\n  /** Shows a skeleton over the primary action */\n  primaryAction?: boolean;\n  /** Shows a skeleton over the backAction */\n  backAction?: boolean;\n  /** The child elements to render in the skeleton page. */\n  children?: React.ReactNode;\n}"}},"editPageLinkPath":"polaris.shopify.com/content/components/feedback-indicators/skeleton-page.mdx"},"__N_SSG":true}