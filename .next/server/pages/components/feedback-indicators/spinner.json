{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    code: \"code\",\n    hr: \"hr\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    a: \"a\"\n  }, _provideComponents(), props.components), {Lede, Examples, Props} = _components;\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"Spinners are used to notify merchants that their action is being processed. For loading states, spinners should only be used for content that can’t be represented with skeleton loading components, like for data charts.\"\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"accessibility\",\n      children: \"Accessibility\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"SVGs are often conveyed inconsistently to assistive technologies. The \", _jsx(_components.code, {\n        children: \"Spinner\"\n      }), \" component’s accessibility is also highly contextual. When the parent component is focusable, you’ll need to set the \", _jsx(_components.code, {\n        children: \"hasFocusableParent\"\n      }), \" prop for the appropriate \", _jsx(_components.code, {\n        children: \"role\"\n      }), \" attribute to be applied.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For optimal user experience, use the \", _jsx(_components.code, {\n        children: \"accessibilityLabel\"\n      }), \" prop to let assistive technology users know the purpose of the spinner.\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The spinner component should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Notify merchants that their request has been received and the action will soon complete.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Not be used to give feedback for an entire page load.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"White can only be used with small spinners on actionable components like buttons.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"On web, be used in conjunction with skeleton loading to represent non-typographic content. For example, line graphs on the Merchant analytics dashboard.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"content-guidelines\",\n      children: \"Content guidelines\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"accessibility-label\",\n      children: \"Accessibility label\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Spinner accessibility label should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Accurately explain the state of the requested action. For example, “Loading”, “Submitting”, “Processing”.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Use as few words to describe the state as possible.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"related-components\",\n      children: \"Related components\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"To improve user experience and reduce the appearance of long loading times, use the \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/progress-bar\",\n          children: \"Progress bar\"\n        }), \" component.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To better represent loading content, use \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/skeleton-page\",\n          children: \"Skeleton page\"\n        }), \" along with \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/feedback-indicators/skeleton-body-text\",\n          children: \"Skeleton body text\"\n        }), \" and \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/skeleton-display-text\",\n          children: \"Skeleton display text\"\n        }), \" components.\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Spinner","shortDescription":"Used to notify merchants that their action is being processed. Used for content that can’t be represented with skeleton loading components.","category":"Feedback indicators","releasedIn":"1.7.0","keywords":["spinner","loader","loading","progress indicator"],"examples":[{"fileName":"spinner-default.tsx","title":"Default","description":"Use to notify merchants that their requested action is being processed."},{"fileName":"spinner-small.tsx","title":"Small","description":"Smaller than the default spinner."},{"fileName":"spinner-with-focus-management.tsx","title":"With focus management","description":"Use to direct the focus state from the control to the spinner, to the content."}],"previewImg":"/images/components/feedback-indicators/spinner.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"spinner-default.tsx","title":"Default","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to notify merchants that their requested action is being processed.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Spinner} from '@shopify/polaris';\nimport React from 'react';\n\nfunction SpinnerExample() {\n  return <Spinner accessibilityLabel=\"Spinner example\" size=\"large\" />;\n}\n\n"},{"fileName":"spinner-small.tsx","title":"Small","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Smaller than the default spinner.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {Spinner} from '@shopify/polaris';\nimport React from 'react';\n\nfunction SpinnerExample() {\n  return <Spinner accessibilityLabel=\"Small spinner example\" size=\"small\" />;\n}\n\n"},{"fileName":"spinner-with-focus-management.tsx","title":"With focus management","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Use to direct the focus state from the control to the spinner, to the content.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import {\n  Spinner,\n  Form,\n  FormLayout,\n  TextField,\n  Button,\n  LegacyCard,\n  Tabs,\n} from '@shopify/polaris';\nimport {useState, useEffect, useCallback, useRef} from 'react';\n\nfunction SpinnerWithFocusManagement() {\n  const tabs = useRef([\n    {\n      id: 'all-customers',\n      content: 'All',\n      accessibilityLabel: 'All customers',\n      panelID: 'all-customers-content',\n    },\n    {\n      id: 'accepts-marketing',\n      content: 'Accepts marketing',\n      panelID: 'accepts-marketing-content',\n    },\n  ]);\n\n  const [selected, setSelected] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [value, setValue] = useState('');\n  const [textFieldFocused, setTextFieldFocused] = useState(false);\n\n  useEffect(() => {\n    setTextFieldFocused(!loading);\n  }, [loading]);\n\n  const handleTabChange = useCallback((selectedTab: number) => {\n    setLoading(true);\n    setSelected(selectedTab);\n    setTimeout(() => {\n      setValue('');\n      return setLoading(false);\n    }, 1500);\n  }, []);\n\n  const handleUrlChange = useCallback((value: string) => setValue(value), []);\n\n  const handleSubmit = useCallback(() => setValue(''), []);\n\n  const label = selected ? 'Marketing' : 'Customers';\n  const sectionMarkup = loading ? (\n    <Spinner\n      accessibilityLabel=\"Loading form field\"\n      hasFocusableParent={false}\n    />\n  ) : (\n    <Form noValidate onSubmit={handleSubmit}>\n      <FormLayout>\n        <TextField\n          value={value}\n          focused={textFieldFocused}\n          onChange={handleUrlChange}\n          label={label}\n          autoComplete=\"off\"\n        />\n        <Button submit>Submit</Button>\n      </FormLayout>\n    </Form>\n  );\n\n  return (\n    <LegacyCard>\n      <Tabs tabs={tabs.current} selected={selected} onSelect={handleTabChange}>\n        <LegacyCard.Section title={tabs.current[selected].content}>\n          {sectionMarkup}\n        </LegacyCard.Section>\n      </Tabs>\n    </LegacyCard>\n  );\n}\n\n"}],"seoDescription":"Spinners are used to notify merchants that their action is being processed. For loading states, spinners should only be used for content that can’t be represented with skeleton loading components, like for data charts.","type":{"SpinnerProps":{"filePath":"polaris-react/src/components/Spinner/Spinner.tsx","name":"SpinnerProps","description":"","members":[{"filePath":"polaris-react/src/components/Spinner/Spinner.tsx","syntaxKind":"PropertySignature","name":"size","value":"Size","description":"Size of spinner","isOptional":true,"defaultValue":"'large'"},{"filePath":"polaris-react/src/components/Spinner/Spinner.tsx","syntaxKind":"PropertySignature","name":"accessibilityLabel","value":"string","description":"Accessible label for the spinner","isOptional":true},{"filePath":"polaris-react/src/components/Spinner/Spinner.tsx","syntaxKind":"PropertySignature","name":"hasFocusableParent","value":"boolean","description":"Allows the component to apply the correct accessibility roles based on focus","isOptional":true}],"value":"export interface SpinnerProps {\n  /**\n   * Size of spinner\n   * @default 'large'\n   */\n  size?: Size;\n  /** Accessible label for the spinner */\n  accessibilityLabel?: string;\n  /** Allows the component to apply the correct accessibility roles based on focus */\n  hasFocusableParent?: boolean;\n}"},"Size":{"filePath":"polaris-react/src/components/Spinner/Spinner.tsx","syntaxKind":"TypeAliasDeclaration","name":"Size","value":"'small' | 'large'","description":""}},"editPageLinkPath":"polaris.shopify.com/content/components/feedback-indicators/spinner.mdx"},"__N_SSG":true}