{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\"\n  }, _provideComponents(), props.components), {Lede, RichCardGrid} = _components;\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!RichCardGrid) _missingMdxReference(\"RichCardGrid\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"Utilities are core tools for managing the structure of the admin and global settings.\"\n      })\n    }), \"\\n\", _jsx(RichCardGrid, {\n      cards: posts\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Utilities","expanded":true,"order":11,"previewImg":"/images/components/utilities.png"},"scope":{"posts":[{"url":"/components/utilities/app-provider","description":"App provider is a required component that enables sharing global settings throughout the hierarchy of your application.","title":"App provider","category":"Utilities","keywords":["app","provider","appprovider","internationalization","i18n","localization","context","translate","translation","application wrapper","wrapper","sdk"],"examples":[{"fileName":"app-provider-default.tsx","title":"Default","description":"AppProvider works by default without any additional options passed to it."},{"fileName":"app-provider-with-i18n.tsx","title":"With i18n","description":"With an `i18n`, `AppProvider` will provide these translations to polaris components. See [using translations](https://polaris.shopify.com/components/app-provider#using-translations)"},{"fileName":"app-provider-with-link-component.tsx","title":"With linkComponent","description":"With a `linkComponent`, the app provider component will override the links used in other components. For example you may want to use the `Link` component provided by `react-router` throughout your application instead of the default `a` tag."}],"previewImg":"/images/components/utilities/app-provider.png","order":1000},{"url":"/components/utilities/collapsible","description":"The collapsible component is used to put long sections of information under a block that merchants can expand or collapse.","title":"Collapsible","shortDescription":"Hides content and allows merchants to expand it. Used to hide optional settings, information, and actions.","category":"Utilities","keywords":["hide","show","low priority","less important","disclosure","accordion","accordian","expand content","toggle","toggleable","reveal","show more","show all button","show hide","expanding view","collapse"],"examples":[{"fileName":"collapsible-default.tsx","title":"Default","description":"Use for a basic “show more” interaction when you need to display more content."}],"previewImg":"/images/components/utilities/collapsible.png","order":1000},{"url":"/components/utilities/frame","description":"The frame component, while not visible in the user interface itself, provides the structure for an application. It wraps the main elements and houses the primary navigation, top bar, toast, and contextual save bar components.","title":"Frame","shortDescription":"Creates the structure of the Shopify admin. All of the main sections of the admin are nested in the frame.","category":"Utilities","keywords":["navigation","nav","links","primary navigation","main navigation","global","frame","sidebar","side bar","loading","top bar","menu","toast"],"examples":[{"fileName":"frame-in-an-application.tsx","title":"In an application","description":"Use to present the frame structure and all of its elements."},{"fileName":"frame-with-an-offset.tsx","title":"With an offset","description":"Use to present the frame structure and all of its elements with an offset provided to the theme."}],"previewImg":"/images/components/utilities/frame.png","order":1000},{"url":"/components/utilities/scrollable","description":"The scrollable component is a container for long form content, such as terms of service, that allows for scrolling so merchants can expose more text as they read.","title":"Scrollable","shortDescription":"Used in components with too much content for the available vertical space. Embeds long-form content in components like modals and popovers.","category":"Utilities","keywords":["long form","text container","terms of service","long form container","scrolling","independently scrollable","modal scrolling","pane scrolling","scrolling in panes","below the fold","above the fold"],"examples":[{"fileName":"scrollable-default.tsx","title":"Default","description":"Use when you need to make a region within the page independently scrollable. It’s often used in modals and other panes where it’s helpful to provide an extra visual cue that content exists below or above the fold."},{"fileName":"scrollable-to-child-component.tsx","title":"To child component","description":"Use when you need to programmatically scroll a child component into view in the scrollable container."}],"previewImg":"/images/components/utilities/scrollable.png","order":1000}],"__remarkNextMdxImporter":{}}},"seoDescription":"Utilities are core tools for managing the structure of the admin and global settings.","editPageLinkPath":"/polaris.shopify.com/content/components/utilities/index.mdx","isContentPage":false,"showTOC":false,"collapsibleTOC":false},"__N_SSG":true}