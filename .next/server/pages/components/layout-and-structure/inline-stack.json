{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    code: \"code\"\n  }, _provideComponents(), props.components), {Lede, Examples, Props} = _components;\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"Use to display children horizontally in a row. Based on CSS Flexbox.\"\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"related-components\",\n      children: \"Related components\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"To create the large-scale structure of pages, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/layout-and-structure/inline-grid\",\n          children: \"use the InlineGrid component\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To display elements vertically, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/layout-and-structure/block-stack\",\n          children: \"use the BlockStack component\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"related-resources\",\n      children: \"Related resources\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"InlineStack props are named following the convention of CSS logical properties, such as \", _jsx(_components.code, {\n          children: \"align=\\\"start\\\"\"\n        }), \" vs. \", _jsx(_components.code, {\n          children: \"align=\\\"left\\\"\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"blockAlign=\\\"end\\\"\"\n        }), \" vs. \", _jsx(_components.code, {\n          children: \"verticalAlign=\\\"bottom\\\"\"\n        }), \". Learn more about \", _jsx(_components.a, {\n          href: \"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties\",\n          children: \"CSS logicial properties\"\n        }), \".\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Inline stack","category":"Layout and structure","keywords":["layout","inline","flexbox","flex","responsive","flexible items","row of components","rows","vertical centering","horizontal row of components","stack"],"examples":[{"fileName":"inline-stack-with-non-wrapping.tsx","title":"Non-wrapping","description":"The default wrapping behavior of children can be overridden using the `wrap` prop."},{"fileName":"inline-stack-with-gap.tsx","title":"Gap","description":"Control the horizontal and vertical space between children using the `gap` prop. The `gap` prop supports responsive spacing with the [Breakpoints tokens](https://polaris.shopify.com/tokens/breakpoints)."},{"fileName":"inline-stack-with-block-align.tsx","title":"Block align","description":"Control the vertical alignment of children using the `blockAlign` prop."},{"fileName":"inline-stack-with-align.tsx","title":"Align","description":"Control the horizontal alignment of children using the `align` prop."}],"previewImg":"/images/components/layout-and-structure/inline-stack.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"inline-stack-with-non-wrapping.tsx","title":"Non-wrapping","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_components.p, {\n    children: [\"The default wrapping behavior of children can be overridden using the \", _jsx(_components.code, {\n      children: \"wrap\"\n    }), \" prop.\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import React from 'react';\nimport {InlineStack} from '@shopify/polaris';\n\n\nfunction InlineWithNonWrappingExample() {\n  return (\n    <InlineStack wrap={false}>\n      <Placeholder width=\"106px\" height=\"36px\" />\n      <Placeholder width=\"106px\" height=\"20px\" showBorder />\n      <Placeholder width=\"106px\" height=\"20px\" showBorder />\n      <Placeholder width=\"106px\" height=\"20px\" showBorder />\n      <Placeholder width=\"106px\" height=\"20px\" showBorder />\n      <Placeholder width=\"106px\" height=\"20px\" showBorder />\n    </InlineStack>\n  );\n}\n\nconst Placeholder = ({height = 'auto', width = 'auto', showBorder = false}) => {\n  return (\n    <div\n      style={{\n        background: 'var(--p-color-text-info)',\n        height: height,\n        width: width,\n        borderInlineStart: showBorder\n          ? '1px dashed var(--p-color-bg-surface-success)'\n          : 'none',\n      }}\n    />\n  );\n};\n\n"},{"fileName":"inline-stack-with-gap.tsx","title":"Gap","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_components.p, {\n    children: [\"Control the horizontal and vertical space between children using the \", _jsx(_components.code, {\n      children: \"gap\"\n    }), \" prop. The \", _jsx(_components.code, {\n      children: \"gap\"\n    }), \" prop supports responsive spacing with the \", _jsx(_components.a, {\n      href: \"https://polaris.shopify.com/tokens/breakpoints\",\n      children: \"Breakpoints tokens\"\n    }), \".\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import React from 'react';\nimport {InlineStack, BlockStack} from '@shopify/polaris';\n\n\nfunction InlineWithGapExample() {\n  return (\n    <BlockStack>\n      <InlineStack>\n        <SpacingBackground width=\"436px\" height=\"20px\" margin>\n          <InlineStack gap=\"400\" wrap={false} blockAlign=\"center\">\n            <Placeholder width=\"106px\" height=\"36px\" />\n            <Placeholder width=\"106px\" height=\"20px\" />\n            <Placeholder width=\"106px\" height=\"20px\" />\n            <Placeholder width=\"106px\" height=\"20px\" />\n          </InlineStack>\n        </SpacingBackground>\n      </InlineStack>\n      <SpacingBackground width=\"227.98px\" height=\"40px\">\n        <InlineStack gap=\"400\" wrap={false} blockAlign=\"end\">\n          <Placeholder width=\"106px\" height=\"20px\" />\n          <Placeholder width=\"106px\" height=\"20px\" />\n        </InlineStack>\n      </SpacingBackground>\n    </BlockStack>\n  );\n}\n\nconst SpacingBackground = ({\n  children,\n  width,\n  height,\n  margin = false,\n}: {\n  children: React.ReactNode;\n  width: string;\n  height: string;\n  margin?: boolean;\n}) => {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        background: 'var(--p-color-bg-surface-success)',\n        width: width,\n        height: height,\n        marginBlockEnd: margin ? '8px' : 'none',\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\nconst Placeholder = ({height = 'auto', width = 'auto'}) => {\n  return (\n    <div\n      style={{\n        background: 'var(--p-color-text-info)',\n        height: height,\n        width: width,\n      }}\n    />\n  );\n};\n\n"},{"fileName":"inline-stack-with-block-align.tsx","title":"Block align","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_components.p, {\n    children: [\"Control the vertical alignment of children using the \", _jsx(_components.code, {\n      children: \"blockAlign\"\n    }), \" prop.\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import React from 'react';\nimport {InlineStack, Text, BlockStack, Divider} from '@shopify/polaris';\n\n\nfunction InlineWithBlockAlignExample() {\n  return (\n    <BlockStack gap=\"800\">\n      <InlineStack blockAlign=\"start\">\n        <Placeholder width=\"106px\" label=\"Start\" />\n        <Placeholder width=\"106px\" height=\"20px\" showBorder />\n        <Placeholder width=\"106px\" height=\"20px\" showBorder />\n        <Placeholder width=\"106px\" height=\"20px\" showBorder />\n        <Placeholder width=\"106px\" height=\"20px\" showBorder />\n        <Placeholder width=\"106px\" height=\"20px\" showBorder />\n      </InlineStack>\n      <Divider />\n      <InlineStack blockAlign=\"center\">\n        <Placeholder width=\"106px\" label=\"Center\" />\n        <Placeholder width=\"106px\" height=\"20px\" showBorder />\n        <Placeholder width=\"106px\" height=\"20px\" showBorder />\n        <Placeholder width=\"106px\" height=\"20px\" showBorder />\n        <Placeholder width=\"106px\" height=\"20px\" showBorder />\n        <Placeholder width=\"106px\" height=\"20px\" showBorder />\n      </InlineStack>\n      <Divider />\n      <InlineStack blockAlign=\"end\">\n        <Placeholder width=\"106px\" label=\"End\" />\n        <Placeholder width=\"106px\" height=\"20px\" showBorder />\n        <Placeholder width=\"106px\" height=\"20px\" showBorder />\n        <Placeholder width=\"106px\" height=\"20px\" showBorder />\n        <Placeholder width=\"106px\" height=\"20px\" showBorder />\n        <Placeholder width=\"106px\" height=\"20px\" showBorder />\n      </InlineStack>\n      <Divider />\n      <InlineStack blockAlign=\"baseline\">\n        <Placeholder width=\"106px\" label=\"Baseline\" />\n        <Placeholder width=\"106px\" padding=\"0\" label=\"text\" showBorder />\n        <Placeholder width=\"106px\" padding=\"0\" label=\"text\" showBorder />\n        <Placeholder width=\"106px\" padding=\"0\" label=\"text\" showBorder />\n        <Placeholder width=\"106px\" padding=\"0\" label=\"text\" showBorder />\n        <Placeholder width=\"106px\" padding=\"0\" label=\"text\" showBorder />\n      </InlineStack>\n      <Divider />\n      <InlineStack blockAlign=\"stretch\">\n        <Placeholder width=\"106px\" label=\"Stretch\" />\n        <Placeholder width=\"106px\" minHeight=\"20px\" showBorder />\n        <Placeholder width=\"106px\" minHeight=\"20px\" showBorder />\n        <Placeholder width=\"106px\" minHeight=\"20px\" showBorder />\n        <Placeholder width=\"106px\" minHeight=\"20px\" showBorder />\n        <Placeholder width=\"106px\" minHeight=\"20px\" showBorder />\n      </InlineStack>\n    </BlockStack>\n  );\n}\n\nconst Placeholder = ({\n  label = '',\n  height = 'auto',\n  width = 'auto',\n  minHeight = 'auto',\n  padding = '6px 0px',\n  showBorder = false,\n}) => {\n  return (\n    <div\n      style={{\n        padding: padding,\n        background: 'var(--p-color-text-info)',\n        height: height,\n        width: width,\n        minHeight: minHeight,\n        borderInlineStart: showBorder\n          ? '1px dashed var(--p-color-bg-surface-success)'\n          : 'none',\n      }}\n    >\n      <InlineStack align=\"center\">\n        <div\n          style={{\n            color: 'var(--p-color-text-info-on-bg-fill)',\n          }}\n        >\n          <Text as=\"h2\" variant=\"bodyMd\" fontWeight=\"medium\">\n            {label}\n          </Text>\n        </div>\n      </InlineStack>\n    </div>\n  );\n};\n\n"},{"fileName":"inline-stack-with-align.tsx","title":"Align","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_components.p, {\n    children: [\"Control the horizontal alignment of children using the \", _jsx(_components.code, {\n      children: \"align\"\n    }), \" prop.\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import React from 'react';\nimport {BlockStack, InlineStack, Text, Page, Divider} from '@shopify/polaris';\n\n\nfunction InlineWithAlignExample() {\n  return (\n    <Page narrowWidth>\n      <BlockStack gap=\"1600\">\n        <InlineStack align=\"start\">\n          <Placeholder width=\"106px\" label=\"Start\" />\n          <Placeholder width=\"106px\" height=\"20px\" showBorder />\n          <Placeholder width=\"106px\" height=\"20px\" showBorder />\n          <Placeholder width=\"106px\" height=\"20px\" showBorder />\n          <Placeholder width=\"106px\" height=\"20px\" showBorder />\n          <Placeholder width=\"106px\" height=\"20px\" showBorderTop />\n          <Placeholder width=\"106px\" height=\"20px\" showBorder />\n        </InlineStack>\n        <Divider />\n        <InlineStack align=\"center\">\n          <Placeholder width=\"106px\" label=\"Center\" />\n          <Placeholder width=\"106px\" height=\"20px\" showBorder />\n          <Placeholder width=\"106px\" height=\"20px\" showBorder />\n          <Placeholder width=\"106px\" height=\"20px\" showBorder />\n          <Placeholder width=\"106px\" height=\"20px\" showBorder />\n          <Placeholder width=\"106px\" height=\"20px\" />\n          <Placeholder width=\"106px\" height=\"20px\" showBorder />\n        </InlineStack>\n        <Divider />\n        <InlineStack align=\"end\">\n          <Placeholder width=\"106px\" label=\"End\" />\n          <Placeholder width=\"106px\" height=\"20px\" showBorder />\n          <Placeholder width=\"106px\" height=\"20px\" showBorder />\n          <Placeholder width=\"106px\" height=\"20px\" showBorder />\n          <Placeholder width=\"106px\" height=\"20px\" showBorder />\n          <Placeholder width=\"106px\" height=\"20px\" />\n          <Placeholder width=\"106px\" height=\"20px\" showBorder />\n        </InlineStack>\n      </BlockStack>\n    </Page>\n  );\n}\n\nconst Placeholder = ({\n  label = '',\n  height = 'auto',\n  width = 'auto',\n  showBorder = false,\n  showBorderTop = false,\n}) => {\n  return (\n    <div\n      style={{\n        padding: '6px 0',\n        background: 'var(--p-color-text-info)',\n        height: height,\n        width: width,\n        borderInlineStart: showBorder\n          ? '1px dashed var(--p-color-bg-surface-success)'\n          : 'none',\n        borderBlockStart: showBorderTop\n          ? '1px dashed var(--p-color-bg-surface-success)'\n          : 'none',\n      }}\n    >\n      <InlineStack align=\"center\">\n        <div\n          style={{\n            color: 'var(--p-color-text-info-on-bg-fill)',\n          }}\n        >\n          <Text as=\"h2\" variant=\"bodyMd\" fontWeight=\"medium\">\n            {label}\n          </Text>\n        </div>\n      </InlineStack>\n    </div>\n  );\n};\n\n"}],"seoDescription":"Use to display children horizontally in a row. Based on CSS Flexbox.","type":{"InlineStackProps":{"filePath":"polaris-react/src/components/InlineStack/InlineStack.tsx","name":"InlineStackProps","description":"","members":[{"filePath":"polaris-react/src/components/InlineStack/InlineStack.tsx","syntaxKind":"PropertySignature","name":"children","value":"React.ReactNode","description":"","isOptional":true},{"filePath":"polaris-react/src/components/InlineStack/InlineStack.tsx","syntaxKind":"PropertySignature","name":"align","value":"Align","description":"Horizontal alignment of children","isOptional":true},{"filePath":"polaris-react/src/components/InlineStack/InlineStack.tsx","syntaxKind":"PropertySignature","name":"blockAlign","value":"BlockAlign","description":"Vertical alignment of children","isOptional":true},{"filePath":"polaris-react/src/components/InlineStack/InlineStack.tsx","syntaxKind":"PropertySignature","name":"gap","value":"Gap","description":"The spacing between elements. Accepts a spacing token or an object of spacing tokens for different screen sizes.","isOptional":true},{"filePath":"polaris-react/src/components/InlineStack/InlineStack.tsx","syntaxKind":"PropertySignature","name":"wrap","value":"boolean","description":"Wrap stack elements to additional rows as needed on small screens","isOptional":true,"defaultValue":"true"}],"value":"export interface InlineStackProps extends React.AriaAttributes {\n  children?: React.ReactNode;\n  /** Horizontal alignment of children */\n  align?: Align;\n  /** Vertical alignment of children */\n  blockAlign?: BlockAlign;\n  /** The spacing between elements. Accepts a spacing token or an object of spacing tokens for different screen sizes.\n   * @example\n   * gap='200'\n   * gap={{xs: '200', sm: '300', md: '400', lg: '500', xl: '600'}}\n   */\n  gap?: Gap;\n  /** Wrap stack elements to additional rows as needed on small screens\n   * @default true\n   */\n  wrap?: boolean;\n}"},"Align":{"filePath":"polaris-react/src/components/InlineStack/InlineStack.tsx","syntaxKind":"TypeAliasDeclaration","name":"Align","value":"'start' | 'center' | 'end' | 'space-around' | 'space-between' | 'space-evenly'","description":""},"BlockAlign":{"filePath":"polaris-react/src/components/InlineStack/InlineStack.tsx","syntaxKind":"TypeAliasDeclaration","name":"BlockAlign","value":"'start' | 'center' | 'end' | 'baseline' | 'stretch'","description":""},"Gap":{"filePath":"polaris-react/src/components/InlineStack/InlineStack.tsx","syntaxKind":"TypeAliasDeclaration","name":"Gap","value":"ResponsiveProp<SpaceScale>","description":""},"ResponsiveProp":{"filePath":"polaris-react/src/utilities/css.ts","syntaxKind":"TypeAliasDeclaration","name":"ResponsiveProp","value":"T | ResponsivePropConfig<T>","description":""},"ResponsivePropConfig":{"filePath":"polaris-react/src/utilities/css.ts","syntaxKind":"TypeAliasDeclaration","name":"ResponsivePropConfig","value":"{\n  [Breakpoint in BreakpointsAlias]?: T;\n}","description":""}},"editPageLinkPath":"polaris.shopify.com/content/components/layout-and-structure/inline-stack.mdx"},"__N_SSG":true}