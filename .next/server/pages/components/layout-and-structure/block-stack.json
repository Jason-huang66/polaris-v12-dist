{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    hr: \"hr\",\n    a: \"a\",\n    code: \"code\"\n  }, _provideComponents(), props.components), {Lede, Examples, Props} = _components;\n  if (!Examples) _missingMdxReference(\"Examples\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Props) _missingMdxReference(\"Props\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: _jsx(_components.p, {\n        children: \"Use to display children vertically and horizontally with full width by default. Based on CSS Flexbox.\"\n      })\n    }), \"\\n\", _jsx(Examples, {}), \"\\n\", _jsx(Props, {\n      componentName: frontmatter.title\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"best-practices\",\n      children: \"Best practices\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Stacks should:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Not be used for complex or unique arrangements of components\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Not be used for large-scale page layout\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"related-components\",\n      children: \"Related components\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"To display elements horizontally, \", _jsx(_components.a, {\n          href: \"https://polaris.shopify.com/components/layout-and-structure/inline-stack\",\n          children: \"use the InlineStack component\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"related-resources\",\n      children: \"Related resources\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"BlockStack props are named following the convention of CSS logical properties, such as \", _jsx(_components.code, {\n          children: \"align=\\\"start\\\"\"\n        }), \" vs. \", _jsx(_components.code, {\n          children: \"align=\\\"top\\\"\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"inlineAlign=\\\"end\\\"\"\n        }), \" vs. \", _jsx(_components.code, {\n          children: \"verticalAlign=\\\"right\\\"\"\n        }), \". Learn more about \", _jsx(_components.a, {\n          href: \"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties\",\n          children: \"CSS logicial properties\"\n        }), \".\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Block stack","category":"Layout and structure","keywords":["layout","stack spacing","vertical centering","fill available space","fill space","equal width","right-aligned stack","stack layout"],"examples":[{"fileName":"block-stack-with-gap.tsx","title":"Gap","description":"Control the vertical space between children using the `gap` prop."},{"fileName":"block-stack-with-align.tsx","title":"Align","description":"Control the vertical alignment of children using the `align` prop."},{"fileName":"block-stack-with-inline-align.tsx","title":"Inline align","description":"Control the horizontal alignment of children using the `inlineAlign` prop."}],"previewImg":"/images/components/layout-and-structure/block-stack.png"},"scope":{"__remarkNextMdxImporter":{}}},"examples":[{"fileName":"block-stack-with-gap.tsx","title":"Gap","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_components.p, {\n    children: [\"Control the vertical space between children using the \", _jsx(_components.code, {\n      children: \"gap\"\n    }), \" prop.\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import React from 'react';\nimport {BlockStack} from '@shopify/polaris';\n\n\nfunction BlockStackWithGapExample() {\n  return (\n    <SpacingBackground>\n      <BlockStack gap=\"500\">\n        <Placeholder height=\"48px\" />\n        <Placeholder height=\"48px\" />\n        <Placeholder height=\"48px\" />\n      </BlockStack>\n    </SpacingBackground>\n  );\n}\n\nconst SpacingBackground = ({children}: {children: React.ReactNode}) => {\n  return (\n    <div\n      style={{\n        background: 'var(--p-color-bg-surface-success)',\n        height: 'auto',\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\nconst Placeholder = ({height = 'auto'}) => {\n  return (\n    <div\n      style={{\n        background: 'var(--p-color-text-info)',\n        padding: '14px var(--p-space-200)',\n        height: height,\n      }}\n    />\n  );\n};\n\n"},{"fileName":"block-stack-with-align.tsx","title":"Align","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_components.p, {\n    children: [\"Control the vertical alignment of children using the \", _jsx(_components.code, {\n      children: \"align\"\n    }), \" prop.\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import React from 'react';\nimport {BlockStack, InlineStack, Text, Divider} from '@shopify/polaris';\n\n\nfunction BlockStackWithAlignExample() {\n  return (\n    <>\n      <Divider />\n      <div style={{display: 'flex', height: '200px'}}>\n        <BlockStack align=\"start\">\n          <Placeholder height=\"48px\" width=\"320px\" label=\"Start\" showBorder />\n          <Placeholder height=\"48px\" width=\"320px\" showBorder />\n          <Placeholder height=\"48px\" width=\"320px\" showBorder />\n        </BlockStack>\n      </div>\n      <Divider />\n      <div style={{display: 'flex', height: '200px'}}>\n        <BlockStack align=\"center\">\n          <Placeholder height=\"48px\" width=\"320px\" label=\"Center\" showBorder />\n          <Placeholder height=\"48px\" width=\"320px\" showBorder />\n          <Placeholder height=\"48px\" width=\"320px\" showBorder />\n        </BlockStack>\n      </div>\n      <Divider />\n      <div style={{display: 'flex', height: '200px'}}>\n        <BlockStack align=\"end\">\n          <Placeholder height=\"48px\" width=\"320px\" label=\"End\" showBorder />\n          <Placeholder height=\"48px\" width=\"320px\" showBorder />\n          <Placeholder height=\"48px\" width=\"320px\" showBorder />\n        </BlockStack>\n      </div>\n      <Divider />\n    </>\n  );\n}\n\nconst Placeholder = ({\n  label = '',\n  height = 'auto',\n  width = 'auto',\n  showBorder = false,\n}) => {\n  return (\n    <div\n      style={{\n        background: 'var(--p-color-text-info)',\n        padding: '14px var(--p-space-200)',\n        height: height,\n        width: width,\n        borderBlockEnd: showBorder\n          ? '1px dashed var(--p-color-bg-surface-success)'\n          : 'none',\n      }}\n    >\n      <InlineStack align=\"center\">\n        <div\n          style={{\n            color: 'var(--p-color-text-info-on-bg-fill)',\n          }}\n        >\n          <Text as=\"h2\" variant=\"bodyMd\" fontWeight=\"regular\">\n            {label}\n          </Text>\n        </div>\n      </InlineStack>\n    </div>\n  );\n};\n\n"},{"fileName":"block-stack-with-inline-align.tsx","title":"Inline align","description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_components.p, {\n    children: [\"Control the horizontal alignment of children using the \", _jsx(_components.code, {\n      children: \"inlineAlign\"\n    }), \" prop.\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"__remarkNextMdxImporter":{}}},"code":"import React from 'react';\nimport {BlockStack, Page, InlineStack, Text, Divider} from '@shopify/polaris';\n\n\nfunction BlockStackWithInlineAlignExample() {\n  return (\n    <Page>\n      <BlockStack gap=\"800\">\n        <BlockStack inlineAlign=\"start\">\n          <Placeholder height=\"48px\" width=\"320px\" label=\"Start\" showBorder />\n          <Placeholder height=\"48px\" width=\"320px\" showBorder />\n          <Placeholder height=\"48px\" width=\"320px\" showBorder />\n        </BlockStack>\n        <Divider />\n        <BlockStack inlineAlign=\"center\">\n          <Placeholder height=\"48px\" width=\"320px\" label=\"Center\" showBorder />\n          <Placeholder height=\"48px\" width=\"320px\" showBorder />\n          <Placeholder height=\"48px\" width=\"320px\" showBorder />\n        </BlockStack>\n        <Divider />\n        <BlockStack inlineAlign=\"end\">\n          <Placeholder height=\"48px\" width=\"320px\" label=\"End\" showBorder />\n          <Placeholder height=\"48px\" width=\"320px\" showBorder />\n          <Placeholder height=\"48px\" width=\"320px\" showBorder />\n        </BlockStack>\n      </BlockStack>\n    </Page>\n  );\n}\n\nconst Placeholder = ({\n  label = '',\n  height = 'auto',\n  width = 'auto',\n  showBorder = false,\n}) => {\n  return (\n    <div\n      style={{\n        background: 'var(--p-color-text-info)',\n        padding: '14px var(--p-space-200)',\n        height: height,\n        width: width,\n        borderBlockEnd: showBorder\n          ? '1px dashed var(--p-color-bg-surface-success)'\n          : 'none',\n      }}\n    >\n      <InlineStack align=\"center\">\n        <div\n          style={{\n            color: 'var(--p-color-text-info-on-bg-fill)',\n          }}\n        >\n          <Text as=\"h2\" variant=\"bodyMd\" fontWeight=\"regular\">\n            {label}\n          </Text>\n        </div>\n      </InlineStack>\n    </div>\n  );\n};\n\n"}],"seoDescription":"Use to display children vertically and horizontally with full width by default. Based on CSS Flexbox.","type":{"BlockStackProps":{"filePath":"polaris-react/src/components/BlockStack/BlockStack.tsx","name":"BlockStackProps","description":"","members":[{"filePath":"polaris-react/src/components/BlockStack/BlockStack.tsx","syntaxKind":"PropertySignature","name":"children","value":"React.ReactNode","description":"","isOptional":true},{"filePath":"polaris-react/src/components/BlockStack/BlockStack.tsx","syntaxKind":"PropertySignature","name":"as","value":"Element","description":"HTML Element type","isOptional":true,"defaultValue":"'div'"},{"filePath":"polaris-react/src/components/BlockStack/BlockStack.tsx","syntaxKind":"PropertySignature","name":"align","value":"Align","description":"Vertical alignment of children","isOptional":true},{"filePath":"polaris-react/src/components/BlockStack/BlockStack.tsx","syntaxKind":"PropertySignature","name":"inlineAlign","value":"InlineAlign","description":"Horizontal alignment of children","isOptional":true},{"filePath":"polaris-react/src/components/BlockStack/BlockStack.tsx","syntaxKind":"PropertySignature","name":"gap","value":"Gap","description":"The spacing between children","isOptional":true},{"filePath":"polaris-react/src/components/BlockStack/BlockStack.tsx","syntaxKind":"PropertySignature","name":"id","value":"string","description":"HTML id attribute","isOptional":true},{"filePath":"polaris-react/src/components/BlockStack/BlockStack.tsx","syntaxKind":"PropertySignature","name":"reverseOrder","value":"boolean","description":"Reverse the render order of child items","isOptional":true,"defaultValue":"false"},{"filePath":"polaris-react/src/components/BlockStack/BlockStack.tsx","syntaxKind":"PropertySignature","name":"role","value":"any","description":"Aria role","isOptional":true}],"value":"export interface BlockStackProps extends React.AriaAttributes {\n  children?: React.ReactNode;\n  /** HTML Element type\n   * @default 'div'\n   */\n  as?: Element;\n  /** Vertical alignment of children */\n  align?: Align;\n  /** Horizontal alignment of children */\n  inlineAlign?: InlineAlign;\n  /** The spacing between children */\n  gap?: Gap;\n  /** HTML id attribute */\n  id?: string;\n  /** Reverse the render order of child items\n   * @default false\n   */\n  reverseOrder?: boolean;\n  /** Aria role */\n  role?: Extract<\n    React.AriaRole,\n    'status' | 'presentation' | 'menu' | 'listbox' | 'combobox' | 'group'\n  >;\n}"},"Element":{"filePath":"polaris-react/src/components/BlockStack/BlockStack.tsx","syntaxKind":"TypeAliasDeclaration","name":"Element","value":"'div' | 'ul' | 'ol' | 'fieldset'","description":""},"Align":{"filePath":"polaris-react/src/components/BlockStack/BlockStack.tsx","syntaxKind":"TypeAliasDeclaration","name":"Align","value":"'start' | 'center' | 'end' | 'space-around' | 'space-between' | 'space-evenly'","description":""},"InlineAlign":{"filePath":"polaris-react/src/components/BlockStack/BlockStack.tsx","syntaxKind":"TypeAliasDeclaration","name":"InlineAlign","value":"'start' | 'center' | 'end' | 'baseline' | 'stretch'","description":""},"Gap":{"filePath":"polaris-react/src/components/BlockStack/BlockStack.tsx","syntaxKind":"TypeAliasDeclaration","name":"Gap","value":"ResponsiveProp<SpaceScale>","description":""},"ResponsiveProp":{"filePath":"polaris-react/src/utilities/css.ts","syntaxKind":"TypeAliasDeclaration","name":"ResponsiveProp","value":"T | ResponsivePropConfig<T>","description":""},"ResponsivePropConfig":{"filePath":"polaris-react/src/utilities/css.ts","syntaxKind":"TypeAliasDeclaration","name":"ResponsivePropConfig","value":"{\n  [Breakpoint in BreakpointsAlias]?: T;\n}","description":""}},"editPageLinkPath":"polaris.shopify.com/content/components/layout-and-structure/block-stack.mdx"},"__N_SSG":true}