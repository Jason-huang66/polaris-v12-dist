{"pageProps":{"mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h2: \"h2\",\n    p: \"p\",\n    img: \"img\"\n  }, _provideComponents(), props.components), {Lede, Subnav, Stack, Card, Grid, Box, Do, Dont} = _components;\n  if (!Box) _missingMdxReference(\"Box\", true);\n  if (!Card) _missingMdxReference(\"Card\", true);\n  if (!Do) _missingMdxReference(\"Do\", true);\n  if (!Dont) _missingMdxReference(\"Dont\", true);\n  if (!Grid) _missingMdxReference(\"Grid\", true);\n  if (!Grid.Cell) _missingMdxReference(\"Grid.Cell\", true);\n  if (!Lede) _missingMdxReference(\"Lede\", true);\n  if (!Stack) _missingMdxReference(\"Stack\", true);\n  if (!Subnav) _missingMdxReference(\"Subnav\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"frontmattertitle\",\n      children: frontmatter.title\n    }), \"\\n\", _jsx(Lede, {\n      children: frontmatter.description\n    }), \"\\n\", _jsx(Subnav, {}), \"\\n\", _jsxs(Stack, {\n      gap: \"800\",\n      children: [_jsx(Card, {\n        children: _jsxs(Grid, {\n          gap: \"400\",\n          children: [_jsx(Grid.Cell, {\n            columnSpan: {\n              xs: 6,\n              lg: 4\n            },\n            children: _jsxs(Box, {\n              padding: \"400\",\n              children: [_jsx(_components.h2, {\n                id: \"space-defines-proximity\",\n                children: \"Space defines proximity\"\n              }), _jsx(_components.p, {\n                children: \"Space plays a vital role in establishing connections between items. The principle of proximity states that the closer objects are, the stronger their perceived relationship.\"\n              })]\n            })\n          }), _jsx(Grid.Cell, {\n            columnSpan: {\n              xs: 6,\n              lg: 8\n            },\n            children: _jsx(_components.img, {\n              src: \"/images/design/layout/layout-overview-01-space@2x.png\",\n              alt: \"An order card with an inset table followed by an apps card with a grid pattern made of different surfaces\"\n            })\n          }), _jsx(Grid.Cell, {\n            columnSpan: {\n              xs: 6,\n              lg: 4\n            },\n            children: _jsx(Box, {\n              padding: \"400\",\n              children: _jsx(_components.p, {\n                children: \"Grouping similar items together helps merchants understand which elements are related and helps them make faster decisions.\"\n              })\n            })\n          }), _jsx(Grid.Cell, {\n            columnSpan: {\n              xs: 6,\n              lg: 4\n            },\n            children: _jsxs(Do, {\n              children: [_jsx(_components.img, {\n                src: \"/images/design/layout/layout-overview-02-space-do@2x.png\",\n                alt: \"A card with a product title, product description and product status\"\n              }), _jsx(_components.p, {\n                children: \"Group similar data points or tasks in the same card.\"\n              })]\n            })\n          }), _jsx(Grid.Cell, {\n            columnSpan: {\n              xs: 6,\n              lg: 4\n            },\n            children: _jsxs(Do, {\n              children: [_jsx(_components.img, {\n                src: \"/images/design/layout/layout-overview-03-space-nesting-do@2x.png\",\n                alt: \"Elemes within a card that have reduced border radius, creating a nesting effect\"\n              }), _jsx(_components.p, {\n                children: \"Nest inset shapes and surfaces.\"\n              })]\n            })\n          })]\n        })\n      }), _jsx(Card, {\n        children: _jsxs(Grid, {\n          gap: \"400\",\n          children: [_jsx(Grid.Cell, {\n            columnSpan: {\n              xs: 6,\n              lg: 4\n            },\n            children: _jsxs(Box, {\n              padding: \"400\",\n              children: [_jsx(_components.h2, {\n                id: \"emphasis-creates-hierarchy\",\n                children: \"Emphasis creates hierarchy\"\n              }), _jsx(_components.p, {\n                children: \"In the Shopify admin, larger, heavier, and contrasting elements attract attention and create visual rhythm.\"\n              }), _jsx(_components.p, {\n                children: \"Smaller, lighter, and more subtle elements are work-oriented and provide detailed information.\"\n              })]\n            })\n          }), _jsx(Grid.Cell, {\n            columnSpan: {\n              xs: 6,\n              lg: 8\n            },\n            children: _jsx(_components.img, {\n              src: \"/images/design/layout/layout-overview-04-emphasis@2x.png\",\n              alt: \"A grid pattern showing different marketing statistics, separated in cards that have a title and a larger stat numbe\"\n            })\n          }), _jsx(Grid.Cell, {\n            columnSpan: {\n              xs: 6,\n              lg: 4\n            },\n            children: _jsx(Box, {\n              padding: \"400\",\n              children: _jsx(_components.p, {\n                children: \"Use size, weight, and contrast to establish hierarchy in the admin. Divider lines are used to delimit rows of information in data and index tables, and rarely for dividing information elsewhere.\"\n              })\n            })\n          }), _jsx(Grid.Cell, {\n            columnSpan: {\n              xs: 6,\n              lg: 4\n            },\n            children: _jsxs(Do, {\n              children: [_jsx(_components.img, {\n                src: \"/images/design/layout/layout-overview-05-emphasis-do@2x.png\",\n                alt: \"A customer card using different surface colors and font sizes to delineate information\"\n              }), _jsx(_components.p, {\n                children: \"Use weight and contrast to introduce sections of the UI.\"\n              })]\n            })\n          }), _jsx(Grid.Cell, {\n            columnSpan: {\n              xs: 6,\n              lg: 4\n            },\n            children: _jsxs(Dont, {\n              children: [_jsx(_components.img, {\n                src: \"/images/design/layout/layout-overview-06-emphasis-dont@2x.png\",\n                alt: \"A customer card using horizontal lines to deliane information\"\n              }), _jsx(_components.p, {\n                children: \"Use divider lines to create visual hierarchy or separation outside of indexes of tables.\"\n              })]\n            })\n          })]\n        })\n      }), _jsx(Card, {\n        children: _jsxs(Grid, {\n          gap: \"400\",\n          children: [_jsx(Grid.Cell, {\n            columnSpan: {\n              xs: 6,\n              lg: 4\n            },\n            children: _jsxs(Box, {\n              padding: \"400\",\n              children: [_jsx(_components.h2, {\n                id: \"software-not-website\",\n                children: \"Software, not website\"\n              }), _jsx(_components.p, {\n                children: \"Since the admin is more like software, rather than a website, elements need to be sized appropriately based on their job.\"\n              })]\n            })\n          }), _jsx(Grid.Cell, {\n            columnSpan: {\n              xs: 6,\n              lg: 8\n            },\n            children: _jsx(_components.img, {\n              src: \"/images/design/layout/layout-overview-07-adapt@2x.png\",\n              alt: \"Different cards showing button placement, popover contextual menus and high-density cards containing a lot of information\"\n            })\n          }), _jsx(Grid.Cell, {\n            columnSpan: {\n              xs: 6,\n              lg: 4\n            },\n            children: _jsx(Box, {\n              padding: \"400\",\n              children: _jsx(_components.p, {\n                children: \"Compact elements add detail, and larger elements command more attention. Surfaces adapt to these components and offer an optimized view of the admin.\"\n              })\n            })\n          }), _jsx(Grid.Cell, {\n            columnSpan: {\n              xs: 6,\n              lg: 4\n            },\n            children: _jsxs(Do, {\n              children: [_jsx(_components.img, {\n                src: \"/images/design/layout/layout-overview-08-adapt-do@2x.png\",\n                alt: \"A tag component with small tags and a small “add tag” button\"\n              }), _jsx(_components.p, {\n                children: \"Create compact components for specialized, minute tasks.\"\n              })]\n            })\n          }), _jsx(Grid.Cell, {\n            columnSpan: {\n              xs: 6,\n              lg: 4\n            },\n            children: _jsxs(Dont, {\n              children: [_jsx(_components.img, {\n                src: \"/images/design/layout/layout-overview-09-adapt-dont@2x.png\",\n                alt: \"A tag component with large tags presented as a list, each taking the entire space of a row, with a large “add tag” button in the upper right corner\"\n              }), _jsx(_components.p, {\n                children: \"Contradict the importance of a task with its size in the admin.\"\n              })]\n            })\n          })]\n        })\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Layout","icon":"TemplateMajor","order":5,"showTOC":true,"keywords":["layout","layout components","structure","position","stack","columns","bleed","card","box","inline","divider","responsive","spacing"],"description":"Layout determines the placement, positioning, and organization of various components within the UI, such as buttons, menus, content sections, and other visual elements.","hideChildren":true,"status":"New"},"scope":{"posts":[{"url":"/design/layout/spacial-organization","description":"Components, elements and surfaces are organized to create compositions that make the best use of space.","title":"Spacial organization","order":1,"icon":"BuyButtonButtonLayoutMajor","keywords":["layout","layout components","structure","position","stack","columns","bleed","card","box","inline","divider","responsive","spacing"]},{"url":"/design/layout/density","description":"The admin is high density by default, but the level of density can range depending on the merchant's task.","title":"Density","order":2,"icon":"Columns3Minor","keywords":["layout","layout components","structure","position","stack","columns","bleed","card","box","inline","divider","responsive","spacing"]},{"url":"/design/layout/layout-tokens","description":"Apply consistent and harmonious space within and between ui elements.","title":"Tokens","order":3,"icon":"Hexagon","keywords":["layout","layout components","structure","position","stack","columns","bleed","card","box","inline","divider","responsive","spacing"]}],"__remarkNextMdxImporter":{}}},"seoDescription":"Space defines proximity","editPageLinkPath":"/polaris.shopify.com/content/design/layout/index.mdx","isContentPage":false,"showTOC":true,"collapsibleTOC":false},"__N_SSG":true}